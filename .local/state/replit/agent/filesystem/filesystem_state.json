{"file_contents":{"README.md":{"content":"# Vsora dashboard\n\n*Automatically synced with your [v0.dev](https://v0.dev) deployments*\n\n[![Deployed on Vercel](https://img.shields.io/badge/Deployed%20on-Vercel-black?style=for-the-badge&logo=vercel)](https://vercel.com/harshaltetc22-9374s-projects/v0-vsora-dashboard)\n[![Built with v0](https://img.shields.io/badge/Built%20with-v0.dev-black?style=for-the-badge)](https://v0.dev/chat/projects/G5e6InOLyrP)\n\n## Overview\n\nThis is the EV-Secure Dashboard - a comprehensive monitoring and control system for EV charging stations with ESP32-S3 integration.\n\n## Features\n\n- **Real-time Monitoring**: Live data from ESP32-S3 charging stations\n- **API Key Management**: Generate unique API keys for each station\n- **Arduino Code Generator**: Automatically generate customized Arduino code for each station\n- **Threat Detection**: ML-powered anomaly detection and security monitoring\n- **Multi-Station Support**: Manage multiple charging stations from one dashboard\n- **User Management**: Admin and end-user access levels\n\n## ESP32-S3 Integration\n\n### API Key System\nEach ESP32-S3 station requires a unique API key for authentication:\n1. Go to Settings ‚Üí API Keys\n2. Generate a key for your station (ST001, ST002, etc.)\n3. Use the Code Generator to get customized Arduino code\n4. Copy the generated code into your `EV_Secure_Config.h` file\n5. Upload to your ESP32-S3 device\n\n### Supported Stations\n- **ST001**: Downtown Plaza\n- **ST002**: Mall Parking  \n- **ST003**: Airport Terminal\n- **ST004**: University Campus\n\n### Arduino Code Structure\nThe system includes complete Arduino libraries for ESP32-S3:\n- `EV_Secure_Config.h` - Main configuration file\n- `SensorManager.h` - Sensor reading and management\n- `DisplayManager.h` - TFT display control\n- `APIManager.h` - Dashboard communication\n- `MLModel.h` - Machine learning threat detection\n- `SDLogger.h` - Data logging to SD card\n- `RelayController.h` - Power control and safety\n\n## Deployment\n\nYour project is live at:\n\n**[https://vercel.com/harshaltetc22-9374s-projects/v0-vsora-dashboard](https://vercel.com/harshaltetc22-9374s-projects/v0-vsora-dashboard)**\n\n## Build your app\n\nContinue building your app on:\n\n**[https://v0.dev/chat/projects/G5e6InOLyrP](https://v0.dev/chat/projects/G5e6InOLyrP)**\n\n## How It Works\n\n1. Create and modify your project using [v0.dev](https://v0.dev)\n2. Deploy your chats from the v0 interface\n3. Changes are automatically pushed to this repository\n4. Vercel deploys the latest version from this repository\n\n## API Endpoints\n\nThe dashboard provides REST API endpoints for ESP32-S3 communication:\n- `POST /api/data` - Receive sensor data from stations\n- `GET /api/commands` - Send commands to stations\n- `POST /api/alerts` - Receive threat alerts\n- `GET /api/status` - Health check endpoint\n\n## Getting Started\n\n1. **Dashboard Setup**:\n   - Deploy the dashboard to Vercel or run locally\n   - Create admin accounts through the login system\n   - Generate API keys for your stations\n\n2. **ESP32-S3 Setup**:\n   - Use the Code Generator to get customized Arduino code\n   - Update WiFi credentials in the generated code\n   - Upload to your ESP32-S3 device\n   - Monitor connection status in the dashboard\n\n3. **Testing**:\n   - Use the provided test script: `python test_api_endpoints.py`\n   - Monitor real-time data in the dashboard\n   - Test threat detection and alerts# Megaproject-1\n# Megaproject-1\n","size_bytes":3376},"README_EV_Secure_System.md":{"content":"# EV-Secure ESP32-S3 Complete System\n\nA comprehensive Arduino-compatible ESP32-S3 project for EV charging station security monitoring and threat detection.\n\n## üåü Features\n\n### Hardware Integration\n- **Voltage Sensor**: ZMPT101B or voltage divider (ADC)\n- **Current Sensor**: ACS712 (30A) or INA226 Energy Meter (I¬≤C)\n- **Temperature Sensor**: DS18B20 (OneWire)\n- **Display**: 1.8\" TFT Display (ST7735/ST7789, SPI)\n- **Storage**: MicroSD Card Module (SPI)\n- **Control**: Relay/Contactor Module (GPIO)\n- **Status**: LED and Buzzer indicators\n- **Safety**: Emergency Stop Button\n\n### Software Features\n- **Real-time Monitoring**: Continuous sensor data acquisition\n- **Machine Learning**: TensorFlow Lite Micro for threat detection\n- **Wi-Fi Communication**: Secure API integration with dashboard\n- **Data Logging**: Comprehensive SD card logging\n- **Remote Control**: Dashboard command reception\n- **Safety Systems**: Emergency stop and overcurrent protection\n- **Visual Interface**: Real-time TFT display updates\n\n## üìÅ Project Structure\n\n```\nEV-Secure-System/\n‚îú‚îÄ‚îÄ EV_Secure_ESP32S3_Complete.ino    # Main Arduino sketch\n‚îú‚îÄ‚îÄ EV_Secure_Config.h                # Configuration and pin definitions\n‚îú‚îÄ‚îÄ MLModel.h                         # TensorFlow Lite Micro model\n‚îú‚îÄ‚îÄ SensorManager.h                   # Sensor reading library\n‚îú‚îÄ‚îÄ DisplayManager.h                  # TFT display management\n‚îú‚îÄ‚îÄ SDLogger.h                        # SD card logging library\n‚îú‚îÄ‚îÄ APIManager.h                      # Dashboard API communication\n‚îú‚îÄ‚îÄ RelayController.h                 # Relay/contactor control\n‚îî‚îÄ‚îÄ README_EV_Secure_System.md        # This documentation\n```\n\n## üîß Hardware Setup\n\n### Pin Configuration (ESP32-S3)\n\n| Component | Pin | Function |\n|-----------|-----|----------|\n| Current Sensor | GPIO1 | ADC1_CH0 |\n| Voltage Sensor | GPIO2 | ADC1_CH1 |\n| Temperature Sensor | GPIO3 | OneWire |\n| SD Card MOSI | GPIO11 | SPI |\n| SD Card MISO | GPIO13 | SPI |\n| SD Card SCK | GPIO12 | SPI |\n| SD Card CS | GPIO10 | SPI |\n| TFT MOSI | GPIO35 | SPI |\n| TFT MISO | GPIO37 | SPI |\n| TFT SCK | GPIO36 | SPI |\n| TFT CS | GPIO34 | SPI |\n| TFT DC | GPIO14 | Control |\n| TFT RST | GPIO15 | Reset |\n| Relay Control | GPIO18 | Power Control |\n| Status LED | GPIO2 | Status Indicator |\n| Buzzer | GPIO4 | Alert Sound |\n| Emergency Stop | GPIO16 | Safety Button |\n| I¬≤C SDA | GPIO21 | I¬≤C Data |\n| I¬≤C SCL | GPIO22 | I¬≤C Clock |\n\n### Wiring Diagram\n\n```\nESP32-S3 DevKit\n‚îú‚îÄ‚îÄ ACS712 Current Sensor ‚Üí GPIO1 (ADC)\n‚îú‚îÄ‚îÄ ZMPT101B Voltage Sensor ‚Üí GPIO2 (ADC)\n‚îú‚îÄ‚îÄ DS18B20 Temperature ‚Üí GPIO3 (OneWire)\n‚îú‚îÄ‚îÄ 1.8\" TFT Display ‚Üí GPIO35,37,36,34,14,15 (SPI)\n‚îú‚îÄ‚îÄ MicroSD Card ‚Üí GPIO11,13,12,10 (SPI)\n‚îú‚îÄ‚îÄ Relay Module ‚Üí GPIO18 (Control)\n‚îú‚îÄ‚îÄ Status LED ‚Üí GPIO2\n‚îú‚îÄ‚îÄ Buzzer ‚Üí GPIO4\n‚îú‚îÄ‚îÄ Emergency Stop Button ‚Üí GPIO16\n‚îî‚îÄ‚îÄ INA226 (Optional) ‚Üí GPIO21,22 (I¬≤C)\n```\n\n## ‚öôÔ∏è Configuration\n\n### 1. WiFi Configuration\nEdit `EV_Secure_Config.h`:\n```cpp\n#define WIFI_SSID \"YOUR_WIFI_SSID\"\n#define WIFI_PASSWORD \"YOUR_WIFI_PASSWORD\"\n```\n\n### 2. API Configuration\n```cpp\n#define DASHBOARD_URL \"https://your-dashboard.com/api/endpoint\"\n#define API_KEY \"YOUR_API_KEY_HERE\"\n```\n\n### 3. Sensor Calibration\nAdjust calibration factors in `EV_Secure_Config.h`:\n```cpp\n#define ACS712_SENSITIVITY 66.0   // mV/A for 30A module\n#define ZMPT101B_CALIBRATION 0.00488  // Calibration factor\n```\n\n## üöÄ Installation & Setup\n\n### Prerequisites\n- Arduino IDE 2.0+\n- ESP32 Arduino Core 2.0+\n- Required Libraries:\n  - `WiFi`\n  - `HTTPClient`\n  - `SD`\n  - `SPI`\n  - `ArduinoJson`\n  - `Adafruit_GFX`\n  - `Adafruit_ST7735`\n  - `OneWire`\n  - `DallasTemperature`\n\n### Installation Steps\n\n1. **Install ESP32 Arduino Core**\n   ```\n   Arduino IDE ‚Üí Tools ‚Üí Board ‚Üí Boards Manager\n   Search: \"ESP32\" ‚Üí Install \"ESP32 by Espressif Systems\"\n   ```\n\n2. **Install Required Libraries**\n   ```\n   Arduino IDE ‚Üí Tools ‚Üí Manage Libraries\n   Install: WiFi, HTTPClient, SD, SPI, ArduinoJson, Adafruit_GFX, Adafruit_ST7735, OneWire, DallasTemperature\n   ```\n\n3. **Configure Hardware**\n   - Wire components according to pin configuration\n   - Ensure proper power supply (3.3V/5V as needed)\n   - Connect sensors and test basic functionality\n\n4. **Upload Code**\n   - Open `EV_Secure_ESP32S3_Complete.ino` in Arduino IDE\n   - Select Board: \"ESP32S3 Dev Module\"\n   - Configure upload settings if needed\n   - Upload to ESP32-S3\n\n5. **Configure Network**\n   - Update WiFi credentials in config file\n   - Update API endpoint and key\n   - Re-upload if changes made\n\n## üìä System Operation\n\n### Normal Operation Flow\n\n1. **Initialization**\n   - System boots and initializes all peripherals\n   - Connects to WiFi network\n   - Loads ML model and calibrates sensors\n   - Shows startup screen on TFT display\n\n2. **Continuous Monitoring**\n   - Reads sensor data every 100ms\n   - Runs ML inference every 1 second\n   - Updates display every 500ms\n   - Logs data to SD card every 5 seconds\n   - Sends data to dashboard every 2 seconds\n\n3. **Threat Detection**\n   - ML model analyzes sensor patterns\n   - Compares against learned normal behavior\n   - Triggers alerts for suspicious patterns\n   - Activates safety systems if needed\n\n4. **Safety Response**\n   - Emergency stop button immediately cuts power\n   - Overcurrent protection trips relay\n   - Dashboard can send remote stop commands\n   - System logs all events for analysis\n\n### Display Information\n\nThe TFT display shows:\n- **Header**: Session ID and system state\n- **Sensor Data**: Voltage, Current, Power, Frequency, Temperature\n- **ML Prediction**: Threat probability and confidence\n- **Status Bar**: WiFi, Charging, Alert indicators\n\n### Data Logging\n\nSD card contains:\n- `sensor_data.csv`: Continuous sensor readings\n- `ml_predictions.csv`: ML model predictions\n- `system_events.csv`: State changes and events\n- `alerts.csv`: Threat detections and alerts\n- `error_log.txt`: System errors and debugging\n\n## üîí Security Features\n\n### Threat Detection\n- **ML-based Anomaly Detection**: Identifies unusual charging patterns\n- **Rule-based Safety**: Overcurrent, overvoltage, frequency deviation\n- **Real-time Monitoring**: Continuous analysis of sensor data\n- **Confidence Scoring**: ML model provides confidence levels\n\n### Safety Systems\n- **Emergency Stop**: Hardware button for immediate power cutoff\n- **Overcurrent Protection**: Automatic relay trip on excessive current\n- **Remote Control**: Dashboard can send stop commands\n- **Fault Detection**: Monitors relay health and sensor status\n- **Manual Override**: Bypass safety systems when needed (with caution)\n\n### Communication Security\n- **HTTPS/TLS**: Encrypted communication with dashboard\n- **API Key Authentication**: Secure API access\n- **Rate Limiting**: Prevents API abuse\n- **Error Handling**: Robust error recovery and logging\n\n## üì° API Integration\n\n### Data Transmission\n```json\n{\n  \"device_id\": \"EV_SECURE_001\",\n  \"session_id\": \"SESS_1234567890_1234\",\n  \"timestamp\": 1234567890,\n  \"state\": 2,\n  \"is_charging\": true,\n  \"threat_detected\": false,\n  \"sensors\": {\n    \"current\": 15.5,\n    \"voltage\": 230.0,\n    \"power\": 3565.0,\n    \"frequency\": 50.0,\n    \"temperature\": 25.0\n  },\n  \"ml_prediction\": {\n    \"prediction\": 0.15,\n    \"confidence\": 0.85,\n    \"threat_level\": \"NORMAL\"\n  }\n}\n```\n\n### Command Reception\n```json\n{\n  \"command\": \"STOP\",\n  \"parameters\": \"\",\n  \"timestamp\": 1234567890\n}\n```\n\n### Alert Transmission\n```json\n{\n  \"device_id\": \"EV_SECURE_001\",\n  \"alert_type\": \"THREAT_DETECTED\",\n  \"details\": \"Suspicious charging pattern detected\",\n  \"timestamp\": 1234567890,\n  \"severity\": \"high\"\n}\n```\n\n## üõ†Ô∏è Troubleshooting\n\n### Common Issues\n\n1. **WiFi Connection Failed**\n   - Check SSID and password\n   - Verify signal strength\n   - Check router settings\n\n2. **Sensor Readings Incorrect**\n   - Calibrate sensor factors\n   - Check wiring connections\n   - Verify power supply\n\n3. **Display Not Working**\n   - Check SPI connections\n   - Verify power supply\n   - Check display initialization\n\n4. **SD Card Issues**\n   - Format SD card (FAT32)\n   - Check SPI connections\n   - Verify card compatibility\n\n5. **API Communication Failed**\n   - Check API endpoint URL\n   - Verify API key\n   - Check network connectivity\n\n### Debug Mode\n\nEnable debug output in `EV_Secure_Config.h`:\n```cpp\n#define DEBUG_MODE true\n#define DEBUG_LEVEL 2  // 0=Errors, 1=Warnings, 2=Info, 3=Debug\n```\n\n### Serial Monitor\n\nUse Arduino Serial Monitor (115200 baud) to view:\n- System initialization status\n- Sensor readings\n- ML predictions\n- API communication\n- Error messages\n\n## üîÑ Updates & Maintenance\n\n### Firmware Updates\n- Use OTA (Over-The-Air) updates when available\n- Manual upload via Arduino IDE\n- Backup configuration before updates\n\n### Model Updates\n- Replace `model_data.h` with new model\n- Recompile and upload firmware\n- Test with known data patterns\n\n### Configuration Updates\n- Modify `EV_Secure_Config.h`\n- Recompile and upload\n- Or use dashboard commands (if implemented)\n\n## üìà Performance Optimization\n\n### Memory Usage\n- Monitor heap usage with `ESP.getFreeHeap()`\n- Optimize ML model size\n- Use efficient data structures\n\n### Power Consumption\n- Implement sleep modes when idle\n- Optimize sensor reading frequency\n- Use efficient display updates\n\n### Network Optimization\n- Compress data before transmission\n- Batch multiple readings\n- Use efficient JSON formatting\n\n## üö® Safety Warnings\n\n‚ö†Ô∏è **Important Safety Information**\n\n- This system controls high-voltage AC power\n- Always follow electrical safety procedures\n- Test thoroughly before deployment\n- Ensure proper grounding and isolation\n- Use appropriate safety equipment\n- Follow local electrical codes and regulations\n\n## üìû Support\n\nFor technical support:\n- Check troubleshooting section\n- Review error logs on SD card\n- Monitor serial output\n- Verify hardware connections\n- Test individual components\n\n## üìÑ License\n\nThis project is provided as-is for educational and development purposes. Use at your own risk and ensure compliance with local regulations.\n\n---\n\n**EV-Secure ESP32-S3 System** - Protecting EV charging infrastructure through intelligent monitoring and threat detection.\n","size_bytes":10245},"pnpm-lock.yaml":{"content":"lockfileVersion: '9.0'\n\nsettings:\n  autoInstallPeers: true\n  excludeLinksFromLockfile: false","size_bytes":92},"replit.md":{"content":"# EV-Secure Dashboard - Replit Project\n\n## Overview\nThis is a comprehensive monitoring and control system for EV charging stations with ESP32-S3 integration. The project is built with Next.js 15, TypeScript, and Tailwind CSS 4, providing real-time monitoring, API key management, and threat detection capabilities.\n\n## Project Architecture\n- **Framework**: Next.js 15 (App Router)\n- **Language**: TypeScript\n- **Styling**: Tailwind CSS 4 with new @import syntax\n- **UI Components**: Radix UI with custom components\n- **Build System**: Next.js built-in compiler\n- **Package Manager**: npm\n- **Host Configuration**: Configured for Replit proxy environment\n\n## Current State\n- ‚úÖ Dependencies installed and verified\n- ‚úÖ Next.js configured for Replit environment (allows all hosts)\n- ‚úÖ Development server running on port 5000\n- ‚úÖ Production deployment configured (autoscale)\n- ‚úÖ Tailwind CSS 4 working correctly\n- ‚úÖ API routes functional for ESP32 integration\n\n## Recent Changes (September 20, 2025)\n- Imported from GitHub and set up in Replit environment\n- Updated package.json scripts to use host 0.0.0.0 and port 5000\n- Configured Next.js headers for cache control in Replit environment\n- Set up development workflow and production deployment configuration\n- Verified all components and API endpoints are working\n\n## Key Features\n1. **Real-time Dashboard**: Live monitoring of EV charging stations\n2. **ESP32-S3 Integration**: API endpoints for hardware communication\n3. **API Key Management**: Generate and manage station authentication keys\n4. **Arduino Code Generator**: Automated code generation for ESP32 devices\n5. **Threat Detection**: ML-powered anomaly detection system\n6. **Multi-Station Support**: Management of multiple charging locations\n7. **User Management**: Admin and end-user access control\n\n## File Structure\n- `app/` - Next.js App Router pages and API routes\n  - `api/` - REST API endpoints for ESP32 communication\n  - Individual page components for different dashboard sections\n- `components/` - Reusable React components\n  - `ui/` - Radix UI-based components\n- `Arduino/` - ESP32-S3 firmware and configuration files\n- `evsecure-firmware/` - C/C++ firmware components\n- `hooks/` - Custom React hooks\n- `lib/` - Utility functions\n- `public/` - Static assets\n- `styles/` - Global CSS with Tailwind configuration\n\n## API Endpoints\n- `GET/POST /api/status` - Station health checks and status updates\n- `POST /api/data` - Sensor data collection from stations\n- `GET /api/commands` - Command dispatch to stations\n- `POST /api/alerts` - Threat and security alerts\n- `GET /api/keys` - API key management\n\n## Development\n- Run development server: `npm run dev`\n- Build for production: `npm run build`\n- Start production server: `npm run start`\n- Lint code: `npm run lint`\n\n## Deployment\n- **Type**: Autoscale (stateless web application)\n- **Build Command**: npm run build\n- **Start Command**: npm run start\n- **Port**: 5000 (configured for Replit environment)\n\n## User Preferences\n- Uses modern Next.js patterns with App Router\n- Follows TypeScript best practices\n- Implements responsive design with Tailwind CSS\n- Maintains clean component architecture\n- Includes comprehensive error handling\n\n## Notes\n- The project includes Arduino/ESP32 firmware code for hardware integration\n- API keys are managed in-memory for development (consider database for production)\n- Images are set to unoptimized for better compatibility\n- Build and type errors are ignored in configuration for rapid development","size_bytes":3517},"test_api_endpoints.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nTest script for EV-Secure Dashboard API endpoints\nThis script tests all the API endpoints to ensure they're working correctly\n\"\"\"\n\nimport requests\nimport json\nimport time\nfrom datetime import datetime\n\n# Configuration\nBASE_URL = \"http://localhost:3000\"  # Change this to your actual URL\nAPI_KEY = \"vsr_st001_abc123def456\"   # Use the generated API key from settings\n\n# Test data\ntest_sensor_data = {\n    \"device_id\": \"EV_SORA_001\",\n    \"sensor_data\": {\n        \"current\": 15.5,\n        \"voltage\": 220.0,\n        \"power\": 3410.0,\n        \"frequency\": 50.0,\n        \"temperature\": 25.5,\n        \"timestamp\": int(time.time() * 1000)\n    },\n    \"ml_prediction\": {\n        \"prediction\": \"normal\",\n        \"confidence\": 0.95,\n        \"timestamp\": int(time.time() * 1000)\n    }\n}\n\ntest_alert_data = {\n    \"device_id\": \"EV_SORA_001\",\n    \"alert_type\": \"current_spike\",\n    \"details\": \"Current exceeded threshold: 15.5A > 15.0A\",\n    \"severity\": \"medium\",\n    \"timestamp\": int(time.time() * 1000)\n}\n\ndef test_api_endpoint(endpoint, method=\"GET\", data=None, description=\"\"):\n    \"\"\"Test a single API endpoint\"\"\"\n    url = f\"{BASE_URL}{endpoint}\"\n    headers = {\n        \"Authorization\": f\"Bearer {API_KEY}\",\n        \"Content-Type\": \"application/json\"\n    }\n    \n    print(f\"\\n{'='*60}\")\n    print(f\"Testing: {description}\")\n    print(f\"URL: {url}\")\n    print(f\"Method: {method}\")\n    \n    try:\n        if method == \"GET\":\n            response = requests.get(url, headers=headers, timeout=10)\n        elif method == \"POST\":\n            response = requests.post(url, headers=headers, json=data, timeout=10)\n        elif method == \"DELETE\":\n            response = requests.delete(url, headers=headers, json=data, timeout=10)\n        \n        print(f\"Status Code: {response.status_code}\")\n        \n        if response.status_code < 400:\n            print(\"‚úÖ SUCCESS\")\n            try:\n                response_data = response.json()\n                print(f\"Response: {json.dumps(response_data, indent=2)}\")\n            except:\n                print(f\"Response: {response.text}\")\n        else:\n            print(\"‚ùå FAILED\")\n            print(f\"Error: {response.text}\")\n            \n    except requests.exceptions.RequestException as e:\n        print(f\"‚ùå CONNECTION ERROR: {e}\")\n    except Exception as e:\n        print(f\"‚ùå ERROR: {e}\")\n\ndef main():\n    print(\"EV-Secure Dashboard API Test Suite\")\n    print(f\"Testing against: {BASE_URL}\")\n    print(f\"Using API Key: {API_KEY[:10]}...\")\n    print(f\"Test started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n    \n    # Test 1: Status endpoint\n    test_api_endpoint(\"/api/status\", \"GET\", description=\"Status Check\")\n    \n    # Test 2: Send sensor data\n    test_api_endpoint(\"/api/data\", \"POST\", test_sensor_data, description=\"Send Sensor Data\")\n    \n    # Test 3: Get sensor data\n    test_api_endpoint(\"/api/data\", \"GET\", description=\"Get Sensor Data\")\n    \n    # Test 4: Send alert\n    test_api_endpoint(\"/api/alerts\", \"POST\", test_alert_data, description=\"Send Alert\")\n    \n    # Test 5: Get alerts\n    test_api_endpoint(\"/api/alerts\", \"GET\", description=\"Get Alerts\")\n    \n    # Test 6: Get commands (should return empty)\n    test_api_endpoint(\"/api/commands\", \"GET\", description=\"Get Commands\")\n    \n    # Test 7: Test invalid API key\n    print(f\"\\n{'='*60}\")\n    print(\"Testing: Invalid API Key\")\n    url = f\"{BASE_URL}/api/status\"\n    headers = {\n        \"Authorization\": \"Bearer invalid_key_123\",\n        \"Content-Type\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=10)\n        print(f\"Status Code: {response.status_code}\")\n        if response.status_code == 401:\n            print(\"‚úÖ SUCCESS - Correctly rejected invalid key\")\n        else:\n            print(\"‚ùå FAILED - Should have rejected invalid key\")\n    except Exception as e:\n        print(f\"‚ùå ERROR: {e}\")\n    \n    # Test 8: Test without API key\n    print(f\"\\n{'='*60}\")\n    print(\"Testing: No API Key\")\n    url = f\"{BASE_URL}/api/status\"\n    headers = {\"Content-Type\": \"application/json\"}\n    try:\n        response = requests.get(url, headers=headers, timeout=10)\n        print(f\"Status Code: {response.status_code}\")\n        if response.status_code == 401:\n            print(\"‚úÖ SUCCESS - Correctly rejected request without key\")\n        else:\n            print(\"‚ùå FAILED - Should have rejected request without key\")\n    except Exception as e:\n        print(f\"‚ùå ERROR: {e}\")\n    \n    print(f\"\\n{'='*60}\")\n    print(\"Test suite completed!\")\n    print(f\"Completed at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n\nif __name__ == \"__main__\":\n    main()\n","size_bytes":4659},"Arduino/Arduino_Upload_Guide.md":{"content":"# Arduino IDE Upload Guide for EV-Secure ESP32-S3\n\n## üìÅ Project Structure\nYour Arduino project should have this structure:\n\n```\nArdiuno/\n‚îú‚îÄ‚îÄ EV_Secure_ESP32S3_Complete.ino    ‚Üê Main sketch (opens this file)\n‚îú‚îÄ‚îÄ EV_Secure_Config.h                 ‚Üê Configuration\n‚îú‚îÄ‚îÄ MLModel.h                          ‚Üê ML model library\n‚îú‚îÄ‚îÄ SensorManager.h                    ‚Üê Sensor management\n‚îú‚îÄ‚îÄ DisplayManager.h                   ‚Üê TFT display control\n‚îú‚îÄ‚îÄ SDLogger.h                         ‚Üê SD card logging\n‚îú‚îÄ‚îÄ APIManager.h                       ‚Üê API communication\n‚îú‚îÄ‚îÄ RelayController.h                  ‚Üê Relay control\n‚îî‚îÄ‚îÄ Arduino_Upload_Guide.md            ‚Üê This guide\n```\n\n## üöÄ Step-by-Step Upload Process\n\n### Step 1: Install ESP32 Arduino Core\n1. Open Arduino IDE\n2. Go to `File ‚Üí Preferences`\n3. Add this URL to \"Additional Boards Manager URLs\":\n   ```\n   https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\n   ```\n4. Go to `Tools ‚Üí Board ‚Üí Boards Manager`\n5. Search for \"ESP32\" and install \"ESP32 by Espressif Systems\"\n\n### Step 2: Install Required Libraries\nGo to `Tools ‚Üí Manage Libraries` and install:\n- WiFi\n- HTTPClient\n- SD\n- SPI\n- ArduinoJson\n- Adafruit_GFX\n- Adafruit_ST7735\n- OneWire\n- DallasTemperature\n\n### Step 3: Open Main Sketch\n1. Go to `File ‚Üí Open`\n2. Navigate to your `Ardiuno` folder\n3. Select `EV_Secure_ESP32S3_Complete.ino`\n4. Arduino IDE will automatically load all `.h` files\n\n### Step 4: Configure Board Settings\n1. `Tools ‚Üí Board ‚Üí ESP32 Arduino ‚Üí ESP32S3 Dev Module`\n2. `Tools ‚Üí Port ‚Üí [Select your COM port]`\n3. `Tools ‚Üí Upload Speed ‚Üí 921600` (or 115200 if having issues)\n4. `Tools ‚Üí CPU Frequency ‚Üí 240MHz (WiFi/BT)`\n5. `Tools ‚Üí Flash Size ‚Üí 4MB (32Mb)`\n6. `Tools ‚Üí Partition Scheme ‚Üí Default 4MB with spiffs`\n\n### Step 5: Configure Your Settings\nBefore uploading, edit `EV_Secure_Config.h`:\n\n```cpp\n// WiFi Configuration\n#define WIFI_SSID \"YOUR_WIFI_SSID\"\n#define WIFI_PASSWORD \"YOUR_WIFI_PASSWORD\"\n\n// API Configuration  \n#define DASHBOARD_URL \"https://your-dashboard.com/api/endpoint\"\n#define API_KEY \"YOUR_API_KEY_HERE\"\n```\n\n### Step 6: Upload Firmware\n1. Click **Upload** button (‚Üí) or press `Ctrl+U`\n2. Wait for compilation to complete\n3. Watch for \"Connecting...\" message\n4. Press and hold **BOOT** button on ESP32-S3 when prompted\n5. Release **BOOT** button when upload starts\n6. Wait for \"Done uploading\" message\n\n## üîß Troubleshooting Upload Issues\n\n### Common Problems:\n\n1. **\"Failed to connect to ESP32-S3\"**\n   - Press and hold BOOT button during upload\n   - Check USB cable (use data cable, not charging cable)\n   - Try different USB port\n   - Install ESP32-S3 drivers\n\n2. **\"Compilation error\"**\n   - Check all libraries are installed\n   - Verify ESP32 Arduino Core is installed\n   - Check for syntax errors in code\n\n3. **\"WiFi connection failed\"**\n   - Verify WiFi credentials in config\n   - Check WiFi signal strength\n   - Ensure 2.4GHz network (ESP32-S3 doesn't support 5GHz)\n\n4. **\"SD card initialization failed\"**\n   - Check SD card wiring\n   - Format SD card as FAT32\n   - Try different SD card\n\n## üìä What Happens During Upload\n\n1. **Compilation Phase**:\n   - Arduino IDE compiles all `.ino` and `.h` files\n   - Creates binary firmware file\n   - Checks for syntax errors\n\n2. **Upload Phase**:\n   - Connects to ESP32-S3 via USB\n   - Erases flash memory\n   - Writes new firmware\n   - Verifies upload\n\n3. **Boot Phase**:\n   - ESP32-S3 boots with new firmware\n   - Initializes all peripherals\n   - Connects to WiFi\n   - Starts monitoring\n\n## üîç Monitoring Upload Progress\n\nWatch the Arduino IDE console for:\n```\nSketch uses 1234567 bytes (45%) of program storage space.\nGlobal variables use 45678 bytes (13%) of dynamic memory.\nConnecting........_____\nChip is ESP32-S3\nFeatures: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None\nCrystal is 40MHz\nMAC: AA:BB:CC:DD:EE:FF\nUploading stub...\nRunning stub...\nStub running...\nConfiguring flash size...\nFlash will be erased from 0x00001000 to 0x00005fff...\nFlash will be erased from 0x00008000 to 0x00008fff...\nFlash will be erased from 0x0000e000 to 0x0000ffff...\nFlash will be erased from 0x00010000 to 0x0016ffff...\nCompressed 1234567 bytes to 456789...\nWriting at 0x00001000... (100%)\nWrote 1234567 bytes (456789 compressed) at 0x00001000 in 12.3 seconds (effective 100.5 kbit/s)...\nHash of data verified.\n\nLeaving...\nHard resetting via RTS pin...\nDone uploading.\n```\n\n## üì± Post-Upload Verification\n\n1. **Open Serial Monitor** (`Tools ‚Üí Serial Monitor`)\n2. Set baud rate to `115200`\n3. Press **RESET** button on ESP32-S3\n4. You should see:\n```\nEV-Secure ESP32-S3 System Starting...\nVersion: 1.0.0\nDevice ID: EV_SECURE_001\nInitializing Sensor Manager...\n‚úì Sensors initialized\nInitializing TFT Display...\n‚úì TFT Display initialized\nInitializing SD Card Logger...\n‚úì SD Card initialized\nConnecting to WiFi: YOUR_WIFI_SSID\nWiFi Connected Successfully!\nIP Address: 192.168.1.100\nEV-Secure System Initialized Successfully!\nMonitoring charging station for threats...\n```\n\n## üõ†Ô∏è Development Tips\n\n1. **Use Serial Monitor** for debugging\n2. **Check Serial output** for error messages\n3. **Test individual components** before full integration\n4. **Keep backup** of working firmware\n5. **Use version control** (Git) for code management\n\n## üìã Pre-Upload Checklist\n\n- [ ] ESP32 Arduino Core installed\n- [ ] All required libraries installed\n- [ ] WiFi credentials configured\n- [ ] API endpoint configured\n- [ ] Hardware properly wired\n- [ ] SD card inserted and formatted\n- [ ] USB cable connected\n- [ ] Correct COM port selected\n- [ ] Correct board selected (ESP32S3 Dev Module)\n\n## üö® Important Notes\n\n- **Always backup** your working code before making changes\n- **Test thoroughly** before deployment\n- **Follow safety procedures** when working with high voltage\n- **Keep firmware updated** for security patches\n- **Monitor system logs** for any issues\n\n---\n\n**Your EV-Secure ESP32-S3 system is now ready to protect charging infrastructure!**\n","size_bytes":6131},"Arduino/Hardware_Wiring_Guide.md":{"content":"# EV-Secure ESP32-S3 Hardware Wiring Guide\n\n## üîå Your Hardware Components\n\n### 1. Voltage Sensor (S, +, - terminals)\n- **S** = Signal output (analog)\n- **+** = Positive power supply (3.3V or 5V)\n- **-** = Ground\n\n### 2. Current Sensor (VCC, OUT, GND terminals)\n- **VCC** = Power supply (3.3V or 5V)\n- **OUT** = Signal output (analog)\n- **GND** = Ground\n\n### 3. RTC Module (SDA, SCL terminals)\n- **SDA** = I¬≤C Data line\n- **SCL** = I¬≤C Clock line\n\n### 4. TFT 1.8\" Display with SD Card\n**SD Card pins**: NC, CS, MOSI, MISO, CLK\n**TFT pins**: CS, SCK, SD, SDA, RST, NC, BL, NC, VCC, GND\n\n## üìã Complete Wiring Diagram\n\n```\nESP32-S3 DevKit Pinout:\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  ESP32-S3 DevKit                    ‚îÇ\n‚îÇ                                     ‚îÇ\n‚îÇ  GPIO1  ‚Üê‚Üí Current Sensor OUT      ‚îÇ\n‚îÇ  GPIO2  ‚Üê‚Üí Voltage Sensor S        ‚îÇ\n‚îÇ  GPIO3  ‚Üê‚Üí Temperature Sensor       ‚îÇ\n‚îÇ  GPIO10 ‚Üê‚Üí SD Card CS              ‚îÇ\n‚îÇ  GPIO11 ‚Üê‚Üí SD Card MOSI            ‚îÇ\n‚îÇ  GPIO12 ‚Üê‚Üí SD Card CLK             ‚îÇ\n‚îÇ  GPIO13 ‚Üê‚Üí SD Card MISO            ‚îÇ\n‚îÇ  GPIO14 ‚Üê‚Üí TFT SDA (DC)            ‚îÇ\n‚îÇ  GPIO15 ‚Üê‚Üí TFT RST                 ‚îÇ\n‚îÇ  GPIO16 ‚Üê‚Üí Emergency Stop Button   ‚îÇ\n‚îÇ  GPIO18 ‚Üê‚Üí Relay Control           ‚îÇ\n‚îÇ  GPIO21 ‚Üê‚Üí RTC SDA (I¬≤C)          ‚îÇ\n‚îÇ  GPIO22 ‚Üê‚Üí RTC SCL (I¬≤C)          ‚îÇ\n‚îÇ  GPIO35 ‚Üê‚Üí TFT MOSI               ‚îÇ\n‚îÇ  GPIO36 ‚Üê‚Üí TFT SCK                ‚îÇ\n‚îÇ  GPIO37 ‚Üê‚Üí TFT MISO               ‚îÇ\n‚îÇ  GPIO34 ‚Üê‚Üí TFT CS                 ‚îÇ\n‚îÇ  3.3V   ‚Üê‚Üí Power for sensors       ‚îÇ\n‚îÇ  GND    ‚Üê‚Üí Common ground          ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n## üîó Detailed Connections\n\n### Power Supply\n```\nESP32-S3 3.3V ‚Üí Voltage Sensor +\nESP32-S3 3.3V ‚Üí Current Sensor VCC\nESP32-S3 3.3V ‚Üí RTC Module VCC\nESP32-S3 3.3V ‚Üí TFT VCC\nESP32-S3 GND  ‚Üí Voltage Sensor -\nESP32-S3 GND  ‚Üí Current Sensor GND\nESP32-S3 GND  ‚Üí RTC Module GND\nESP32-S3 GND  ‚Üí TFT GND\nESP32-S3 GND  ‚Üí Emergency Stop Button (one terminal)\n```\n\n### Sensor Connections\n```\nVoltage Sensor:\nS (Signal) ‚Üí GPIO2 (ADC1_CH1)\n\nCurrent Sensor:\nOUT (Signal) ‚Üí GPIO1 (ADC1_CH0)\n\nTemperature Sensor (DS18B20):\nData ‚Üí GPIO3\nVCC ‚Üí 3.3V\nGND ‚Üí GND\n```\n\n### I¬≤C Connections (RTC Module)\n```\nRTC Module SDA ‚Üí GPIO21\nRTC Module SCL ‚Üí GPIO22\n```\n\n### SD Card Connections (SPI)\n```\nSD Card CS   ‚Üí GPIO10\nSD Card MOSI ‚Üí GPIO11\nSD Card CLK  ‚Üí GPIO12\nSD Card MISO ‚Üí GPIO13\n```\n\n### TFT Display Connections (SPI)\n```\nTFT CS   ‚Üí GPIO34\nTFT SCK  ‚Üí GPIO36\nTFT MOSI ‚Üí GPIO35\nTFT MISO ‚Üí GPIO37\nTFT SDA  ‚Üí GPIO14 (DC pin)\nTFT RST  ‚Üí GPIO15\nTFT BL   ‚Üí 3.3V (Backlight)\n```\n\n### Control Connections\n```\nRelay Control ‚Üí GPIO18\nStatus LED    ‚Üí GPIO2\nBuzzer        ‚Üí GPIO4\nEmergency Stop Button ‚Üí GPIO16 (other terminal to GND)\n```\n\n## ‚ö° Power Requirements\n\n### ESP32-S3 Power\n- **Input**: 5V via USB or external supply\n- **Internal**: 3.3V regulated output\n- **Current**: ~500mA during operation\n\n### Sensor Power Requirements\n- **Voltage Sensor**: 3.3V, ~10mA\n- **Current Sensor**: 3.3V, ~10mA\n- **RTC Module**: 3.3V, ~1mA\n- **TFT Display**: 3.3V, ~50mA\n- **SD Card**: 3.3V, ~20mA\n\n### Total Power Consumption\n- **Idle**: ~100mA\n- **Active**: ~200mA\n- **Peak**: ~300mA\n\n## üõ†Ô∏è Assembly Steps\n\n### Step 1: Power Connections\n1. Connect all GND terminals together\n2. Connect all VCC/3.3V terminals to ESP32-S3 3.3V\n3. Verify power supply can handle total current\n\n### Step 2: Sensor Connections\n1. Connect voltage sensor signal to GPIO2\n2. Connect current sensor signal to GPIO1\n3. Connect temperature sensor to GPIO3\n\n### Step 3: I¬≤C Connections\n1. Connect RTC SDA to GPIO21\n2. Connect RTC SCL to GPIO22\n3. Add 4.7kŒ© pull-up resistors (optional, ESP32-S3 has internal pull-ups)\n\n### Step 4: SPI Connections\n1. Connect SD card SPI pins (CS, MOSI, MISO, CLK)\n2. Connect TFT SPI pins (CS, MOSI, MISO, CLK)\n3. Connect TFT control pins (DC, RST)\n\n### Step 5: Control Connections\n1. Connect relay control to GPIO18\n2. Connect status LED to GPIO2\n3. Connect buzzer to GPIO4\n4. Connect emergency stop button to GPIO16\n\n## üîç Testing Connections\n\n### Before Power On:\n1. **Double-check all connections**\n2. **Verify no short circuits**\n3. **Check power supply voltage**\n4. **Ensure proper grounding**\n\n### After Power On:\n1. **Check 3.3V supply voltage**\n2. **Verify sensor readings in Serial Monitor**\n3. **Test display initialization**\n4. **Check SD card detection**\n5. **Verify I¬≤C communication**\n\n## ‚ö†Ô∏è Safety Considerations\n\n### Electrical Safety:\n- **Use proper insulation**\n- **Avoid loose connections**\n- **Use appropriate wire gauge**\n- **Follow local electrical codes**\n\n### Component Protection:\n- **Add protection diodes for inductive loads**\n- **Use proper voltage dividers**\n- **Implement current limiting**\n- **Add fuses for protection**\n\n## üîß Troubleshooting\n\n### Common Issues:\n\n1. **Sensor readings incorrect**\n   - Check power supply voltage\n   - Verify signal connections\n   - Check for loose connections\n\n2. **Display not working**\n   - Verify SPI connections\n   - Check power supply\n   - Ensure proper initialization\n\n3. **SD card not detected**\n   - Check SPI connections\n   - Verify card formatting (FAT32)\n   - Check power supply\n\n4. **I¬≤C communication failed**\n   - Check SDA/SCL connections\n   - Verify pull-up resistors\n   - Check device addresses\n\n## üìä Pin Usage Summary\n\n| GPIO | Function | Component | Notes |\n|------|----------|-----------|-------|\n| GPIO1 | ADC Input | Current Sensor | Analog reading |\n| GPIO2 | ADC Input | Voltage Sensor | Analog reading |\n| GPIO3 | Digital I/O | Temperature Sensor | OneWire |\n| GPIO10 | SPI CS | SD Card | Chip Select |\n| GPIO11 | SPI MOSI | SD Card | Master Out |\n| GPIO12 | SPI CLK | SD Card | Clock |\n| GPIO13 | SPI MISO | SD Card | Master In |\n| GPIO14 | Digital I/O | TFT DC | Data/Command |\n| GPIO15 | Digital I/O | TFT RST | Reset |\n| GPIO16 | Digital Input | Emergency Stop | Pull-up |\n| GPIO18 | Digital Output | Relay Control | Power control |\n| GPIO21 | I¬≤C SDA | RTC Module | Data line |\n| GPIO22 | I¬≤C SCL | RTC Module | Clock line |\n| GPIO34 | SPI CS | TFT Display | Chip Select |\n| GPIO35 | SPI MOSI | TFT Display | Master Out |\n| GPIO36 | SPI CLK | TFT Display | Clock |\n| GPIO37 | SPI MISO | TFT Display | Master In |\n\n## üéØ Next Steps\n\n1. **Wire all components** according to this guide\n2. **Test individual components** before full integration\n3. **Upload firmware** using Arduino IDE\n4. **Monitor Serial output** for initialization status\n5. **Calibrate sensors** for accurate readings\n6. **Test all functions** before deployment\n\n---\n\n**Your EV-Secure ESP32-S3 system is now ready for assembly!**\n","size_bytes":6915},"Arduino/Quick_Wiring_Reference.md":{"content":"# üîå Quick Wiring Reference - Your Hardware\n\n## üìã Your Components & Connections\n\n### üîã Power Connections (All to ESP32-S3)\n```\n3.3V ‚Üí Voltage Sensor +\n3.3V ‚Üí Current Sensor VCC  \n3.3V ‚Üí RTC Module VCC\n3.3V ‚Üí TFT VCC\nGND  ‚Üí Voltage Sensor -\nGND  ‚Üí Current Sensor GND\nGND  ‚Üí RTC Module GND\nGND  ‚Üí TFT GND\nGND  ‚Üí Emergency Stop Button (one terminal)\n```\n\n### üìä Sensor Connections\n```\nVoltage Sensor S    ‚Üí GPIO2  (ADC1_CH1)\nCurrent Sensor OUT  ‚Üí GPIO1  (ADC1_CH0)\nTemperature Sensor  ‚Üí GPIO3  (OneWire)\n```\n\n### üïê RTC Module (I¬≤C)\n```\nRTC SDA ‚Üí GPIO21\nRTC SCL ‚Üí GPIO22\n```\n\n### üíæ SD Card (SPI)\n```\nSD CS   ‚Üí GPIO10\nSD MOSI ‚Üí GPIO11\nSD CLK  ‚Üí GPIO12\nSD MISO ‚Üí GPIO13\n```\n\n### üñ•Ô∏è TFT Display (SPI)\n```\nTFT CS   ‚Üí GPIO34\nTFT SCK  ‚Üí GPIO36\nTFT MOSI ‚Üí GPIO35\nTFT MISO ‚Üí GPIO37\nTFT SDA  ‚Üí GPIO14 (DC pin)\nTFT RST  ‚Üí GPIO15\nTFT BL   ‚Üí GPIO5 (Backlight)\n```\n\n### üéõÔ∏è Control Connections\n```\nRelay Control      ‚Üí GPIO18\nStatus LED         ‚Üí GPIO2\nBuzzer             ‚Üí GPIO4\nEmergency Stop     ‚Üí GPIO16 (other terminal to GND)\n```\n\n## ‚ö° Quick Test Checklist\n\nBefore uploading firmware:\n- [ ] All GND connections made\n- [ ] All 3.3V connections made\n- [ ] Sensor signals connected to correct GPIO pins\n- [ ] SPI connections correct (SD card and TFT)\n- [ ] I¬≤C connections correct (RTC)\n- [ ] Control pins connected\n- [ ] No short circuits\n- [ ] Power supply adequate (5V, 1A minimum)\n\n## üöÄ Upload Process\n\n1. **Open Arduino IDE**\n2. **File ‚Üí Open** ‚Üí Select `EV_Secure_ESP32S3_Complete.ino`\n3. **Edit WiFi settings** in `EV_Secure_Config.h`:\n   ```cpp\n   #define WIFI_SSID \"YOUR_WIFI_SSID\"\n   #define WIFI_PASSWORD \"YOUR_WIFI_PASSWORD\"\n   #define DASHBOARD_URL \"https://your-dashboard.com/api/endpoint\"\n   #define API_KEY \"YOUR_API_KEY_HERE\"\n   ```\n4. **Tools ‚Üí Board ‚Üí ESP32S3 Dev Module**\n5. **Tools ‚Üí Port ‚Üí [Your COM Port]**\n6. **Click Upload** (‚Üí button)\n\n## üì± Expected Serial Output\n\nAfter successful upload, you should see:\n```\nEV-Secure ESP32-S3 System Starting...\nVersion: 1.0.0\nDevice ID: EV_SECURE_001\nInitializing Sensor Manager...\n‚úì Sensors initialized\nInitializing TFT Display...\n‚úì TFT Display initialized\nInitializing SD Card Logger...\n‚úì SD Card initialized\nConnecting to WiFi: YOUR_WIFI_SSID\nWiFi Connected Successfully!\nIP Address: 192.168.1.100\nEV-Secure System Initialized Successfully!\nMonitoring charging station for threats...\n```\n\n## üîß Troubleshooting\n\n### If sensors show wrong readings:\n- Check power supply (should be 3.3V)\n- Verify signal connections\n- Check for loose wires\n\n### If display doesn't work:\n- Verify SPI connections\n- Check TFT power supply\n- Ensure proper initialization\n\n### If SD card not detected:\n- Check SPI connections\n- Format SD card as FAT32\n- Try different SD card\n\n### If WiFi fails:\n- Check SSID and password\n- Verify signal strength\n- Use 2.4GHz network (not 5GHz)\n\n---\n\n**Your EV-Secure system is ready to protect charging infrastructure!** üõ°Ô∏è\n","size_bytes":3008},"app/clientLayout.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useEffect, useState } from \"react\"\nimport { useRouter, usePathname } from \"next/navigation\"\n\nexport default function ClientLayout({ children }: { children: React.ReactNode }) {\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\n  const [isLoading, setIsLoading] = useState(true)\n  const router = useRouter()\n  const pathname = usePathname()\n\n  // Public routes that don't require authentication\n  const publicRoutes = [\"/login\", \"/register\", \"/terms\", \"/privacy\"]\n\n  useEffect(() => {\n    const checkAuth = () => {\n      // Skip auth check for public routes\n      if (publicRoutes.includes(pathname)) {\n        setIsAuthenticated(true)\n        setIsLoading(false)\n        return\n      }\n\n      // Check if user is logged in\n      const userSession = localStorage.getItem(\"userSession\")\n\n      if (!userSession) {\n        // No session found, redirect to login\n        router.push(\"/login\")\n        setIsLoading(false)\n        return\n      }\n\n      try {\n        const session = JSON.parse(userSession)\n\n        // Check if session is valid (not expired)\n        const loginTime = new Date(session.loginTime)\n        const now = new Date()\n        const hoursSinceLogin = (now.getTime() - loginTime.getTime()) / (1000 * 60 * 60)\n\n        if (hoursSinceLogin > 24) {\n          // Session expired (24 hours), clear and redirect to login\n          localStorage.removeItem(\"userSession\")\n          router.push(\"/login\")\n          setIsLoading(false)\n          return\n        }\n\n        // Valid session found\n        setIsAuthenticated(true)\n\n        // Route based on user role\n        if (session.role === \"end_user\" && pathname === \"/\") {\n          // End users should go to user dashboard, not main dashboard\n          router.push(\"/user-dashboard\")\n        } else if ((session.role === \"admin\" || session.role === \"super_admin\") && pathname === \"/user-dashboard\") {\n          // Admins should go to main dashboard, not user dashboard\n          router.push(\"/\")\n        }\n      } catch (error) {\n        // Invalid session data, clear and redirect to login\n        localStorage.removeItem(\"userSession\")\n        router.push(\"/login\")\n      }\n\n      setIsLoading(false)\n    }\n\n    checkAuth()\n  }, [pathname, router])\n\n  // Show loading screen while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-green-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-gradient-to-r from-green-400 to-purple-400 rounded-xl flex items-center justify-center mx-auto mb-4\">\n            <div className=\"w-8 h-8 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n          </div>\n          <h2 className=\"text-xl font-bold bg-gradient-to-r from-green-600 to-purple-600 bg-clip-text text-transparent\">\n            EV-Secure\n          </h2>\n          <p className=\"text-gray-600 mt-2\">Loading...</p>\n        </div>\n      </div>\n    )\n  }\n\n  // Don't render children if not authenticated (except for public routes)\n  if (!isAuthenticated && !publicRoutes.includes(pathname)) {\n    return null\n  }\n\n  return <>{children}</>\n}\n","size_bytes":3251},"app/globals.css":{"content":"@import \"tailwindcss\";\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.145 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.145 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.985 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.637 0.237 25.331);\n  --border: oklch(0.269 0 0);\n  --input: oklch(0.269 0 0);\n  --ring: oklch(0.439 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n\n/* Custom scrollbar styles */\n::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n::-webkit-scrollbar-thumb {\n  background: rgba(156, 163, 175, 0.5);\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: rgba(156, 163, 175, 0.7);\n}\n\n/* Smooth transitions for all interactive elements */\n* {\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow,\n    transform, filter, backdrop-filter;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n\n/* Glass morphism effect for cards */\n.glass {\n  background: rgba(255, 255, 255, 0.8);\n  backdrop-filter: blur(12px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n/* Gradient text utilities */\n.gradient-text {\n  background: linear-gradient(135deg, #10b981, #8b5cf6);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n/* Animation utilities */\n@keyframes pulse-slow {\n  0%,\n  100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n.animate-pulse-slow {\n  animation: pulse-slow 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Focus styles for better accessibility */\n.focus-visible\\:ring-2:focus-visible {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  box-shadow: 0 0 0 2px rgba(139, 92, 246, 0.5);\n}\n\n/* Custom gradient backgrounds */\n.bg-gradient-primary {\n  background: linear-gradient(135deg, #10b981 0%, #8b5cf6 100%);\n}\n\n.bg-gradient-secondary {\n  background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);\n}\n\n/* Loading spinner */\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.animate-spin {\n  animation: spin 1s linear infinite;\n}\n\n/* Hover effects */\n.hover-lift {\n  transition: transform 0.2s ease-in-out;\n}\n\n.hover-lift:hover {\n  transform: translateY(-2px);\n}\n\n/* Status indicator styles */\n.status-online {\n  @apply bg-green-500;\n  box-shadow: 0 0 0 2px rgba(34, 197, 94, 0.2);\n}\n\n.status-offline {\n  @apply bg-gray-500;\n  box-shadow: 0 0 0 2px rgba(107, 114, 128, 0.2);\n}\n\n.status-warning {\n  @apply bg-yellow-500;\n  box-shadow: 0 0 0 2px rgba(234, 179, 8, 0.2);\n}\n\n.status-error {\n  @apply bg-red-500;\n  box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.2);\n}\n","size_bytes":6543},"app/layout.tsx":{"content":"import type React from \"react\"\nimport { Inter } from \"next/font/google\"\nimport \"./globals.css\"\nimport ClientLayout from \"./clientLayout\"\n\nconst inter = Inter({ subsets: [\"latin\"] })\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <ClientLayout>{children}</ClientLayout>\n      </body>\n    </html>\n  )\n}\n\nexport const metadata = {\n      generator: 'v0.dev'\n    };\n","size_bytes":483},"app/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Progress } from \"@/components/ui/progress\"\nimport {\n  Zap,\n  Shield,\n  AlertTriangle,\n  CheckCircle,\n  Car,\n  MapPin,\n  FileText,\n  Users,\n  RefreshCw,\n  Settings,\n  TrendingUp,\n  Activity,\n  Battery,\n  Wifi,\n} from \"lucide-react\"\nimport { SharedNavigation } from \"@/components/shared-navigation\"\nimport { useRouter } from \"next/navigation\"\n\nconst dashboardStats = {\n  totalStations: 6,\n  activeStations: 0, // Set to 0 when no ESP32 connected\n  connectedCars: 0,\n  mlThreats: 0,\n  totalRevenue: 0,\n  totalSessions: 0,\n  avgUptime: 0,\n  systemHealth: 0,\n}\n\nconst recentActivity = [\n  {\n    id: 1,\n    type: \"system_status\",\n    message: \"System waiting for ESP32-S3 connection\",\n    timestamp: \"Now\",\n    icon: AlertTriangle,\n    color: \"text-orange-600\",\n  },\n  {\n    id: 2,\n    type: \"api_status\",\n    message: \"API keys ready for configuration\",\n    timestamp: \"System startup\",\n    icon: Shield,\n    color: \"text-blue-600\",\n  },\n]\n\nconst quickActions = [\n  {\n    title: \"View Station Map\",\n    description: \"See all stations on interactive map\",\n    icon: MapPin,\n    href: \"/map\",\n    gradient: \"from-blue-500 to-purple-500\",\n  },\n  {\n    title: \"Generate Report\",\n    description: \"Download PDF/CSV reports\",\n    icon: FileText,\n    href: \"/reports\",\n    gradient: \"from-green-500 to-blue-500\",\n  },\n  {\n    title: \"Manage API Keys\",\n    description: \"Configure ESP32-S3 authentication\",\n    icon: Users,\n    href: \"/settings\",\n    gradient: \"from-purple-500 to-pink-500\",\n  },\n]\n\nexport default function DashboardPage() {\n  const [liveUpdates, setLiveUpdates] = useState(true)\n  const [lastRefresh, setLastRefresh] = useState(new Date())\n  const [isConnected, setIsConnected] = useState(false) // ESP32 connection status\n  const router = useRouter()\n\n  useEffect(() => {\n    // Check ESP32 connection status\n    const checkConnection = () => {\n      // In real app, this would check actual ESP32 connection\n      setIsConnected(false) // Set to false to show \"No Data Available\" state\n    }\n\n    checkConnection()\n    const interval = setInterval(() => {\n      if (liveUpdates && isConnected) {\n        setLastRefresh(new Date())\n      }\n    }, 3000)\n\n    return () => clearInterval(interval)\n  }, [liveUpdates, isConnected])\n\n  const handleRefresh = () => {\n    setLastRefresh(new Date())\n    // Force page reload to get fresh data\n    window.location.reload()\n  }\n\n  const handleSettings = () => {\n    router.push(\"/settings\")\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-green-50\">\n      <SharedNavigation currentPage=\"dashboard\" />\n\n      <div className=\"lg:ml-64 p-4 sm:p-6 space-y-4 sm:space-y-6 max-w-full overflow-hidden\">\n        {/* Header with Live Updates */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div className=\"min-w-0\">\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800 flex items-center gap-2\">\n              <Zap className=\"w-6 h-6 sm:w-8 sm:h-8 text-purple-600 flex-shrink-0\" />\n              <span className=\"truncate\">EV-Secure Dashboard</span>\n            </h1>\n            <p className=\"text-gray-600 mt-1 text-sm sm:text-base\">Real-time monitoring and control center</p>\n          </div>\n          <div className=\"flex items-center gap-2 sm:gap-3\">\n            <div className=\"flex items-center gap-2 px-3 py-2 bg-orange-100 rounded-full\">\n              <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\n              <span className=\"text-sm font-medium text-orange-700\">\n                {isConnected ? \"Live Updates\" : \"Waiting for ESP32\"}\n              </span>\n            </div>\n            <Button variant=\"outline\" onClick={handleRefresh} className=\"bg-white/80\">\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              Refresh\n            </Button>\n            <Button onClick={handleSettings} className=\"bg-gradient-to-r from-green-500 to-purple-500 text-white\">\n              <Settings className=\"w-4 h-4 mr-2\" />\n              Settings\n            </Button>\n          </div>\n        </div>\n\n        {/* ESP32 Connection Alert */}\n        {!isConnected && (\n          <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4\">\n            <div className=\"flex items-start space-x-3\">\n              <AlertTriangle className=\"w-5 h-5 text-orange-600 flex-shrink-0 mt-0.5\" />\n              <div>\n                <h4 className=\"font-semibold text-orange-800 mb-1\">ESP32-S3 Not Connected</h4>\n                <p className=\"text-sm text-orange-700\">\n                  No charging stations are currently connected. Configure your ESP32-S3 devices with valid API keys to\n                  see real-time data.\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6\">\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg hover:shadow-xl transition-all duration-300\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Stations</p>\n                  <p className=\"text-2xl font-bold text-gray-800\">\n                    {isConnected ? dashboardStats.totalStations : \"No Data\"}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Zap className=\"w-6 h-6 text-blue-600\" />\n                </div>\n              </div>\n              <div className=\"mt-2\">\n                <Progress value={isConnected ? 85 : 0} className=\"h-2\" />\n                <p className=\"text-xs text-gray-500 mt-1\">{isConnected ? \"85% operational\" : \"ESP32 required\"}</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg hover:shadow-xl transition-all duration-300\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Active Stations</p>\n                  <p className=\"text-2xl font-bold text-green-600\">\n                    {isConnected ? dashboardStats.activeStations : \"No Data\"}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                </div>\n              </div>\n              <div className=\"mt-2\">\n                <Progress value={isConnected ? 67 : 0} className=\"h-2\" />\n                <p className=\"text-xs text-gray-500 mt-1\">{isConnected ? \"+12% from yesterday\" : \"ESP32 required\"}</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg hover:shadow-xl transition-all duration-300\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Connected Cars</p>\n                  <p className=\"text-2xl font-bold text-blue-600\">\n                    {isConnected ? dashboardStats.connectedCars : \"No Data\"}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Car className=\"w-6 h-6 text-blue-600\" />\n                </div>\n              </div>\n              <div className=\"mt-2\">\n                <Progress value={isConnected ? 75 : 0} className=\"h-2\" />\n                <p className=\"text-xs text-gray-500 mt-1\">{isConnected ? \"Peak usage: 6 cars\" : \"ESP32 required\"}</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg hover:shadow-xl transition-all duration-300\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">ML Threats</p>\n                  <p className=\"text-2xl font-bold text-red-600\">\n                    {isConnected ? dashboardStats.mlThreats : \"No Data\"}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                  <Shield className=\"w-6 h-6 text-red-600\" />\n                </div>\n              </div>\n              <div className=\"mt-2\">\n                <Progress value={isConnected ? 20 : 0} className=\"h-2\" />\n                <p className=\"text-xs text-gray-500 mt-1\">{isConnected ? \"-50% from last week\" : \"ESP32 required\"}</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n          <CardHeader>\n            <CardTitle className=\"text-gray-800\">Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n              {quickActions.map((action, index) => (\n                <a\n                  key={index}\n                  href={action.href}\n                  className=\"group block p-4 rounded-xl border border-gray-200 hover:border-purple-300 transition-all duration-200 hover:shadow-lg hover:scale-105\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div\n                      className={`w-12 h-12 rounded-lg bg-gradient-to-r ${action.gradient} flex items-center justify-center`}\n                    >\n                      <action.icon className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-gray-800 group-hover:text-purple-600 transition-colors\">\n                        {action.title}\n                      </h3>\n                      <p className=\"text-sm text-gray-600\">{action.description}</p>\n                    </div>\n                  </div>\n                </a>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Performance Overview & Recent Activity */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-800 flex items-center gap-2\">\n                <TrendingUp className=\"w-5 h-5 text-green-600\" />\n                Performance Overview\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {isConnected ? (\n                <div className=\"space-y-3\">\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span className=\"text-gray-600\">System Health</span>\n                      <span className=\"font-medium\">{dashboardStats.systemHealth}%</span>\n                    </div>\n                    <Progress value={dashboardStats.systemHealth} className=\"h-2\" />\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span className=\"text-gray-600\">Network Uptime</span>\n                      <span className=\"font-medium\">{dashboardStats.avgUptime}%</span>\n                    </div>\n                    <Progress value={dashboardStats.avgUptime} className=\"h-2\" />\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span className=\"text-gray-600\">API Response</span>\n                      <span className=\"font-medium\">98.5%</span>\n                    </div>\n                    <Progress value={98.5} className=\"h-2\" />\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <AlertTriangle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">No Performance Data</h3>\n                  <p className=\"text-gray-600 mb-4\">Connect ESP32-S3 stations to view performance metrics.</p>\n                </div>\n              )}\n              <div className=\"pt-4 border-t border-gray-100\">\n                <div className=\"grid grid-cols-2 gap-4 text-center\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-green-600\">\n                      {isConnected ? `$${dashboardStats.totalRevenue.toLocaleString()}` : \"No Data\"}\n                    </p>\n                    <p className=\"text-sm text-gray-600\">Revenue</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-blue-600\">\n                      {isConnected ? dashboardStats.totalSessions : \"No Data\"}\n                    </p>\n                    <p className=\"text-sm text-gray-600\">Sessions</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-800 flex items-center gap-2\">\n                <Activity className=\"w-5 h-5 text-purple-600\" />\n                Recent Activity\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {recentActivity.map((activity) => (\n                  <div key={activity.id} className=\"flex items-start space-x-3\">\n                    <div className=\"flex-shrink-0\">\n                      <activity.icon className={`w-5 h-5 ${activity.color}`} />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium text-gray-800\">{activity.message}</p>\n                      <p className=\"text-xs text-gray-500\">{activity.timestamp}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                <Button variant=\"outline\" className=\"w-full bg-white/50\">\n                  Configure ESP32-S3 Connection\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* System Status */}\n        <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n          <CardHeader>\n            <CardTitle className=\"text-gray-800\">System Status</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"flex items-center space-x-3 p-3 bg-green-50 rounded-lg\">\n                <Wifi className=\"w-5 h-5 text-green-600\" />\n                <div>\n                  <p className=\"text-sm font-medium text-green-800\">Network</p>\n                  <p className=\"text-xs text-green-600\">Online</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 p-3 bg-blue-50 rounded-lg\">\n                <Shield className=\"w-5 h-5 text-blue-600\" />\n                <div>\n                  <p className=\"text-sm font-medium text-blue-800\">Security</p>\n                  <p className=\"text-xs text-blue-600\">Protected</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 p-3 bg-orange-50 rounded-lg\">\n                <Activity className=\"w-5 h-5 text-orange-600\" />\n                <div>\n                  <p className=\"text-sm font-medium text-orange-800\">ESP32-S3</p>\n                  <p className=\"text-xs text-orange-600\">{isConnected ? \"Connected\" : \"Disconnected\"}</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 p-3 bg-purple-50 rounded-lg\">\n                <Battery className=\"w-5 h-5 text-purple-600\" />\n                <div>\n                  <p className=\"text-sm font-medium text-purple-800\">API Status</p>\n                  <p className=\"text-xs text-purple-600\">Ready</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Last Updated */}\n        <div className=\"text-center text-sm text-gray-500\">\n          Last updated: {lastRefresh.toLocaleTimeString()}\n          {!isConnected && \" ‚Ä¢ Waiting for ESP32-S3 connection\"}\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":17084},"components/shared-navigation.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Zap, Menu, Home, Database, FileText, Map, User, Settings, Shield, Bell, X, LogOut, Code } from \"lucide-react\"\nimport { useRouter } from \"next/navigation\"\n\ninterface NavigationProps {\n  currentPage?: string\n}\n\nexport function SharedNavigation({ currentPage = \"\" }: NavigationProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const router = useRouter()\n\n  const navigationItems = [\n    { icon: Home, label: \"Dashboard\", href: \"/\", id: \"dashboard\" },\n    { icon: Zap, label: \"Stations\", href: \"/stations\", id: \"stations\" },\n    { icon: Shield, label: \"Threat Logs\", href: \"/threats\", id: \"threats\" },\n    { icon: Map, label: \"Map View\", href: \"/map\", id: \"map\" },\n    { icon: FileText, label: \"Reports\", href: \"/reports\", id: \"reports\" },\n    { icon: Database, label: \"Analytics\", href: \"/analytics\", id: \"analytics\" },\n    { icon: Code, label: \"Code Generator\", href: \"/code-generator\", id: \"code-generator\" },\n    { icon: Settings, label: \"Settings\", href: \"/settings\", id: \"settings\" },\n    { icon: User, label: \"Profile\", href: \"/profile\", id: \"profile\" },\n  ]\n\n  const handleLogout = () => {\n    // Clear any stored session data\n    localStorage.removeItem(\"userSession\")\n    sessionStorage.clear()\n\n    // Redirect to login page\n    router.push(\"/login\")\n  }\n\n  const handleNavigation = (href: string) => {\n    router.push(href)\n    setSidebarOpen(false)\n  }\n\n  return (\n    <>\n      {/* Mobile Header */}\n      <header className=\"lg:hidden bg-white/80 backdrop-blur-xl border-b border-white/20 shadow-sm sticky top-0 z-40\">\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-green-400 to-purple-400 rounded-lg flex items-center justify-center\">\n              <Zap className=\"w-5 h-5 text-white\" />\n            </div>\n            <span className=\"text-xl font-bold bg-gradient-to-r from-green-600 to-purple-600 bg-clip-text text-transparent\">\n              EV-Secure\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n              <Bell className=\"w-5 h-5\" />\n              <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full text-xs text-white flex items-center justify-center\">\n                3\n              </span>\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\" onClick={handleLogout} title=\"Logout\">\n              <LogOut className=\"w-5 h-5\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\" onClick={() => setSidebarOpen(true)}>\n              <Menu className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Desktop Sidebar */}\n      <div className=\"hidden lg:block fixed inset-y-0 left-0 z-50 w-64 bg-white/80 backdrop-blur-xl border-r border-white/20 shadow-2xl\">\n        <div className=\"flex items-center justify-between h-16 px-4 border-b border-white/20\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-green-400 to-purple-400 rounded-lg flex items-center justify-center\">\n              <Zap className=\"w-5 h-5 text-white\" />\n            </div>\n            <span className=\"text-xl font-bold bg-gradient-to-r from-green-600 to-purple-600 bg-clip-text text-transparent\">\n              EV-Secure\n            </span>\n          </div>\n          <Button variant=\"ghost\" size=\"icon\" onClick={handleLogout} title=\"Logout\">\n            <LogOut className=\"w-5 h-5 text-gray-600 hover:text-red-600\" />\n          </Button>\n        </div>\n\n        <nav className=\"mt-8 px-4 space-y-2\">\n          {navigationItems.map((item, index) => (\n            <button\n              key={index}\n              onClick={() => handleNavigation(item.href)}\n              className={`w-full flex items-center space-x-3 px-4 py-3 rounded-xl transition-all duration-200 hover:scale-105 text-left ${\n                currentPage === item.id || (currentPage === \"\" && item.id === \"dashboard\")\n                  ? \"bg-gradient-to-r from-green-100 to-purple-100 text-gray-800 shadow-lg border border-white/30\"\n                  : \"text-gray-600 hover:bg-white/50 hover:text-gray-800 hover:shadow-md\"\n              }`}\n            >\n              <item.icon\n                className={`w-5 h-5 flex-shrink-0 ${\n                  currentPage === item.id || (currentPage === \"\" && item.id === \"dashboard\") ? \"text-purple-600\" : \"\"\n                }`}\n              />\n              <span className=\"font-medium text-left truncate\">{item.label}</span>\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Mobile Sidebar */}\n      {sidebarOpen && (\n        <>\n          <div\n            className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 lg:hidden\"\n            onClick={() => setSidebarOpen(false)}\n          />\n          <div className=\"fixed inset-y-0 left-0 z-50 w-64 bg-white/90 backdrop-blur-xl border-r border-white/20 shadow-2xl lg:hidden\">\n            <div className=\"flex items-center justify-between h-16 px-4 border-b border-white/20\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-gradient-to-r from-green-400 to-purple-400 rounded-lg flex items-center justify-center\">\n                  <Zap className=\"w-5 h-5 text-white\" />\n                </div>\n                <span className=\"text-xl font-bold bg-gradient-to-r from-green-600 to-purple-600 bg-clip-text text-transparent\">\n                  EV-Secure\n                </span>\n              </div>\n              <Button variant=\"ghost\" size=\"icon\" onClick={() => setSidebarOpen(false)}>\n                <X className=\"w-5 h-5\" />\n              </Button>\n            </div>\n\n            <nav className=\"mt-8 px-4 space-y-2\">\n              {navigationItems.map((item, index) => (\n                <button\n                  key={index}\n                  onClick={() => handleNavigation(item.href)}\n                  className={`w-full flex items-center space-x-3 px-4 py-3 rounded-xl transition-all duration-200 text-left ${\n                    currentPage === item.id || (currentPage === \"\" && item.id === \"dashboard\")\n                      ? \"bg-gradient-to-r from-green-100 to-purple-100 text-gray-800 shadow-lg border border-white/30\"\n                      : \"text-gray-600 hover:bg-white/50 hover:text-gray-800 hover:shadow-md\"\n                  }`}\n                >\n                  <item.icon\n                    className={`w-5 h-5 flex-shrink-0 ${\n                      currentPage === item.id || (currentPage === \"\" && item.id === \"dashboard\")\n                        ? \"text-purple-600\"\n                        : \"\"\n                    }`}\n                  />\n                  <span className=\"font-medium text-left truncate\">{item.label}</span>\n                </button>\n              ))}\n            </nav>\n\n            <div className=\"absolute bottom-4 left-4 right-4\">\n              <Button\n                onClick={handleLogout}\n                variant=\"outline\"\n                className=\"w-full bg-red-50 border-red-200 text-red-600 hover:bg-red-100\"\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Logout\n              </Button>\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  )\n}\n","size_bytes":7527},"components/theme-provider.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport {\n  ThemeProvider as NextThemesProvider,\n  type ThemeProviderProps,\n} from 'next-themes'\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n","size_bytes":292},"hooks/use-mobile.ts":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"hooks/use-toast.ts":{"content":"\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3948},"lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"styles/globals.css":{"content":"@import 'tailwindcss';\n@import 'tw-animate-css';\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.145 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.145 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.985 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.637 0.237 25.331);\n  --border: oklch(0.269 0 0);\n  --input: oklch(0.269 0 0);\n  --ring: oklch(0.439 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":4259},"app/admin/page.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport {\n  UserPlus,\n  Users,\n  Shield,\n  Trash2,\n  Eye,\n  EyeOff,\n  AlertCircle,\n  CheckCircle,\n  Mail,\n  Lock,\n  User,\n  Building,\n} from \"lucide-react\"\nimport { SharedNavigation } from \"@/components/shared-navigation\"\n\nconst existingAdmins = [\n  {\n    id: 1,\n    name: \"Harshal Tapre\",\n    email: \"harshaltapre27@gmail.com\",\n    role: \"Super Admin\",\n    status: \"active\",\n    lastLogin: \"2 hours ago\",\n    createdAt: \"2023-01-15\",\n  },\n  {\n    id: 2,\n    name: \"John Smith\",\n    email: \"john.smith@evsecure.com\",\n    role: \"Admin\",\n    status: \"active\",\n    lastLogin: \"1 day ago\",\n    createdAt: \"2023-03-20\",\n  },\n  {\n    id: 3,\n    name: \"Sarah Johnson\",\n    email: \"sarah.johnson@evsecure.com\",\n    role: \"Admin\",\n    status: \"inactive\",\n    lastLogin: \"1 week ago\",\n    createdAt: \"2023-05-10\",\n  },\n]\n\nexport default function AdminPage() {\n  const [admins, setAdmins] = useState(existingAdmins)\n  const [showAddForm, setShowAddForm] = useState(false)\n  const [showPassword, setShowPassword] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [newAdmin, setNewAdmin] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    role: \"Admin\",\n    organization: \"\",\n  })\n  const [errors, setErrors] = useState<Record<string, string>>({})\n\n  const handleAddAdmin = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n    setErrors({})\n\n    // Validation\n    const newErrors: Record<string, string> = {}\n    if (!newAdmin.name.trim()) newErrors.name = \"Name is required\"\n    if (!newAdmin.email.trim()) newErrors.email = \"Email is required\"\n    else if (!/\\S+@\\S+\\.\\S+/.test(newAdmin.email)) newErrors.email = \"Email is invalid\"\n    if (!newAdmin.password) newErrors.password = \"Password is required\"\n    else if (newAdmin.password.length < 8) newErrors.password = \"Password must be at least 8 characters\"\n    if (!newAdmin.organization.trim()) newErrors.organization = \"Organization is required\"\n\n    // Check if email already exists\n    if (admins.some((admin) => admin.email === newAdmin.email)) {\n      newErrors.email = \"Email already exists\"\n    }\n\n    if (Object.keys(newErrors).length > 0) {\n      setErrors(newErrors)\n      setIsLoading(false)\n      return\n    }\n\n    // Simulate API call\n    setTimeout(() => {\n      const admin = {\n        id: admins.length + 1,\n        name: newAdmin.name,\n        email: newAdmin.email,\n        role: newAdmin.role,\n        status: \"active\" as const,\n        lastLogin: \"Never\",\n        createdAt: new Date().toISOString().split(\"T\")[0],\n      }\n\n      setAdmins((prev) => [...prev, admin])\n      setNewAdmin({ name: \"\", email: \"\", password: \"\", role: \"Admin\", organization: \"\" })\n      setShowAddForm(false)\n      setIsLoading(false)\n    }, 1500)\n  }\n\n  const handleDeleteAdmin = (id: number) => {\n    if (confirm(\"Are you sure you want to delete this admin account?\")) {\n      setAdmins((prev) => prev.filter((admin) => admin.id !== id))\n    }\n  }\n\n  const handleToggleStatus = (id: number) => {\n    setAdmins((prev) =>\n      prev.map((admin) =>\n        admin.id === id ? { ...admin, status: admin.status === \"active\" ? \"inactive\" : \"active\" } : admin,\n      ),\n    )\n  }\n\n  const handleInputChange = (field: string, value: string) => {\n    setNewAdmin((prev) => ({ ...prev, [field]: value }))\n    if (errors[field]) {\n      setErrors((prev) => ({ ...prev, [field]: \"\" }))\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-green-50\">\n      <SharedNavigation currentPage=\"admin\" />\n\n      <div className=\"lg:ml-64 p-4 sm:p-6 space-y-4 sm:space-y-6\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800 flex items-center gap-2\">\n              <Shield className=\"w-6 h-6 sm:w-8 sm:h-8 text-red-600\" />\n              Admin Management\n            </h1>\n            <p className=\"text-gray-600 mt-1\">Manage administrator accounts and permissions</p>\n          </div>\n          <Button\n            onClick={() => setShowAddForm(true)}\n            className=\"bg-gradient-to-r from-green-500 to-purple-500 text-white\"\n          >\n            <UserPlus className=\"w-4 h-4 mr-2\" />\n            Add New Admin\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Admins</p>\n                  <p className=\"text-2xl font-bold text-gray-800\">{admins.length}</p>\n                </div>\n                <Users className=\"w-8 h-8 text-blue-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Active Admins</p>\n                  <p className=\"text-2xl font-bold text-green-600\">\n                    {admins.filter((admin) => admin.status === \"active\").length}\n                  </p>\n                </div>\n                <CheckCircle className=\"w-8 h-8 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Super Admins</p>\n                  <p className=\"text-2xl font-bold text-purple-600\">\n                    {admins.filter((admin) => admin.role === \"Super Admin\").length}\n                  </p>\n                </div>\n                <Shield className=\"w-8 h-8 text-purple-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Add Admin Form */}\n        {showAddForm && (\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-800 flex items-center gap-2\">\n                <UserPlus className=\"w-5 h-5 text-green-600\" />\n                Add New Administrator\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleAddAdmin} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\" className=\"text-gray-700\">\n                      Full Name\n                    </Label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                      <Input\n                        id=\"name\"\n                        placeholder=\"Enter full name\"\n                        value={newAdmin.name}\n                        onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                        className={`pl-10 bg-white/50 ${errors.name ? \"border-red-500\" : \"\"}`}\n                        required\n                      />\n                    </div>\n                    {errors.name && <p className=\"text-xs text-red-600\">{errors.name}</p>}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\" className=\"text-gray-700\">\n                      Email Address\n                    </Label>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        placeholder=\"admin@evsecure.com\"\n                        value={newAdmin.email}\n                        onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                        className={`pl-10 bg-white/50 ${errors.email ? \"border-red-500\" : \"\"}`}\n                        required\n                      />\n                    </div>\n                    {errors.email && <p className=\"text-xs text-red-600\">{errors.email}</p>}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"password\" className=\"text-gray-700\">\n                      Password\n                    </Label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                      <Input\n                        id=\"password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Create secure password\"\n                        value={newAdmin.password}\n                        onChange={(e) => handleInputChange(\"password\", e.target.value)}\n                        className={`pl-10 pr-10 bg-white/50 ${errors.password ? \"border-red-500\" : \"\"}`}\n                        required\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                      >\n                        {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </button>\n                    </div>\n                    {errors.password && <p className=\"text-xs text-red-600\">{errors.password}</p>}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"role\" className=\"text-gray-700\">\n                      Admin Role\n                    </Label>\n                    <Select value={newAdmin.role} onValueChange={(value) => handleInputChange(\"role\", value)}>\n                      <SelectTrigger className=\"bg-white/50\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Admin\">Admin</SelectItem>\n                        <SelectItem value=\"Super Admin\">Super Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2 sm:col-span-2\">\n                    <Label htmlFor=\"organization\" className=\"text-gray-700\">\n                      Organization\n                    </Label>\n                    <div className=\"relative\">\n                      <Building className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                      <Input\n                        id=\"organization\"\n                        placeholder=\"Organization name\"\n                        value={newAdmin.organization}\n                        onChange={(e) => handleInputChange(\"organization\", e.target.value)}\n                        className={`pl-10 bg-white/50 ${errors.organization ? \"border-red-500\" : \"\"}`}\n                        required\n                      />\n                    </div>\n                    {errors.organization && <p className=\"text-xs text-red-600\">{errors.organization}</p>}\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-2 pt-4\">\n                  <Button\n                    type=\"submit\"\n                    disabled={isLoading}\n                    className=\"bg-gradient-to-r from-green-500 to-blue-500 text-white\"\n                  >\n                    {isLoading ? (\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                        <span>Creating...</span>\n                      </div>\n                    ) : (\n                      \"Create Admin Account\"\n                    )}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setShowAddForm(false)\n                      setNewAdmin({ name: \"\", email: \"\", password: \"\", role: \"Admin\", organization: \"\" })\n                      setErrors({})\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Admin List */}\n        <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n          <CardHeader>\n            <CardTitle className=\"text-gray-800\">Administrator Accounts</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {admins.map((admin) => (\n                <div\n                  key={admin.id}\n                  className=\"flex items-center justify-between p-4 bg-gradient-to-r from-gray-50 to-blue-50 rounded-lg border border-gray-200\"\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-purple-400 to-blue-400 rounded-full flex items-center justify-center\">\n                      <User className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-800\">{admin.name}</h4>\n                      <p className=\"text-sm text-gray-600\">{admin.email}</p>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <Badge variant={admin.role === \"Super Admin\" ? \"destructive\" : \"default\"} className=\"text-xs\">\n                          {admin.role}\n                        </Badge>\n                        <Badge\n                          variant={admin.status === \"active\" ? \"default\" : \"secondary\"}\n                          className={\n                            admin.status === \"active\" ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"\n                          }\n                        >\n                          {admin.status}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"text-right text-sm text-gray-600\">\n                      <p>Last login: {admin.lastLogin}</p>\n                      <p>Created: {admin.createdAt}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleToggleStatus(admin.id)}\n                        className=\"bg-white/50\"\n                      >\n                        {admin.status === \"active\" ? \"Deactivate\" : \"Activate\"}\n                      </Button>\n                      {admin.role !== \"Super Admin\" && (\n                        <Button variant=\"destructive\" size=\"sm\" onClick={() => handleDeleteAdmin(admin.id)}>\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Security Notice */}\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <AlertCircle className=\"w-5 h-5 text-yellow-600 flex-shrink-0 mt-0.5\" />\n            <div>\n              <h4 className=\"font-semibold text-yellow-800 mb-1\">Security Guidelines</h4>\n              <ul className=\"text-sm text-yellow-700 space-y-1\">\n                <li>‚Ä¢ Admin passwords are automatically hashed and stored securely</li>\n                <li>‚Ä¢ Super Admins cannot be deleted for security reasons</li>\n                <li>‚Ä¢ All admin activities are logged and monitored</li>\n                <li>‚Ä¢ Use strong passwords with at least 8 characters</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":17132},"app/analytics/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Badge } from \"@/components/ui/badge\"\nimport {\n  AreaChart,\n  Area,\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\"\nimport {\n  TrendingUp,\n  TrendingDown,\n  DollarSign,\n  Users,\n  Zap,\n  Download,\n  RefreshCw,\n  AlertTriangle,\n  Activity,\n} from \"lucide-react\"\nimport { SharedNavigation } from \"@/components/shared-navigation\"\n\n// Mock data - in real app, this would come from API\nconst revenueData = [\n  { month: \"Jan\", revenue: 12500, sessions: 450, efficiency: 85 },\n  { month: \"Feb\", revenue: 15200, sessions: 520, efficiency: 88 },\n  { month: \"Mar\", revenue: 18900, sessions: 680, efficiency: 92 },\n  { month: \"Apr\", revenue: 22100, sessions: 750, efficiency: 89 },\n  { month: \"May\", revenue: 25800, sessions: 890, efficiency: 94 },\n  { month: \"Jun\", revenue: 28500, sessions: 950, efficiency: 91 },\n]\n\nconst hourlyUsageData = [\n  { hour: \"00:00\", usage: 12, prediction: 15 },\n  { hour: \"04:00\", usage: 8, prediction: 10 },\n  { hour: \"08:00\", usage: 45, prediction: 48 },\n  { hour: \"12:00\", usage: 78, prediction: 75 },\n  { hour: \"16:00\", usage: 65, prediction: 68 },\n  { hour: \"20:00\", usage: 52, prediction: 55 },\n]\n\nconst stationPerformanceData = [\n  { station: \"ST001\", uptime: 98, efficiency: 94, revenue: 8500 },\n  { station: \"ST002\", uptime: 85, efficiency: 78, revenue: 6200 },\n  { station: \"ST004\", uptime: 96, efficiency: 91, revenue: 7800 },\n  { station: \"ST005\", uptime: 99, efficiency: 96, revenue: 9200 },\n]\n\nconst userBehaviorData = [\n  { name: \"Regular Users\", value: 45, color: \"#8884d8\" },\n  { name: \"Premium Users\", value: 30, color: \"#82ca9d\" },\n  { name: \"Corporate\", value: 15, color: \"#ffc658\" },\n  { name: \"Occasional\", value: 10, color: \"#ff7300\" },\n]\n\nexport default function AnalyticsPage() {\n  const [timeRange, setTimeRange] = useState(\"6months\")\n  const [isConnected, setIsConnected] = useState(false) // Simulate ESP32 connection status\n  const [lastUpdate, setLastUpdate] = useState(new Date())\n\n  useEffect(() => {\n    // Simulate checking ESP32 connection\n    const checkConnection = () => {\n      // In real app, this would check actual ESP32 connection\n      setIsConnected(false) // Set to false to show \"No Data Available\" state\n    }\n\n    checkConnection()\n    const interval = setInterval(checkConnection, 30000) // Check every 30 seconds\n\n    return () => clearInterval(interval)\n  }, [])\n\n  const handleRefresh = () => {\n    setLastUpdate(new Date())\n    // In real app, this would fetch fresh data from API\n    console.log(\"Refreshing analytics data...\")\n  }\n\n  const handleExport = (format: string) => {\n    // In real app, this would generate and download the report\n    console.log(`Exporting analytics data as ${format}`)\n\n    const data = {\n      revenue: revenueData,\n      usage: hourlyUsageData,\n      performance: stationPerformanceData,\n      users: userBehaviorData,\n      exportedAt: new Date().toISOString(),\n    }\n\n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: \"application/json\" })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement(\"a\")\n    a.href = url\n    a.download = `analytics-${format}-${new Date().toISOString().split(\"T\")[0]}.json`\n    document.body.appendChild(a)\n    a.click()\n    document.body.removeChild(a)\n    URL.revokeObjectURL(url)\n  }\n\n  const NoDataCard = ({ title, description }: { title: string; description: string }) => (\n    <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"text-gray-800 flex items-center gap-2\">\n          <AlertTriangle className=\"w-5 h-5 text-orange-600\" />\n          {title}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-center py-8\">\n          <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Activity className=\"w-8 h-8 text-gray-400\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">No Data Available</h3>\n          <p className=\"text-gray-600 mb-4\">{description}</p>\n          <Badge variant=\"outline\" className=\"bg-orange-50 text-orange-700 border-orange-200\">\n            ESP32-S3 Not Connected\n          </Badge>\n        </div>\n      </CardContent>\n    </Card>\n  )\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-green-50\">\n      <SharedNavigation currentPage=\"analytics\" />\n\n      <div className=\"lg:ml-64 p-4 sm:p-6 space-y-4 sm:space-y-6 max-w-full overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div className=\"min-w-0\">\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800 flex items-center gap-2\">\n              <TrendingUp className=\"w-6 h-6 sm:w-8 sm:h-8 text-blue-600 flex-shrink-0\" />\n              <span className=\"truncate\">Analytics Dashboard</span>\n            </h1>\n            <p className=\"text-gray-600 mt-1 text-sm sm:text-base\">Performance insights and data analytics</p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Select value={timeRange} onValueChange={setTimeRange}>\n              <SelectTrigger className=\"w-32 bg-white/80\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"7days\">7 Days</SelectItem>\n                <SelectItem value=\"30days\">30 Days</SelectItem>\n                <SelectItem value=\"6months\">6 Months</SelectItem>\n                <SelectItem value=\"1year\">1 Year</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button variant=\"outline\" onClick={handleRefresh} className=\"bg-white/80\">\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              Refresh\n            </Button>\n            <Button\n              onClick={() => handleExport(\"csv\")}\n              className=\"bg-gradient-to-r from-green-500 to-blue-500 text-white\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export CSV\n            </Button>\n          </div>\n        </div>\n\n        {/* Connection Status Alert */}\n        {!isConnected && (\n          <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4\">\n            <div className=\"flex items-start space-x-3\">\n              <AlertTriangle className=\"w-5 h-5 text-orange-600 flex-shrink-0 mt-0.5\" />\n              <div>\n                <h4 className=\"font-semibold text-orange-800 mb-1\">ESP32-S3 Not Connected</h4>\n                <p className=\"text-sm text-orange-700\">\n                  No real-time data available. Connect your ESP32-S3 stations with valid API keys to see live analytics.\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6\">\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Revenue</p>\n                  <p className=\"text-2xl font-bold text-green-600\">{isConnected ? \"$28,500\" : \"No Data\"}</p>\n                </div>\n                <DollarSign className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <div className=\"flex items-center mt-2\">\n                {isConnected ? (\n                  <>\n                    <TrendingUp className=\"w-4 h-4 text-green-600 mr-1\" />\n                    <span className=\"text-sm text-green-600\">+12.5%</span>\n                  </>\n                ) : (\n                  <span className=\"text-sm text-gray-500\">ESP32 Required</span>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Sessions</p>\n                  <p className=\"text-2xl font-bold text-blue-600\">{isConnected ? \"950\" : \"No Data\"}</p>\n                </div>\n                <Users className=\"w-8 h-8 text-blue-600\" />\n              </div>\n              <div className=\"flex items-center mt-2\">\n                {isConnected ? (\n                  <>\n                    <TrendingUp className=\"w-4 h-4 text-blue-600 mr-1\" />\n                    <span className=\"text-sm text-blue-600\">+8.2%</span>\n                  </>\n                ) : (\n                  <span className=\"text-sm text-gray-500\">ESP32 Required</span>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Avg Efficiency</p>\n                  <p className=\"text-2xl font-bold text-purple-600\">{isConnected ? \"91%\" : \"No Data\"}</p>\n                </div>\n                <Zap className=\"w-8 h-8 text-purple-600\" />\n              </div>\n              <div className=\"flex items-center mt-2\">\n                {isConnected ? (\n                  <>\n                    <TrendingDown className=\"w-4 h-4 text-red-600 mr-1\" />\n                    <span className=\"text-sm text-red-600\">-2.1%</span>\n                  </>\n                ) : (\n                  <span className=\"text-sm text-gray-500\">ESP32 Required</span>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Active Stations</p>\n                  <p className=\"text-2xl font-bold text-orange-600\">{isConnected ? \"4\" : \"No Data\"}</p>\n                </div>\n                <Activity className=\"w-8 h-8 text-orange-600\" />\n              </div>\n              <div className=\"flex items-center mt-2\">\n                {isConnected ? (\n                  <>\n                    <TrendingUp className=\"w-4 h-4 text-orange-600 mr-1\" />\n                    <span className=\"text-sm text-orange-600\">+1 station</span>\n                  </>\n                ) : (\n                  <span className=\"text-sm text-gray-500\">ESP32 Required</span>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Charts Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Revenue Trend */}\n          {isConnected ? (\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-800\">Revenue & Sessions Trend</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <AreaChart data={revenueData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"month\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Legend />\n                      <Area\n                        type=\"monotone\"\n                        dataKey=\"revenue\"\n                        stackId=\"1\"\n                        stroke=\"#8884d8\"\n                        fill=\"#8884d8\"\n                        fillOpacity={0.6}\n                      />\n                      <Area\n                        type=\"monotone\"\n                        dataKey=\"sessions\"\n                        stackId=\"2\"\n                        stroke=\"#82ca9d\"\n                        fill=\"#82ca9d\"\n                        fillOpacity={0.6}\n                      />\n                    </AreaChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <NoDataCard\n              title=\"Revenue & Sessions Trend\"\n              description=\"Connect ESP32-S3 stations to view revenue and session analytics\"\n            />\n          )}\n\n          {/* Hourly Usage */}\n          {isConnected ? (\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-800\">Hourly Usage Pattern</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart data={hourlyUsageData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"hour\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Legend />\n                      <Line type=\"monotone\" dataKey=\"usage\" stroke=\"#8884d8\" strokeWidth={2} />\n                      <Line type=\"monotone\" dataKey=\"prediction\" stroke=\"#82ca9d\" strokeDasharray=\"5 5\" />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <NoDataCard\n              title=\"Hourly Usage Pattern\"\n              description=\"Connect ESP32-S3 stations to view hourly usage patterns and predictions\"\n            />\n          )}\n\n          {/* Station Performance */}\n          {isConnected ? (\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-800\">Station Performance</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={stationPerformanceData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"station\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Legend />\n                      <Bar dataKey=\"uptime\" fill=\"#8884d8\" />\n                      <Bar dataKey=\"efficiency\" fill=\"#82ca9d\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <NoDataCard\n              title=\"Station Performance\"\n              description=\"Connect ESP32-S3 stations to view individual station performance metrics\"\n            />\n          )}\n\n          {/* User Behavior */}\n          {isConnected ? (\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-800\">User Segmentation</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                      <Pie\n                        data={userBehaviorData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                      >\n                        {userBehaviorData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <NoDataCard\n              title=\"User Segmentation\"\n              description=\"Connect ESP32-S3 stations to view user behavior and segmentation data\"\n            />\n          )}\n        </div>\n\n        {/* Summary Stats */}\n        <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n          <CardHeader>\n            <CardTitle className=\"text-gray-800\">Analytics Summary</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isConnected ? (\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <div className=\"text-center p-4 bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg\">\n                  <p className=\"text-sm text-blue-600 font-medium\">Peak Hour</p>\n                  <p className=\"text-2xl font-bold text-blue-800\">12:00 PM</p>\n                </div>\n                <div className=\"text-center p-4 bg-gradient-to-br from-green-50 to-green-100 rounded-lg\">\n                  <p className=\"text-sm text-green-600 font-medium\">Best Station</p>\n                  <p className=\"text-2xl font-bold text-green-800\">ST005</p>\n                </div>\n                <div className=\"text-center p-4 bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg\">\n                  <p className=\"text-sm text-purple-600 font-medium\">Avg Session</p>\n                  <p className=\"text-2xl font-bold text-purple-800\">45 min</p>\n                </div>\n                <div className=\"text-center p-4 bg-gradient-to-br from-orange-50 to-orange-100 rounded-lg\">\n                  <p className=\"text-sm text-orange-600 font-medium\">Growth Rate</p>\n                  <p className=\"text-2xl font-bold text-orange-800\">+12.5%</p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <AlertTriangle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">No Analytics Data</h3>\n                <p className=\"text-gray-600 mb-4\">\n                  Connect your ESP32-S3 charging stations to view detailed analytics and insights.\n                </p>\n                <Button className=\"bg-gradient-to-r from-green-500 to-purple-500 text-white\">Configure API Keys</Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Last Updated */}\n        <div className=\"text-center text-sm text-gray-500\">\n          Last updated: {lastUpdate.toLocaleTimeString()}\n          {!isConnected && \" ‚Ä¢ Waiting for ESP32-S3 connection\"}\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":19407},"app/code-generator/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport {\n  Code,\n  Download,\n  Copy,\n  Key,\n  Zap,\n  CheckCircle,\n  AlertTriangle,\n  RefreshCw,\n  FileCode,\n  Settings,\n} from \"lucide-react\"\nimport { SharedNavigation } from \"@/components/shared-navigation\"\n\n// Type definitions\ninterface StationConfig {\n  name: string\n  location: string\n}\n\ninterface ApiKeyData {\n  key: string\n  status: \"active\" | \"inactive\"\n  lastUsed: string | null\n}\n\ntype StationId = \"ST001\" | \"ST002\" | \"ST003\" | \"ST004\"\ntype StationsState = Record<StationId, StationConfig>\ntype ApiKeysState = Record<string, ApiKeyData>\n\nconst stations: StationsState = {\n  ST001: { name: \"Downtown Plaza\", location: \"123 Main St, City Center\" },\n  ST002: { name: \"Mall Parking\", location: \"456 Commerce Ave, Mall Plaza\" },\n  ST003: { name: \"Airport Terminal\", location: \"789 Airport Rd, Terminal B\" },\n  ST004: { name: \"University Campus\", location: \"321 University Blvd, Campus North\" },\n}\n\nexport default function CodeGeneratorPage() {\n  const [selectedStation, setSelectedStation] = useState<string>(\"\")\n  const [apiKeys, setApiKeys] = useState<ApiKeysState>({})\n  const [generatedCode, setGeneratedCode] = useState(\"\")\n  const [isGenerating, setIsGenerating] = useState(false)\n  const [copySuccess, setCopySuccess] = useState(false)\n\n  // Load existing API keys\n  useEffect(() => {\n    const loadApiKeys = async () => {\n      try {\n        const response = await fetch('/api/keys')\n        if (response.ok) {\n          const data = await response.json()\n          if (data.success && data.keys) {\n            const keysMap: ApiKeysState = {}\n            data.keys.forEach((keyData: { stationId: string; fullKey: string; status: \"active\" | \"inactive\"; lastUsed: string | null }) => {\n              keysMap[keyData.stationId] = {\n                key: keyData.fullKey,\n                status: keyData.status,\n                lastUsed: keyData.lastUsed,\n              }\n            })\n            setApiKeys(keysMap)\n          }\n        }\n      } catch (error) {\n        console.error('Error loading API keys:', error)\n      }\n    }\n\n    loadApiKeys()\n  }, [])\n\n  const generateArduinoCode = (stationId: StationId, apiKey: string) => {\n    const station = stations[stationId]\n    \n    return `/*\n * EV-Secure ESP32-S3 Configuration for ${station.name}\n * Station ID: ${stationId}\n * Location: ${station.location}\n * Generated: ${new Date().toLocaleString()}\n * \n * INSTRUCTIONS:\n * 1. Copy this entire code\n * 2. Open Arduino IDE\n * 3. Open EV_Secure_Config.h file\n * 4. Replace the configuration section with this code\n * 5. Upload to your ESP32-S3 device\n */\n\n#ifndef EV_SECURE_CONFIG_H\n#define EV_SECURE_CONFIG_H\n\n#include <WiFi.h>\n#include <HTTPClient.h>\n#include <SD.h>\n#include <SPI.h>\n#include <ArduinoJson.h>\n#include <driver/adc.h>\n#include <esp_adc_cal.h>\n#include <Wire.h>\n#include <Adafruit_GFX.h>\n#include <Adafruit_ST7735.h>\n\n// ============================================================================\n// DEVICE CONFIGURATION - ${station.name}\n// ============================================================================\n#define DEVICE_ID \"${stationId}\"\n#define DEVICE_NAME \"${station.name}\"\n#define DEVICE_LOCATION \"${station.location}\"\n#define DEVICE_VERSION \"1.0.0\"\n#define FIRMWARE_VERSION \"2024.01\"\n\n// ============================================================================\n// WIFI CONFIGURATION\n// ============================================================================\n#define WIFI_SSID \"YOUR_WIFI_SSID\"           // Replace with your WiFi SSID\n#define WIFI_PASSWORD \"YOUR_WIFI_PASSWORD\"   // Replace with your WiFi password\n#define WIFI_TIMEOUT_MS 10000\n#define WIFI_MAX_RETRIES 5\n\n// ============================================================================\n// DASHBOARD API CONFIGURATION - STATION ${stationId}\n// ============================================================================\n#define DASHBOARD_URL \"http://localhost:3000\"  // Change to your dashboard URL\n#define API_KEY \"${apiKey}\"                    // Your unique API key for ${stationId}\n#define API_TIMEOUT_MS 10000\n#define DATA_TRANSMISSION_INTERVAL 2000  // Send data every 2 seconds\n#define COMMAND_CHECK_INTERVAL 1000      // Check for commands every 1 second\n\n// ============================================================================\n// HARDWARE PIN CONFIGURATION (ESP32-S3)\n// ============================================================================\n\n// Sensor Pins\n#define CURRENT_SENSOR_PIN 1      // Current Sensor OUT ‚Üí GPIO1 (ADC1_CH0)\n#define VOLTAGE_SENSOR_PIN 2      // Voltage Sensor S ‚Üí GPIO2 (ADC1_CH1)\n#define TEMPERATURE_SENSOR_PIN 3  // DS18B20 ‚Üí GPIO3 (OneWire)\n\n// SD Card Pins (SPI)\n#define SD_MOSI_PIN 11            // SD Card MOSI ‚Üí GPIO11\n#define SD_MISO_PIN 13            // SD Card MISO ‚Üí GPIO13\n#define SD_SCK_PIN 12             // SD Card CLK ‚Üí GPIO12\n#define SD_CS_PIN 10              // SD Card CS ‚Üí GPIO10\n\n// TFT Display Pins (SPI)\n#define TFT_MOSI_PIN 35           // TFT MOSI ‚Üí GPIO35\n#define TFT_MISO_PIN 37           // TFT MISO ‚Üí GPIO37\n#define TFT_SCK_PIN 36            // TFT SCK ‚Üí GPIO36\n#define TFT_CS_PIN 34             // TFT CS ‚Üí GPIO34\n#define TFT_DC_PIN 14             // TFT SDA (DC) ‚Üí GPIO14\n#define TFT_RST_PIN 15            // TFT RST ‚Üí GPIO15\n#define TFT_BL_PIN 5              // TFT BL (Backlight) ‚Üí GPIO5\n\n// Control Pins\n#define RELAY_CONTROL_PIN 18      // Relay Control ‚Üí GPIO18\n#define STATUS_LED_PIN 2          // Status LED ‚Üí GPIO2\n#define BUZZER_PIN 4              // Alert Buzzer ‚Üí GPIO4\n#define EMERGENCY_STOP_PIN 16     // Emergency Stop Button ‚Üí GPIO16\n\n// I2C Pins - RTC Module Configuration\n#define I2C_SDA_PIN 21            // RTC SDA ‚Üí GPIO21\n#define I2C_SCL_PIN 22            // RTC SCL ‚Üí GPIO22\n#define RTC_I2C_ADDRESS 0x68      // DS3231 RTC I2C Address\n\n// ============================================================================\n// SENSOR CALIBRATION CONSTANTS\n// ============================================================================\n\n// ACS712 Current Sensor (30A Module)\n#define ACS712_SENSITIVITY 66.0   // mV/A for 30A module\n#define ACS712_VCC 3.3            // Operating voltage\n#define ACS712_OFFSET 1.65        // VCC/2 for bidirectional sensing\n#define ACS712_MAX_CURRENT 30.0   // Maximum expected current\n\n// ZMPT101B Voltage Sensor\n#define ZMPT101B_SENSITIVITY 0.00488  // ADC resolution (3.3V/4095)\n#define ZMPT101B_CALIBRATION 0.00488  // Calibration factor\n#define ZMPT101B_MAX_VOLTAGE 250.0    // Maximum expected voltage\n\n// Temperature Sensor (DS18B20)\n#define TEMP_SENSOR_RESOLUTION 12\n\n// ============================================================================\n// ML MODEL CONFIGURATION\n// ============================================================================\n#define INPUT_FEATURES 6          // Number of input features\n#define MODEL_INPUT_SIZE 6        // Same as INPUT_FEATURES\n#define MODEL_OUTPUT_SIZE 1       // Single output (threat probability)\n#define MODEL_ARENA_SIZE 32768    // Tensor arena size in bytes\n#define THREAT_THRESHOLD 0.7      // Threshold for threat detection\n#define CRITICAL_THRESHOLD 0.9    // Threshold for critical threat\n\n// ============================================================================\n// SYSTEM THRESHOLDS\n// ============================================================================\n#define CHARGING_THRESHOLD 0.1    // Minimum current to consider charging\n#define VOLTAGE_MIN_THRESHOLD 200.0  // Minimum voltage threshold\n#define VOLTAGE_MAX_THRESHOLD 250.0  // Maximum voltage threshold\n#define CURRENT_MAX_THRESHOLD 30.0   // Maximum current threshold\n#define TEMP_MAX_THRESHOLD 60.0      // Maximum temperature threshold\n#define FREQUENCY_NOMINAL 50.0       // Nominal frequency (50Hz EU, 60Hz US)\n#define FREQUENCY_TOLERANCE 2.0      // Frequency tolerance\n\n// ============================================================================\n// DISPLAY CONFIGURATION\n// ============================================================================\n#define TFT_WIDTH 128\n#define TFT_HEIGHT 160\n#define TFT_ROTATION 0\n#define DISPLAY_UPDATE_INTERVAL 500  // Update display every 500ms\n\n// ============================================================================\n// LOGGING CONFIGURATION\n// ============================================================================\n#define LOG_INTERVAL 5000         // Log to SD every 5 seconds\n#define MAX_LOG_FILE_SIZE 1048576 // 1MB max log file size\n#define MAX_LOG_FILES 10          // Maximum number of log files\n#define LOG_BUFFER_SIZE 1024      // Log buffer size\n\n// ============================================================================\n// RELAY/CONTACTOR CONFIGURATION\n// ============================================================================\n#define RELAY_ACTIVE_LOW true     // Set to true if relay is active low\n#define RELAY_DEBOUNCE_MS 100     // Relay debounce time\n\n// ============================================================================\n// TIMING CONFIGURATION\n// ============================================================================\n#define SENSOR_READ_INTERVAL 100  // Read sensors every 100ms\n#define ML_INFERENCE_INTERVAL 1000 // Run ML inference every 1 second\n#define SYSTEM_CHECK_INTERVAL 5000 // System health check every 5 seconds\n\n// ============================================================================\n// ERROR HANDLING\n// ============================================================================\n#define MAX_ERROR_COUNT 5         // Maximum consecutive errors before restart\n#define ERROR_RESET_DELAY 30000   // Delay before reset after max errors\n\n// ============================================================================\n// DATA STRUCTURES\n// ============================================================================\n\n// Sensor data structure\nstruct SensorData {\n  float current;        // Current in Amperes\n  float voltage;        // Voltage in Volts\n  float power;          // Power in Watts\n  float frequency;      // Frequency in Hz\n  float temperature;    // Temperature in Celsius\n  unsigned long timestamp;\n};\n\n// ML prediction structure\nstruct MLPrediction {\n  float prediction;     // Threat probability (0-1)\n  float confidence;     // Model confidence (0-1)\n  unsigned long timestamp;\n};\n\n// System state enumeration\nenum SystemState {\n  STATE_IDLE = 0,\n  STATE_HANDSHAKE,\n  STATE_CHARGING,\n  STATE_SUSPICIOUS,\n  STATE_LOCKDOWN,\n  STATE_ERROR\n};\n\n// ============================================================================\n// DEBUG CONFIGURATION\n// ============================================================================\n#define DEBUG_MODE true\n#define SERIAL_BAUD_RATE 115200\n#define DEBUG_LEVEL 2  // 0=Errors only, 1=Warnings, 2=Info, 3=Debug\n\n// Debug macros\n#if DEBUG_MODE\n  #define DEBUG_PRINT(x) Serial.print(x)\n  #define DEBUG_PRINTLN(x) Serial.println(x)\n  #define DEBUG_PRINTF(fmt, ...) Serial.printf(fmt, __VA_ARGS__)\n#else\n  #define DEBUG_PRINT(x)\n  #define DEBUG_PRINTLN(x)\n  #define DEBUG_PRINTF(fmt, ...)\n#endif\n\n// ============================================================================\n// SECURITY CONFIGURATION\n// ============================================================================\n#define SSL_ENABLED false         // Set to true for HTTPS\n#define CERT_VERIFICATION false   // Set to true for production\n#define API_RATE_LIMIT 10         // Maximum API calls per minute\n\n// ============================================================================\n// VERSION INFORMATION\n// ============================================================================\n#define CONFIG_VERSION \"1.0.0\"\n#define LAST_UPDATED \"${new Date().toISOString().split('T')[0]}\"\n\n#endif // EV_SECURE_CONFIG_H\n\n/*\n * UPLOAD INSTRUCTIONS:\n * \n * 1. Copy the above code\n * 2. Open Arduino IDE\n * 3. Open your EV-Secure project folder\n * 4. Open the file: EV_Secure_Config.h\n * 5. Replace ALL content in that file with the code above\n * 6. Update WiFi credentials:\n *    - Replace \"YOUR_WIFI_SSID\" with your actual WiFi name\n *    - Replace \"YOUR_WIFI_PASSWORD\" with your actual WiFi password\n * 7. If using HTTPS, change SSL_ENABLED to true\n * 8. Save the file\n * 9. Upload to your ESP32-S3 device\n * \n * Your station ${stationId} will now communicate with the dashboard!\n */`\n  }\n\n  const handleGenerateCode = () => {\n    if (!selectedStation) {\n      alert(\"Please select a station first\")\n      return\n    }\n\n    const stationApiKey = apiKeys[selectedStation as StationId]\n    if (!stationApiKey || !stationApiKey.key) {\n      alert(\"No API key found for this station. Please generate an API key first.\")\n      return\n    }\n\n    setIsGenerating(true)\n    \n    // Simulate code generation delay\n    setTimeout(() => {\n      const code = generateArduinoCode(selectedStation as StationId, stationApiKey.key)\n      setGeneratedCode(code)\n      setIsGenerating(false)\n    }, 1000)\n  }\n\n  const handleCopyCode = async () => {\n    try {\n      await navigator.clipboard.writeText(generatedCode)\n      setCopySuccess(true)\n      setTimeout(() => setCopySuccess(false), 2000)\n    } catch (err) {\n      console.error('Failed to copy code:', err)\n      alert('Failed to copy code to clipboard')\n    }\n  }\n\n  const handleDownloadCode = () => {\n    const blob = new Blob([generatedCode], { type: 'text/plain' })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = `EV_Secure_Config_${selectedStation}.h`\n    document.body.appendChild(a)\n    a.click()\n    document.body.removeChild(a)\n    URL.revokeObjectURL(url)\n  }\n\n  const generateNewApiKey = async () => {\n    if (!selectedStation) {\n      alert(\"Please select a station first\")\n      return\n    }\n\n    try {\n      const response = await fetch('/api/keys', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ stationId: selectedStation }),\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to generate API key')\n      }\n\n      const data = await response.json()\n      \n      setApiKeys(prev => ({\n        ...prev,\n        [selectedStation]: {\n          key: data.key,\n          status: \"active\",\n          lastUsed: new Date().toISOString(),\n        },\n      }))\n\n      alert(`New API key generated for ${selectedStation}`)\n    } catch (error) {\n      console.error('Error generating API key:', error)\n      alert('Failed to generate API key. Please try again.')\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-green-50\">\n      <SharedNavigation currentPage=\"code-generator\" />\n\n      <div className=\"lg:ml-64 p-4 sm:p-6 space-y-4 sm:space-y-6 max-w-full overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div className=\"min-w-0\">\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800 flex items-center gap-2\">\n              <Code className=\"w-6 h-6 sm:w-8 sm:h-8 text-purple-600 flex-shrink-0\" />\n              <span className=\"truncate\">Arduino Code Generator</span>\n            </h1>\n            <p className=\"text-gray-600 mt-1 text-sm sm:text-base\">\n              Generate customized Arduino code for your ESP32-S3 stations\n            </p>\n          </div>\n        </div>\n\n        {/* Station Selection */}\n        <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n          <CardHeader>\n            <CardTitle className=\"text-gray-800 flex items-center gap-2\">\n              <Zap className=\"w-5 h-5 text-blue-600\" />\n              Select Station & Generate Code\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">Select Station</label>\n                <Select value={selectedStation} onValueChange={setSelectedStation}>\n                  <SelectTrigger className=\"bg-white/50\">\n                    <SelectValue placeholder=\"Choose a station...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {Object.entries(stations).map(([id, station]) => (\n                      <SelectItem key={id} value={id}>\n                        {id} - {station.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-700\">API Key Status</label>\n                <div className=\"flex items-center gap-2\">\n                  {selectedStation && apiKeys[selectedStation] ? (\n                    <Badge className=\"bg-green-100 text-green-800 border-green-200\">\n                      <CheckCircle className=\"w-3 h-3 mr-1\" />\n                      Active\n                    </Badge>\n                  ) : selectedStation ? (\n                    <Badge className=\"bg-orange-100 text-orange-800 border-orange-200\">\n                      <AlertTriangle className=\"w-3 h-3 mr-1\" />\n                      No API Key\n                    </Badge>\n                  ) : (\n                    <Badge className=\"bg-gray-100 text-gray-800 border-gray-200\">\n                      Select Station\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {selectedStation && (\n              <div className=\"p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg border border-blue-200\">\n                <h4 className=\"font-semibold text-blue-800 mb-2\">\n                  {stations[selectedStation as StationId].name} ({selectedStation})\n                </h4>\n                <p className=\"text-sm text-blue-700 mb-3\">\n                  üìç {stations[selectedStation as StationId].location}\n                </p>\n                \n                {apiKeys[selectedStation] ? (\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Key className=\"w-4 h-4 text-blue-600\" />\n                      <span className=\"text-sm font-medium text-blue-800\">API Key:</span>\n                      <code className=\"text-xs bg-white/50 px-2 py-1 rounded border\">\n                        {apiKeys[selectedStation].key.substring(0, 20)}...\n                      </code>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        onClick={handleGenerateCode}\n                        disabled={isGenerating}\n                        className=\"bg-gradient-to-r from-green-500 to-blue-500 text-white\"\n                      >\n                        {isGenerating ? (\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                            <span>Generating...</span>\n                          </div>\n                        ) : (\n                          <>\n                            <FileCode className=\"w-4 h-4 mr-2\" />\n                            Generate Arduino Code\n                          </>\n                        )}\n                      </Button>\n                      <Button\n                        onClick={generateNewApiKey}\n                        variant=\"outline\"\n                        className=\"bg-white/50\"\n                      >\n                        <RefreshCw className=\"w-4 h-4 mr-2\" />\n                        Regenerate API Key\n                      </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm text-orange-700\">\n                      No API key found for this station. Generate one first.\n                    </p>\n                    <Button\n                      onClick={generateNewApiKey}\n                      className=\"bg-gradient-to-r from-orange-500 to-red-500 text-white\"\n                    >\n                      <Key className=\"w-4 h-4 mr-2\" />\n                      Generate API Key\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Generated Code */}\n        {generatedCode && (\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-gray-800 flex items-center gap-2\">\n                  <FileCode className=\"w-5 h-5 text-green-600\" />\n                  Generated Arduino Code for {selectedStation}\n                </CardTitle>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    onClick={handleCopyCode}\n                    variant=\"outline\"\n                    className=\"bg-white/50\"\n                  >\n                    {copySuccess ? (\n                      <>\n                        <CheckCircle className=\"w-4 h-4 mr-2 text-green-600\" />\n                        Copied!\n                      </>\n                    ) : (\n                      <>\n                        <Copy className=\"w-4 h-4 mr-2\" />\n                        Copy Code\n                      </>\n                    )}\n                  </Button>\n                  <Button\n                    onClick={handleDownloadCode}\n                    className=\"bg-gradient-to-r from-purple-500 to-blue-500 text-white\"\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Download .h File\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600 flex-shrink-0 mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-semibold text-green-800 mb-1\">Code Generated Successfully!</h4>\n                      <p className=\"text-sm text-green-700\">\n                        This code is customized for station <strong>{selectedStation}</strong> with the correct API key.\n                        Copy this code and paste it into your <code>EV_Secure_Config.h</code> file in Arduino IDE.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"relative\">\n                  <Textarea\n                    value={generatedCode}\n                    readOnly\n                    className=\"font-mono text-xs bg-gray-900 text-green-400 border-gray-700 min-h-96 max-h-96 overflow-y-auto\"\n                    placeholder=\"Generated code will appear here...\"\n                  />\n                  <div className=\"absolute top-2 right-2\">\n                    <Badge className=\"bg-blue-100 text-blue-800 border-blue-200\">\n                      {selectedStation} Configuration\n                    </Badge>\n                  </div>\n                </div>\n\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Settings className=\"w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-semibold text-blue-800 mb-1\">Upload Instructions</h4>\n                      <ol className=\"text-sm text-blue-700 space-y-1 list-decimal list-inside\">\n                        <li>Copy the generated code above</li>\n                        <li>Open Arduino IDE</li>\n                        <li>Open your EV-Secure project</li>\n                        <li>Open the file <code>EV_Secure_Config.h</code></li>\n                        <li>Replace ALL content with the copied code</li>\n                        <li>Update your WiFi credentials in the code</li>\n                        <li>Save and upload to your ESP32-S3 device</li>\n                      </ol>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* API Key Management */}\n        <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n          <CardHeader>\n            <CardTitle className=\"text-gray-800 flex items-center gap-2\">\n              <Key className=\"w-5 h-5 text-orange-600\" />\n              Current API Keys\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {Object.entries(stations).map(([stationId, station]) => (\n                <div\n                  key={stationId}\n                  className={`p-4 rounded-lg border transition-all ${\n                    selectedStation === stationId\n                      ? \"bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200\"\n                      : \"bg-gray-50 border-gray-200\"\n                  }`}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-semibold text-gray-800\">{station.name}</h4>\n                    <Badge\n                      variant={apiKeys[stationId]?.status === \"active\" ? \"default\" : \"secondary\"}\n                      className={\n                        apiKeys[stationId]?.status === \"active\"\n                          ? \"bg-green-100 text-green-800\"\n                          : \"bg-gray-100 text-gray-800\"\n                      }\n                    >\n                      {stationId}\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-gray-600 mb-2\">{station.location}</p>\n                  {apiKeys[stationId] ? (\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                        <span className=\"text-sm text-green-700\">API Key Active</span>\n                      </div>\n                      <code className=\"text-xs bg-white/50 px-2 py-1 rounded border block\">\n                        {apiKeys[stationId].key.substring(0, 25)}...\n                      </code>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center gap-2\">\n                      <AlertTriangle className=\"w-4 h-4 text-orange-600\" />\n                      <span className=\"text-sm text-orange-700\">No API Key</span>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Instructions */}\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <AlertTriangle className=\"w-5 h-5 text-yellow-600 flex-shrink-0 mt-0.5\" />\n            <div>\n              <h4 className=\"font-semibold text-yellow-800 mb-1\">How to Use</h4>\n              <ol className=\"text-sm text-yellow-700 space-y-1 list-decimal list-inside\">\n                <li>Select a station from the dropdown above</li>\n                <li>Make sure the station has an active API key (generate one if needed)</li>\n                <li>Click \"Generate Arduino Code\" to create customized code</li>\n                <li>Copy the generated code and paste it into your Arduino IDE</li>\n                <li>Update WiFi credentials and upload to your ESP32-S3</li>\n                <li>Your station will now send data to the dashboard with the correct API key</li>\n              </ol>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":28536},"app/login/page.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Zap, Eye, EyeOff, Shield, Lock, Mail, AlertCircle, UserCheck, Settings, Phone } from \"lucide-react\"\nimport Link from \"next/link\"\nimport { useRouter } from \"next/navigation\"\n\nexport default function LoginPage() {\n  const [showPassword, setShowPassword] = useState(false)\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [showForgotPassword, setShowForgotPassword] = useState(false)\n  const [otpSent, setOtpSent] = useState(false)\n  const [otp, setOtp] = useState(\"\")\n  const [phoneNumber, setPhoneNumber] = useState(\"\")\n  const [loginType, setLoginType] = useState<\"user\" | \"admin\">(\"user\")\n  const router = useRouter()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n    setError(\"\")\n\n    // Simulate login validation\n    if (!email || !password) {\n      setError(\"Please fill in all fields\")\n      setIsLoading(false)\n      return\n    }\n\n    // Simulate API call\n    setTimeout(() => {\n      let isValidLogin = false\n      let userRole = \"end_user\"\n\n      if (loginType === \"admin\") {\n        // Admin login validation\n        if (email === \"admin@evsecure.com\" && password === \"admin123\") {\n          isValidLogin = true\n          userRole = \"admin\"\n        } else if (email === \"harshaltapre27@gmail.com\" && password === \"admin123\") {\n          isValidLogin = true\n          userRole = \"super_admin\"\n        }\n      } else {\n        // User login validation - all registered users are end_users\n        if (email.includes(\"@\") && password.length >= 6) {\n          isValidLogin = true\n          userRole = \"end_user\"\n        }\n      }\n\n      if (isValidLogin) {\n        // Store user session\n        const userSession = {\n          email,\n          role: userRole,\n          loginTime: new Date().toISOString(),\n          accessLevel: userRole === \"end_user\" ? \"limited\" : \"full\",\n        }\n        localStorage.setItem(\"userSession\", JSON.stringify(userSession))\n\n        // Redirect based on role\n        if (userRole === \"end_user\") {\n          router.push(\"/user-dashboard\") // Limited dashboard for end users\n        } else {\n          router.push(\"/\") // Full dashboard for admins\n        }\n      } else {\n        setError(\"Invalid email or password\")\n      }\n      setIsLoading(false)\n    }, 1500)\n  }\n\n  const handleForgotPassword = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n    setError(\"\")\n\n    if (!phoneNumber) {\n      setError(\"Please enter your registered phone number\")\n      setIsLoading(false)\n      return\n    }\n\n    // Validate phone number format\n    const cleanPhone = phoneNumber.replace(/\\D/g, \"\")\n    if (cleanPhone.length !== 10) {\n      setError(\"Please enter a valid 10-digit phone number\")\n      setIsLoading(false)\n      return\n    }\n\n    // Simulate OTP sending to phone\n    setTimeout(() => {\n      setOtpSent(true)\n      setIsLoading(false)\n      // In real app, this would send SMS OTP\n      console.log(`OTP sent to phone: ${phoneNumber}`)\n    }, 1000)\n  }\n\n  const handleOtpVerification = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n    setError(\"\")\n\n    if (!otp || otp.length !== 6) {\n      setError(\"Please enter a valid 6-digit OTP\")\n      setIsLoading(false)\n      return\n    }\n\n    // Simulate OTP verification\n    setTimeout(() => {\n      if (otp === \"123456\") {\n        alert(\"OTP verified! You can now reset your password.\")\n        setShowForgotPassword(false)\n        setOtpSent(false)\n        setOtp(\"\")\n        setPhoneNumber(\"\")\n      } else {\n        setError(\"Invalid OTP. Please try again.\")\n      }\n      setIsLoading(false)\n    }, 1000)\n  }\n\n  const formatPhoneDisplay = (phone: string) => {\n    const cleaned = phone.replace(/\\D/g, \"\")\n    if (cleaned.length >= 6) {\n      return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6, 10)}`\n    } else if (cleaned.length >= 3) {\n      return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3)}`\n    }\n    return cleaned\n  }\n\n  const handlePhoneChange = (value: string) => {\n    const formatted = value.replace(/\\D/g, \"\").slice(0, 10)\n    setPhoneNumber(formatted)\n  }\n\n  if (showForgotPassword) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-green-50 flex items-center justify-center p-4\">\n        <div className=\"w-full max-w-md space-y-8\">\n          {/* Header */}\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center space-x-2 mb-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-green-400 to-purple-400 rounded-xl flex items-center justify-center\">\n                <Zap className=\"w-7 h-7 text-white\" />\n              </div>\n              <span className=\"text-3xl font-bold bg-gradient-to-r from-green-600 to-purple-600 bg-clip-text text-transparent\">\n                EV-Secure\n              </span>\n            </div>\n            <h2 className=\"text-2xl font-bold text-gray-800\">{otpSent ? \"Verify OTP\" : \"Forgot Password\"}</h2>\n            <p className=\"text-gray-600 mt-2\">\n              {otpSent\n                ? \"Enter the 6-digit code sent to your phone\"\n                : \"Enter your registered phone number to receive OTP\"}\n            </p>\n          </div>\n\n          {/* Forgot Password Form */}\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-2xl\">\n            <CardHeader className=\"space-y-1\">\n              <CardTitle className=\"text-xl text-center text-gray-800\">\n                {otpSent ? \"Enter OTP\" : \"Reset Password\"}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {!otpSent ? (\n                <form onSubmit={handleForgotPassword} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phoneNumber\" className=\"text-gray-700\">\n                      Phone Number\n                    </Label>\n                    <div className=\"relative\">\n                      <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                      <Input\n                        id=\"phoneNumber\"\n                        type=\"tel\"\n                        \n                        value={formatPhoneDisplay(phoneNumber)}\n                        onChange={(e) => handlePhoneChange(e.target.value)}\n                        className=\"pl-10 bg-white/50 border-gray-200 focus:border-purple-400 focus:ring-purple-400\"\n                        required\n                      />\n                    </div>\n                    <p className=\"text-xs text-gray-500\">Enter the phone number registered with your account</p>\n                  </div>\n\n                  {error && (\n                    <div className=\"flex items-center space-x-2 text-red-600 text-sm\">\n                      <AlertCircle className=\"w-4 h-4\" />\n                      <span>{error}</span>\n                    </div>\n                  )}\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-gradient-to-r from-green-500 to-purple-500 hover:from-green-600 hover:to-purple-600 text-white font-medium py-2.5\"\n                    disabled={isLoading}\n                  >\n                    {isLoading ? (\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                        <span>Sending OTP...</span>\n                      </div>\n                    ) : (\n                      \"Send OTP to Phone\"\n                    )}\n                  </Button>\n                </form>\n              ) : (\n                <form onSubmit={handleOtpVerification} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"otp\" className=\"text-gray-700\">\n                      6-Digit OTP\n                    </Label>\n                    <Input\n                      id=\"otp\"\n                      type=\"text\"\n                      placeholder=\"Enter 6-digit code\"\n                      value={otp}\n                      onChange={(e) => setOtp(e.target.value.replace(/\\D/g, \"\").slice(0, 6))}\n                      className=\"text-center text-2xl tracking-widest bg-white/50 border-gray-200 focus:border-purple-400 focus:ring-purple-400\"\n                      maxLength={6}\n                      required\n                    />\n                    <p className=\"text-xs text-gray-500\">OTP sent to {formatPhoneDisplay(phoneNumber)}</p>\n                  </div>\n\n                  {error && (\n                    <div className=\"flex items-center space-x-2 text-red-600 text-sm\">\n                      <AlertCircle className=\"w-4 h-4\" />\n                      <span>{error}</span>\n                    </div>\n                  )}\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-gradient-to-r from-green-500 to-purple-500 hover:from-green-600 hover:to-purple-600 text-white font-medium py-2.5\"\n                    disabled={isLoading}\n                  >\n                    {isLoading ? (\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                        <span>Verifying...</span>\n                      </div>\n                    ) : (\n                      \"Verify OTP\"\n                    )}\n                  </Button>\n\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    className=\"w-full bg-transparent\"\n                    onClick={() => {\n                      setOtpSent(false)\n                      setOtp(\"\")\n                      setError(\"\")\n                    }}\n                  >\n                    Resend OTP\n                  </Button>\n                </form>\n              )}\n\n              <div className=\"mt-6 text-center\">\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => {\n                    setShowForgotPassword(false)\n                    setOtpSent(false)\n                    setOtp(\"\")\n                    setPhoneNumber(\"\")\n                    setError(\"\")\n                  }}\n                  className=\"text-purple-600 hover:text-purple-800\"\n                >\n                  Back to Login\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-green-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-8\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-green-400 to-purple-400 rounded-xl flex items-center justify-center\">\n              <Zap className=\"w-7 h-7 text-white\" />\n            </div>\n            <span className=\"text-3xl font-bold bg-gradient-to-r from-green-600 to-purple-600 bg-clip-text text-transparent\">\n              EV-Secure\n            </span>\n          </div>\n          <h2 className=\"text-2xl font-bold text-gray-800\">Welcome Back</h2>\n          <p className=\"text-gray-600 mt-2\">Sign in to your EV-Secure account</p>\n        </div>\n\n        {/* Login Type Toggle */}\n        <div className=\"flex bg-gray-100 rounded-lg p-1\">\n          <button\n            type=\"button\"\n            onClick={() => setLoginType(\"user\")}\n            className={`flex-1 flex items-center justify-center space-x-2 py-2 px-4 rounded-md transition-all ${\n              loginType === \"user\" ? \"bg-white shadow-sm text-gray-800\" : \"text-gray-600 hover:text-gray-800\"\n            }`}\n          >\n            <UserCheck className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">User Login</span>\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => setLoginType(\"admin\")}\n            className={`flex-1 flex items-center justify-center space-x-2 py-2 px-4 rounded-md transition-all ${\n              loginType === \"admin\" ? \"bg-white shadow-sm text-gray-800\" : \"text-gray-600 hover:text-gray-800\"\n            }`}\n          >\n            <Settings className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Admin Login</span>\n          </button>\n        </div>\n\n        {/* Login Form */}\n        <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-2xl\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-xl text-center text-gray-800\">\n              {loginType === \"admin\" ? \"Admin Sign In\" : \"User Sign In\"}\n            </CardTitle>\n            <CardDescription className=\"text-center text-gray-600\">\n              {loginType === \"admin\"\n                ? \"Access full dashboard and system controls\"\n                : \"Access charging stations via QR code scanning\"}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-gray-700\">\n                  Email\n                </Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"pl-10 bg-white/50 border-gray-200 focus:border-purple-400 focus:ring-purple-400\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-gray-700\">\n                  Password\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Enter your password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"pl-10 pr-10 bg-white/50 border-gray-200 focus:border-purple-400 focus:ring-purple-400\"\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  >\n                    {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    id=\"remember\"\n                    type=\"checkbox\"\n                    className=\"w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500\"\n                  />\n                  <Label htmlFor=\"remember\" className=\"text-sm text-gray-600\">\n                    Remember me\n                  </Label>\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  onClick={() => setShowForgotPassword(true)}\n                  className=\"text-sm text-purple-600 hover:text-purple-800 p-0 h-auto\"\n                >\n                  Forgot password?\n                </Button>\n              </div>\n\n              {error && (\n                <div className=\"flex items-center space-x-2 text-red-600 text-sm\">\n                  <AlertCircle className=\"w-4 h-4\" />\n                  <span>{error}</span>\n                </div>\n              )}\n\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-gradient-to-r from-green-500 to-purple-500 hover:from-green-600 hover:to-purple-600 text-white font-medium py-2.5\"\n                disabled={isLoading}\n              >\n                {isLoading ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                    <span>Signing in...</span>\n                  </div>\n                ) : (\n                  \"Sign In\"\n                )}\n              </Button>\n            </form>\n\n            {loginType === \"user\" && (\n              <div className=\"mt-6 text-center\">\n                <p className=\"text-sm text-gray-600\">\n                  Don't have an account?{\" \"}\n                  <Link href=\"/register\" className=\"text-purple-600 hover:text-purple-800 font-medium\">\n                    Sign up\n                  </Link>\n                </p>\n              </div>\n            )}\n\n            {/* Demo Credentials */}\n            <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n              <p className=\"text-xs text-blue-700 text-center\">\n                <strong>Demo Credentials:</strong>\n                <br />\n                {loginType === \"admin\" ? (\n                  <>\n                    Super Admin: harshaltapre27@gmail.com / admin123\n                    <br />\n                    Admin: admin@evsecure.com / admin123\n                  </>\n                ) : (\n                  \"User: any valid email / password (6+ chars)\"\n                )}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Security Notice */}\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <Shield className=\"w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n            <div>\n              <h3 className=\"text-sm font-medium text-blue-800\">Secure Access</h3>\n              <p className=\"text-sm text-blue-700 mt-1\">\n                Your connection is encrypted and secured. Use phone number for password recovery.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":19118},"app/map/loading.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\n\nexport default function MapLoading() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-green-50\">\n      <div className=\"lg:ml-64 p-6 space-y-6\">\n        {/* Header Skeleton */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <Skeleton className=\"h-8 w-56 mb-2\" />\n            <Skeleton className=\"h-4 w-72\" />\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Skeleton className=\"h-9 w-28\" />\n            <Skeleton className=\"h-9 w-32\" />\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Map Container Skeleton */}\n          <div className=\"lg:col-span-3\">\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg h-[600px]\">\n              <CardContent className=\"p-0 h-full\">\n                <Skeleton className=\"w-full h-full rounded-lg\" />\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Station List Sidebar Skeleton */}\n          <div className=\"space-y-4\">\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n              <CardHeader>\n                <CardTitle>\n                  <Skeleton className=\"h-6 w-24\" />\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {Array.from({ length: 5 }).map((_, i) => (\n                  <div key={i} className=\"p-3 rounded-lg border bg-white/50\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Skeleton className=\"h-4 w-32\" />\n                      <Skeleton className=\"w-4 h-4 rounded-full\" />\n                    </div>\n                    <Skeleton className=\"h-3 w-16 mb-2\" />\n                    <div className=\"flex items-center justify-between\">\n                      <Skeleton className=\"h-3 w-20\" />\n                      <Skeleton className=\"h-3 w-12\" />\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Selected Station Details Skeleton */}\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n              <CardHeader>\n                <CardTitle>\n                  <Skeleton className=\"h-6 w-32\" />\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div>\n                  <Skeleton className=\"h-5 w-40 mb-1\" />\n                  <Skeleton className=\"h-4 w-16\" />\n                </div>\n                <div className=\"space-y-1\">\n                  <Skeleton className=\"h-4 w-full\" />\n                  <Skeleton className=\"h-4 w-32\" />\n                  <Skeleton className=\"h-4 w-36\" />\n                </div>\n                <Skeleton className=\"h-6 w-20 rounded-full\" />\n                <div className=\"pt-2 space-y-2\">\n                  <Skeleton className=\"h-9 w-full\" />\n                  <Skeleton className=\"h-9 w-full\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":3385},"app/map/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport {\n  Map,\n  MapPin,\n  Zap,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Navigation,\n  Layers,\n  Search,\n  Filter,\n  Locate,\n  Route,\n  Car,\n  Wifi,\n} from \"lucide-react\"\nimport { SharedNavigation } from \"@/components/shared-navigation\"\n\nconst mapStations = [\n  {\n    id: \"ST001\",\n    name: \"Downtown Plaza\",\n    status: \"active\",\n    lat: 40.7128,\n    lng: -74.006,\n    address: \"123 Main St, City Center\",\n    connectedUsers: 2,\n    power: 7.8,\n    carConnected: true,\n    carModel: \"Tesla Model 3\",\n    chargingProgress: 65,\n    apiKey: \"active\",\n    lastSync: \"2 min ago\",\n  },\n  {\n    id: \"ST002\",\n    name: \"Mall Parking\",\n    status: \"threat\",\n    lat: 40.7589,\n    lng: -73.9851,\n    address: \"456 Commerce Ave, Mall Plaza\",\n    connectedUsers: 1,\n    power: 7.6,\n    carConnected: true,\n    carModel: \"BMW i4\",\n    chargingProgress: 0,\n    apiKey: \"active\",\n    lastSync: \"1 min ago\",\n  },\n  {\n    id: \"ST003\",\n    name: \"Airport Terminal\",\n    status: \"offline\",\n    lat: 40.6892,\n    lng: -74.1745,\n    address: \"789 Airport Rd, Terminal B\",\n    connectedUsers: 0,\n    power: 0,\n    carConnected: false,\n    carModel: null,\n    chargingProgress: 0,\n    apiKey: \"inactive\",\n    lastSync: \"15 min ago\",\n  },\n  {\n    id: \"ST004\",\n    name: \"University Campus\",\n    status: \"active\",\n    lat: 40.8176,\n    lng: -73.9782,\n    address: \"321 University Blvd, Campus North\",\n    connectedUsers: 3,\n    power: 6.9,\n    carConnected: true,\n    carModel: \"Nissan Leaf\",\n    chargingProgress: 45,\n    apiKey: \"active\",\n    lastSync: \"30 sec ago\",\n  },\n  {\n    id: \"ST005\",\n    name: \"Business Park\",\n    status: \"active\",\n    lat: 40.7282,\n    lng: -73.7949,\n    address: \"555 Corporate Dr, Business Park\",\n    connectedUsers: 1,\n    power: 7.2,\n    carConnected: false,\n    carModel: null,\n    chargingProgress: 0,\n    apiKey: \"active\",\n    lastSync: \"1 min ago\",\n  },\n]\n\nexport default function MapPage() {\n  const [selectedStation, setSelectedStation] = useState<string | null>(null)\n  const [mapView, setMapView] = useState(\"satellite\")\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [statusFilter, setStatusFilter] = useState(\"all\")\n\n  const filteredStations = mapStations.filter((station) => {\n    const matchesSearch =\n      station.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      station.address.toLowerCase().includes(searchTerm.toLowerCase())\n    const matchesFilter = statusFilter === \"all\" || station.status === statusFilter\n    return matchesSearch && matchesFilter\n  })\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"text-green-600 bg-green-100\"\n      case \"threat\":\n        return \"text-red-600 bg-red-100\"\n      case \"offline\":\n        return \"text-gray-600 bg-gray-100\"\n      default:\n        return \"text-gray-600 bg-gray-100\"\n    }\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <CheckCircle className=\"w-4 h-4\" />\n      case \"threat\":\n        return <AlertTriangle className=\"w-4 h-4\" />\n      case \"offline\":\n        return <XCircle className=\"w-4 h-4\" />\n      default:\n        return <XCircle className=\"w-4 h-4\" />\n    }\n  }\n\n  const selectedStationData = filteredStations.find((s) => s.id === selectedStation)\n\n  const centerMap = () => {\n    // Simulate centering map to user location or all stations\n    console.log(\"Centering map...\")\n  }\n\n  const toggleMapView = () => {\n    setMapView(mapView === \"satellite\" ? \"street\" : \"satellite\")\n  }\n\n  const getDirections = (station: any) => {\n    // Simulate opening directions in maps app\n    const url = `https://www.google.com/maps/dir/?api=1&destination=${station.lat},${station.lng}`\n    window.open(url, \"_blank\")\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-green-50\">\n      <SharedNavigation currentPage=\"map\" />\n\n      <div className=\"lg:ml-64 p-4 sm:p-6 space-y-4 sm:space-y-6\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800 flex items-center gap-2\">\n              <Map className=\"w-6 h-6 sm:w-8 sm:h-8 text-blue-600\" />\n              Station Map View\n            </h1>\n            <p className=\"text-gray-600 mt-1\">Geographic overview of your charging network</p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" size=\"sm\" className=\"bg-white/80\" onClick={centerMap}>\n              <Locate className=\"w-4 h-4 mr-2\" />\n              Center Map\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" className=\"bg-white/80\" onClick={toggleMapView}>\n              <Layers className=\"w-4 h-4 mr-2\" />\n              {mapView === \"satellite\" ? \"Street View\" : \"Satellite\"}\n            </Button>\n          </div>\n        </div>\n\n        {/* Search and Filter */}\n        <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search stations by name or location...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 bg-white/50\"\n                />\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Filter className=\"w-4 h-4 text-gray-500\" />\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"bg-white/50 w-40\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"threat\">Threats</SelectItem>\n                    <SelectItem value=\"offline\">Offline</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Enhanced Map Container */}\n          <div className=\"lg:col-span-3\">\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg h-[600px]\">\n              <CardContent className=\"p-0 h-full\">\n                <div className=\"relative h-full bg-gradient-to-br from-blue-100 to-green-100 rounded-lg overflow-hidden\">\n                  {/* Enhanced Mock Map Background */}\n                  <div className=\"absolute inset-0 bg-gradient-to-br from-blue-200 via-green-100 to-blue-100 opacity-50\"></div>\n\n                  {/* Grid overlay for more realistic map feel */}\n                  <div className=\"absolute inset-0 opacity-20\">\n                    <div className=\"grid grid-cols-12 grid-rows-12 h-full\">\n                      {Array.from({ length: 144 }).map((_, i) => (\n                        <div key={i} className=\"border border-gray-300\"></div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Map Controls */}\n                  <div className=\"absolute top-4 left-4 z-10 space-y-2\">\n                    <Button variant=\"outline\" size=\"icon\" className=\"bg-white/90 shadow-lg\">\n                      <Search className=\"w-4 h-4\" />\n                    </Button>\n                    <div className=\"bg-white/90 rounded-lg p-2 shadow-lg\">\n                      <div className=\"space-y-1\">\n                        <Button variant=\"ghost\" size=\"sm\" className=\"w-8 h-8 p-0 text-lg font-bold\">\n                          +\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"w-8 h-8 p-0 text-lg font-bold\">\n                          -\n                        </Button>\n                      </div>\n                    </div>\n                    <Button variant=\"outline\" size=\"icon\" className=\"bg-white/90 shadow-lg\" onClick={centerMap}>\n                      <Navigation className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n\n                  {/* Enhanced Station Markers */}\n                  {filteredStations.map((station, index) => (\n                    <div\n                      key={station.id}\n                      className={`absolute cursor-pointer transform -translate-x-1/2 -translate-y-1/2 transition-all duration-200 hover:scale-110 ${\n                        selectedStation === station.id ? \"scale-125 z-20\" : \"z-10\"\n                      }`}\n                      style={{\n                        left: `${20 + index * 15}%`,\n                        top: `${30 + index * 10}%`,\n                      }}\n                      onClick={() => setSelectedStation(station.id)}\n                    >\n                      <div\n                        className={`w-10 h-10 rounded-full border-3 border-white shadow-lg flex items-center justify-center ${getStatusColor(station.status)} relative`}\n                      >\n                        <Zap className=\"w-5 h-5\" />\n                        {station.carConnected && (\n                          <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-blue-500 rounded-full flex items-center justify-center\">\n                            <Car className=\"w-2 h-2 text-white\" />\n                          </div>\n                        )}\n                      </div>\n                      {selectedStation === station.id && (\n                        <div className=\"absolute top-12 left-1/2 transform -translate-x-1/2 bg-white rounded-lg shadow-xl p-4 min-w-64 z-30 border border-gray-200\">\n                          <div className=\"text-sm font-semibold text-gray-800 mb-1\">{station.name}</div>\n                          <div className=\"text-xs text-gray-600 mb-2\">{station.address}</div>\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <Badge className={`${getStatusColor(station.status)} border text-xs`}>\n                              {station.status}\n                            </Badge>\n                            <span className=\"text-xs text-gray-500\">{station.power}kW</span>\n                          </div>\n                          {station.carConnected && (\n                            <div className=\"text-xs text-blue-600 mb-2\">\n                              üöó {station.carModel} - {station.chargingProgress}%\n                            </div>\n                          )}\n                          <div className=\"flex items-center gap-1 text-xs text-gray-500\">\n                            <Wifi className=\"w-3 h-3\" />\n                            <span>API: {station.apiKey}</span>\n                            <span>‚Ä¢ {station.lastSync}</span>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n\n                  {/* Enhanced Map Legend */}\n                  <div className=\"absolute bottom-4 left-4 bg-white/95 rounded-lg p-4 shadow-lg border border-gray-200\">\n                    <h4 className=\"text-sm font-semibold text-gray-800 mb-3\">Station Status</h4>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-2 text-xs\">\n                        <div className=\"w-4 h-4 rounded-full bg-green-500 flex items-center justify-center\">\n                          <Zap className=\"w-2 h-2 text-white\" />\n                        </div>\n                        <span>Active ({filteredStations.filter((s) => s.status === \"active\").length})</span>\n                      </div>\n                      <div className=\"flex items-center gap-2 text-xs\">\n                        <div className=\"w-4 h-4 rounded-full bg-red-500 flex items-center justify-center\">\n                          <Zap className=\"w-2 h-2 text-white\" />\n                        </div>\n                        <span>Threat ({filteredStations.filter((s) => s.status === \"threat\").length})</span>\n                      </div>\n                      <div className=\"flex items-center gap-2 text-xs\">\n                        <div className=\"w-4 h-4 rounded-full bg-gray-500 flex items-center justify-center\">\n                          <Zap className=\"w-2 h-2 text-white\" />\n                        </div>\n                        <span>Offline ({filteredStations.filter((s) => s.status === \"offline\").length})</span>\n                      </div>\n                      <div className=\"flex items-center gap-2 text-xs pt-1 border-t border-gray-200\">\n                        <Car className=\"w-3 h-3 text-blue-500\" />\n                        <span>Car Connected</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Map Info */}\n                  <div className=\"absolute top-4 right-4 bg-white/95 rounded-lg p-3 shadow-lg border border-gray-200\">\n                    <div className=\"text-xs text-gray-600\">\n                      <div>View: {mapView}</div>\n                      <div>Stations: {filteredStations.length}</div>\n                      <div>Active: {filteredStations.filter((s) => s.status === \"active\").length}</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Enhanced Station List Sidebar */}\n          <div className=\"space-y-4\">\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-gray-800\">Station List</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3 max-h-96 overflow-y-auto\">\n                {filteredStations.map((station) => (\n                  <div\n                    key={station.id}\n                    className={`p-3 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n                      selectedStation === station.id\n                        ? \"bg-blue-50 border-blue-200 shadow-md\"\n                        : \"bg-white/50 border-gray-200 hover:bg-white/80\"\n                    }`}\n                    onClick={() => setSelectedStation(station.id)}\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"font-semibold text-gray-800 text-sm\">{station.name}</h4>\n                      <div className=\"flex items-center gap-1\">{getStatusIcon(station.status)}</div>\n                    </div>\n                    <p className=\"text-xs text-gray-600 mb-2\">{station.id}</p>\n                    <div className=\"flex items-center justify-between text-xs mb-2\">\n                      <span className=\"text-gray-500\">Users: {station.connectedUsers}</span>\n                      <span className=\"text-gray-500\">{station.power}kW</span>\n                    </div>\n                    {station.carConnected && (\n                      <div className=\"flex items-center gap-1 text-xs text-blue-600 mb-1\">\n                        <Car className=\"w-3 h-3\" />\n                        <span>{station.carModel}</span>\n                      </div>\n                    )}\n                    <div className=\"flex items-center gap-1 text-xs text-gray-500\">\n                      <Wifi className=\"w-3 h-3\" />\n                      <span>Last: {station.lastSync}</span>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Enhanced Selected Station Details */}\n            {selectedStationData && (\n              <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg text-gray-800\">Station Details</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-semibold text-gray-800\">{selectedStationData.name}</h4>\n                    <p className=\"text-sm text-gray-600\">{selectedStationData.id}</p>\n                  </div>\n\n                  <div className=\"text-sm space-y-2\">\n                    <p className=\"text-gray-600\">üìç {selectedStationData.address}</p>\n                    <p className=\"text-gray-600\">‚ö° Power: {selectedStationData.power}kW</p>\n                    <p className=\"text-gray-600\">üë• Connected: {selectedStationData.connectedUsers} users</p>\n\n                    {selectedStationData.carConnected && (\n                      <div className=\"p-2 bg-blue-50 rounded-lg border border-blue-200\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <Car className=\"w-4 h-4 text-blue-600\" />\n                          <span className=\"text-sm font-medium text-blue-800\">{selectedStationData.carModel}</span>\n                        </div>\n                        <div className=\"w-full bg-blue-200 rounded-full h-2\">\n                          <div\n                            className=\"bg-blue-600 h-2 rounded-full\"\n                            style={{ width: `${selectedStationData.chargingProgress}%` }}\n                          ></div>\n                        </div>\n                        <p className=\"text-xs text-blue-600 mt-1\">{selectedStationData.chargingProgress}% charged</p>\n                      </div>\n                    )}\n                  </div>\n\n                  <Badge className={`${getStatusColor(selectedStationData.status)} border`}>\n                    {selectedStationData.status.toUpperCase()}\n                  </Badge>\n\n                  <div className=\"pt-2 space-y-2\">\n                    <Button size=\"sm\" className=\"w-full bg-gradient-to-r from-blue-500 to-purple-500 text-white\">\n                      <MapPin className=\"w-4 h-4 mr-2\" />\n                      View Details\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"w-full bg-white/50\"\n                      onClick={() => getDirections(selectedStationData)}\n                    >\n                      <Route className=\"w-4 h-4 mr-2\" />\n                      Get Directions\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":19165},"app/profile/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { SharedNavigation } from \"@/components/shared-navigation\"\nimport {\n  User,\n  Mail,\n  Phone,\n  MapPin,\n  Calendar,\n  Shield,\n  Activity,\n  Settings,\n  Camera,\n  Save,\n  Edit,\n  Key,\n  Clock,\n  Briefcase,\n} from \"lucide-react\"\n\nexport default function ProfilePage() {\n  const [isEditing, setIsEditing] = useState(false)\n  const [profile, setProfile] = useState({\n    name: \"Harshal Tapre\",\n    email: \"harshaltapre27@gmail.com\",\n    phone: \"+91 9322184006\",\n    location: \"Shahapur, Bhandara, Maharashtra, India\",\n    role: \"Operations & Technical Lead\",\n    department: \"EV-Secure Project\",\n    joinDate: \"2023-01-15\",\n    bio: \"Frontend Developer | Electronics & ML Enthusiast. Experienced in EV infrastructure prototyping, frontend dashboards, embedded systems, and machine learning integration. Passionate about sustainable tech, AI-driven systems, and smart energy solutions.\",\n  })\n\n  const activityLog = [\n    { action: \"Updated ESP32-S3 ML model parameters\", timestamp: \"2024-01-15 14:30:25\", type: \"security\" },\n    { action: \"Deployed new dashboard features\", timestamp: \"2024-01-15 13:45:12\", type: \"config\" },\n    { action: \"Optimized charging station algorithms\", timestamp: \"2024-01-15 12:20:08\", type: \"report\" },\n    { action: \"Resolved EV infrastructure connectivity issue\", timestamp: \"2024-01-15 11:15:33\", type: \"security\" },\n    { action: \"Enhanced ML threat detection accuracy\", timestamp: \"2024-01-14 16:45:22\", type: \"config\" },\n  ]\n\n  const permissions = [\n    { name: \"EV Station Management\", granted: true, description: \"Full control over charging infrastructure\" },\n    { name: \"ML Model Configuration\", granted: true, description: \"Configure and optimize ML algorithms\" },\n    { name: \"Frontend Dashboard Development\", granted: true, description: \"Develop and maintain user interfaces\" },\n    { name: \"ESP32-S3 Programming\", granted: true, description: \"Embedded systems development and deployment\" },\n    { name: \"System Architecture\", granted: true, description: \"Design and implement system architecture\" },\n    { name: \"Technical Documentation\", granted: true, description: \"Create and maintain technical documentation\" },\n  ]\n\n  const handleSave = () => {\n    setIsEditing(false)\n    // Save profile changes\n  }\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case \"security\":\n        return <Shield className=\"w-4 h-4 text-red-500\" />\n      case \"config\":\n        return <Settings className=\"w-4 h-4 text-blue-500\" />\n      case \"report\":\n        return <Activity className=\"w-4 h-4 text-green-500\" />\n      default:\n        return <Clock className=\"w-4 h-4 text-gray-500\" />\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-green-50\">\n      <SharedNavigation currentPage=\"profile\" />\n\n      <div className=\"lg:ml-64\">\n        <div className=\"p-4 sm:p-6 space-y-4 sm:space-y-6 max-w-full overflow-hidden\">\n          {/* Header */}\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n            <div className=\"min-w-0\">\n              <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800 flex items-center gap-2\">\n                <User className=\"w-6 h-6 sm:w-8 sm:h-8 text-blue-600 flex-shrink-0\" />\n                <span className=\"truncate\">User Profile</span>\n              </h1>\n              <p className=\"text-gray-600 mt-1 text-sm sm:text-base\">Manage your account and preferences</p>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              {isEditing ? (\n                <>\n                  <Button variant=\"outline\" onClick={() => setIsEditing(false)} className=\"bg-white/80\">\n                    Cancel\n                  </Button>\n                  <Button onClick={handleSave} className=\"bg-gradient-to-r from-green-500 to-blue-500 text-white\">\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Save Changes\n                  </Button>\n                </>\n              ) : (\n                <Button\n                  onClick={() => setIsEditing(true)}\n                  className=\"bg-gradient-to-r from-blue-500 to-purple-500 text-white\"\n                >\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Edit Profile\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* Profile Overview */}\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex flex-col sm:flex-row gap-6\">\n                <div className=\"flex flex-col items-center space-y-4\">\n                  <div className=\"relative\">\n                    <Avatar className=\"w-24 h-24 sm:w-32 sm:h-32\">\n                      <AvatarImage src=\"/placeholder.svg?height=128&width=128\" />\n                      <AvatarFallback className=\"text-2xl font-bold bg-gradient-to-r from-blue-500 to-purple-500 text-white\">\n                        HT\n                      </AvatarFallback>\n                    </Avatar>\n                    {isEditing && (\n                      <Button\n                        size=\"sm\"\n                        className=\"absolute -bottom-2 -right-2 rounded-full w-8 h-8 p-0 bg-blue-500 hover:bg-blue-600\"\n                      >\n                        <Camera className=\"w-4 h-4\" />\n                      </Button>\n                    )}\n                  </div>\n                  <Badge className=\"bg-gradient-to-r from-green-100 to-blue-100 text-green-800 border-green-200\">\n                    {profile.role}\n                  </Badge>\n                </div>\n\n                <div className=\"flex-1 space-y-4\">\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"name\" className=\"text-sm font-medium text-gray-700\">\n                        Full Name\n                      </Label>\n                      {isEditing ? (\n                        <Input\n                          id=\"name\"\n                          value={profile.name}\n                          onChange={(e) => setProfile((prev) => ({ ...prev, name: e.target.value }))}\n                          className=\"bg-white/50 mt-1\"\n                        />\n                      ) : (\n                        <p className=\"text-lg font-semibold text-gray-800 mt-1\">{profile.name}</p>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700\">\n                        Email Address\n                      </Label>\n                      {isEditing ? (\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          value={profile.email}\n                          onChange={(e) => setProfile((prev) => ({ ...prev, email: e.target.value }))}\n                          className=\"bg-white/50 mt-1\"\n                        />\n                      ) : (\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Mail className=\"w-4 h-4 text-gray-500\" />\n                          <p className=\"text-gray-800\">{profile.email}</p>\n                        </div>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"phone\" className=\"text-sm font-medium text-gray-700\">\n                        Phone Number\n                      </Label>\n                      {isEditing ? (\n                        <Input\n                          id=\"phone\"\n                          value={profile.phone}\n                          onChange={(e) => setProfile((prev) => ({ ...prev, phone: e.target.value }))}\n                          className=\"bg-white/50 mt-1\"\n                        />\n                      ) : (\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Phone className=\"w-4 h-4 text-gray-500\" />\n                          <p className=\"text-gray-800\">{profile.phone}</p>\n                        </div>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"location\" className=\"text-sm font-medium text-gray-700\">\n                        Location\n                      </Label>\n                      {isEditing ? (\n                        <Input\n                          id=\"location\"\n                          value={profile.location}\n                          onChange={(e) => setProfile((prev) => ({ ...prev, location: e.target.value }))}\n                          className=\"bg-white/50 mt-1\"\n                        />\n                      ) : (\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <MapPin className=\"w-4 h-4 text-gray-500\" />\n                          <p className=\"text-gray-800\">{profile.location}</p>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"bio\" className=\"text-sm font-medium text-gray-700\">\n                      Bio\n                    </Label>\n                    {isEditing ? (\n                      <Textarea\n                        id=\"bio\"\n                        value={profile.bio}\n                        onChange={(e) => setProfile((prev) => ({ ...prev, bio: e.target.value }))}\n                        className=\"bg-white/50 mt-1\"\n                        rows={3}\n                      />\n                    ) : (\n                      <p className=\"text-gray-700 mt-1 text-sm leading-relaxed\">{profile.bio}</p>\n                    )}\n                  </div>\n\n                  <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                    <div className=\"flex items-center gap-1\">\n                      <Calendar className=\"w-4 h-4\" />\n                      <span>Joined {new Date(profile.joinDate).toLocaleDateString()}</span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <Briefcase className=\"w-4 h-4\" />\n                      <span>{profile.department}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Profile Tabs */}\n          <Tabs defaultValue=\"activity\" className=\"space-y-6\">\n            <TabsList className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg w-full sm:w-auto\">\n              <TabsTrigger value=\"activity\" className=\"text-xs sm:text-sm\">\n                Activity Log\n              </TabsTrigger>\n              <TabsTrigger value=\"permissions\" className=\"text-xs sm:text-sm\">\n                Permissions\n              </TabsTrigger>\n              <TabsTrigger value=\"security\" className=\"text-xs sm:text-sm\">\n                Security\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"activity\" className=\"space-y-6\">\n              <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"text-gray-800\">Recent Activity</CardTitle>\n                  <p className=\"text-sm text-gray-600\">Your recent actions and system interactions</p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {activityLog.map((activity, index) => (\n                      <div\n                        key={index}\n                        className=\"flex items-center gap-4 p-3 bg-gradient-to-r from-gray-50 to-blue-50 rounded-lg\"\n                      >\n                        <div className=\"flex-shrink-0\">{getActivityIcon(activity.type)}</div>\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-sm font-medium text-gray-800 truncate\">{activity.action}</p>\n                          <p className=\"text-xs text-gray-500\">{activity.timestamp}</p>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {activity.type}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"permissions\" className=\"space-y-6\">\n              <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"text-gray-800\">Access Permissions</CardTitle>\n                  <p className=\"text-sm text-gray-600\">Your current system permissions and access levels</p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {permissions.map((permission, index) => (\n                      <div\n                        key={index}\n                        className={`flex items-center justify-between p-4 rounded-lg border ${\n                          permission.granted\n                            ? \"bg-gradient-to-r from-green-50 to-emerald-50 border-green-200\"\n                            : \"bg-gradient-to-r from-gray-50 to-slate-50 border-gray-200\"\n                        }`}\n                      >\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-semibold text-gray-800\">{permission.name}</h4>\n                          <p className=\"text-sm text-gray-600\">{permission.description}</p>\n                        </div>\n                        <Badge\n                          variant={permission.granted ? \"default\" : \"secondary\"}\n                          className={\n                            permission.granted\n                              ? \"bg-green-100 text-green-800 border-green-200\"\n                              : \"bg-gray-100 text-gray-800 border-gray-200\"\n                          }\n                        >\n                          {permission.granted ? \"Granted\" : \"Denied\"}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"security\" className=\"space-y-6\">\n              <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"text-gray-800\">Security Settings</CardTitle>\n                  <p className=\"text-sm text-gray-600\">Manage your account security and authentication</p>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-semibold text-gray-800\">Two-Factor Authentication</h4>\n                          <p className=\"text-sm text-gray-600\">Add an extra layer of security to your account</p>\n                        </div>\n                        <Button variant=\"outline\" className=\"bg-white/50\">\n                          <Key className=\"w-4 h-4 mr-2\" />\n                          Enable 2FA\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"p-4 bg-gradient-to-r from-yellow-50 to-orange-50 rounded-lg border border-yellow-200\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-semibold text-gray-800\">Password</h4>\n                          <p className=\"text-sm text-gray-600\">Last changed 30 days ago</p>\n                        </div>\n                        <Button variant=\"outline\" className=\"bg-white/50\">\n                          Change Password\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg border border-green-200\">\n                      <h4 className=\"font-semibold text-green-800 mb-2\">Security Status</h4>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                          <span className=\"text-sm text-gray-700\">Account verified</span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                          <span className=\"text-sm text-gray-700\">Strong password</span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n                          <span className=\"text-sm text-gray-700\">2FA not enabled</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":18093},"app/register/page.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Zap, Eye, EyeOff, Shield, Lock, Mail, Phone, CheckCircle } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default function RegisterPage() {\n  const [showPassword, setShowPassword] = useState(false)\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false)\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phoneNumber: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    agreeToTerms: false,\n  })\n  const [isLoading, setIsLoading] = useState(false)\n  const [errors, setErrors] = useState<Record<string, string>>({})\n  const [passwordStrength, setPasswordStrength] = useState(0)\n\n  const validatePassword = (password: string) => {\n    let strength = 0\n    if (password.length >= 8) strength++\n    if (/[A-Z]/.test(password)) strength++\n    if (/[a-z]/.test(password)) strength++\n    if (/[0-9]/.test(password)) strength++\n    if (/[^A-Za-z0-9]/.test(password)) strength++\n    return strength\n  }\n\n  const validatePhoneNumber = (phone: string) => {\n    // Indian phone number validation (10 digits starting with 6-9)\n    const phoneRegex = /^[6-9]\\d{9}$/\n    return phoneRegex.test(phone.replace(/\\D/g, \"\"))\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n    setErrors({})\n\n    // Validation\n    const newErrors: Record<string, string> = {}\n\n    if (!formData.firstName.trim()) newErrors.firstName = \"First name is required\"\n    if (!formData.lastName.trim()) newErrors.lastName = \"Last name is required\"\n    if (!formData.email.trim()) newErrors.email = \"Email is required\"\n    else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) newErrors.email = \"Email is invalid\"\n    if (!formData.phoneNumber.trim()) newErrors.phoneNumber = \"Phone number is required\"\n    else if (!validatePhoneNumber(formData.phoneNumber)) newErrors.phoneNumber = \"Phone number must be 10 digits starting with 6-9\"\n    if (!formData.password) newErrors.password = \"Password is required\"\n    else if (formData.password.length < 8) newErrors.password = \"Password must be at least 8 characters\"\n    if (formData.password !== formData.confirmPassword) newErrors.confirmPassword = \"Passwords do not match\"\n    if (!formData.agreeToTerms) newErrors.agreeToTerms = \"You must agree to the terms\"\n\n    if (Object.keys(newErrors).length > 0) {\n      setErrors(newErrors)\n      setIsLoading(false)\n      return\n    }\n\n    // Simulate registration process\n    setTimeout(() => {\n      // Store user data (in real app, this would be sent to backend)\n      const userData = {\n        ...formData,\n        role: \"end_user\", // All registered users are end users\n        registeredAt: new Date().toISOString(),\n        verified: false,\n      }\n\n      alert(\"Account created successfully! Please check your email for verification.\")\n      window.location.href = \"/login\"\n    }, 2000)\n  }\n\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setFormData((prev) => ({ ...prev, [field]: value }))\n\n    if (field === \"password\") {\n      setPasswordStrength(validatePassword(value as string))\n    }\n\n    if (field === \"phoneNumber\") {\n      // Format phone number as user types - only allow digits and limit to 10\n      const formatted = (value as string).replace(/\\D/g, \"\").slice(0, 10)\n      setFormData((prev) => ({ ...prev, [field]: formatted }))\n    }\n\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors((prev) => ({ ...prev, [field]: \"\" }))\n    }\n  }\n\n  const getPasswordStrengthColor = () => {\n    if (passwordStrength <= 2) return \"bg-red-500\"\n    if (passwordStrength <= 3) return \"bg-yellow-500\"\n    return \"bg-green-500\"\n  }\n\n  const getPasswordStrengthText = () => {\n    if (passwordStrength <= 2) return \"Weak\"\n    if (passwordStrength <= 3) return \"Medium\"\n    return \"Strong\"\n  }\n\n  const formatPhoneDisplay = (phone: string) => {\n    const cleaned = phone.replace(/\\D/g, \"\")\n    if (cleaned.length >= 5) {\n      return `${cleaned.slice(0, 5)} ${cleaned.slice(5, 10)}`\n    }\n    return cleaned\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-green-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-8\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-green-400 to-purple-400 rounded-xl flex items-center justify-center\">\n              <Zap className=\"w-7 h-7 text-white\" />\n            </div>\n            <span className=\"text-3xl font-bold bg-gradient-to-r from-green-600 to-purple-600 bg-clip-text text-transparent\">\n              EV-Secure\n            </span>\n          </div>\n          <h2 className=\"text-2xl font-bold text-gray-800\">Create Account</h2>\n          <p className=\"text-gray-600 mt-2\">Join EV-Secure to access charging stations</p>\n        </div>\n\n        {/* Registration Form */}\n        <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-2xl\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-xl text-center text-gray-800\">Sign Up</CardTitle>\n            <CardDescription className=\"text-center text-gray-600\">Create your account to get started</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {/* Name Fields */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"firstName\" className=\"text-gray-700\">\n                    First Name\n                  </Label>\n                  <Input\n                    id=\"firstName\"\n                    type=\"text\"\n                    placeholder=\"Raj\"\n                    value={formData.firstName}\n                    onChange={(e) => handleInputChange(\"firstName\", e.target.value)}\n                    className={`bg-white/50 border-gray-200 focus:border-purple-400 focus:ring-purple-400 ${\n                      errors.firstName ? \"border-red-500\" : \"\"\n                    }`}\n                    required\n                  />\n                  {errors.firstName && <p className=\"text-xs text-red-600\">{errors.firstName}</p>}\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"lastName\" className=\"text-gray-700\">\n                    Last Name\n                  </Label>\n                  <Input\n                    id=\"lastName\"\n                    type=\"text\"\n                    placeholder=\"Sharma\"\n                    value={formData.lastName}\n                    onChange={(e) => handleInputChange(\"lastName\", e.target.value)}\n                    className={`bg-white/50 border-gray-200 focus:border-purple-400 focus:ring-purple-400 ${\n                      errors.lastName ? \"border-red-500\" : \"\"\n                    }`}\n                    required\n                  />\n                  {errors.lastName && <p className=\"text-xs text-red-600\">{errors.lastName}</p>}\n                </div>\n              </div>\n\n              {/* Email */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-gray-700\">\n                  Email\n                </Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"raj.sharma@example.com\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                    className={`pl-10 bg-white/50 border-gray-200 focus:border-purple-400 focus:ring-purple-400 ${\n                      errors.email ? \"border-red-500\" : \"\"\n                    }`}\n                    required\n                  />\n                </div>\n                {errors.email && <p className=\"text-xs text-red-600\">{errors.email}</p>}\n              </div>\n\n              {/* Phone Number */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phoneNumber\" className=\"text-gray-700\">\n                  Mobile Number <span className=\"text-red-500\">*</span>\n                </Label>\n                <div className=\"relative\">\n                  <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <div className=\"flex\">\n                    <span className=\"inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-200 bg-gray-50 text-gray-500 text-sm\">\n                      +91\n                    </span>\n                    <Input\n                      id=\"phoneNumber\"\n                      type=\"tel\"\n                      placeholder=\"98765 43210\"\n                      value={formatPhoneDisplay(formData.phoneNumber)}\n                      onChange={(e) => handleInputChange(\"phoneNumber\", e.target.value)}\n                      className={`pl-10 rounded-l-none bg-white/50 border-gray-200 focus:border-purple-400 focus:ring-purple-400 ${\n                        errors.phoneNumber ? \"border-red-500\" : \"\"\n                      }`}\n                      required\n                    />\n                  </div>\n                </div>\n                {errors.phoneNumber && <p className=\"text-xs text-red-600\">{errors.phoneNumber}</p>}\n                <p className=\"text-xs text-gray-500\">Required for OTP verification and account recovery</p>\n              </div>\n\n              {/* Password */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-gray-700\">\n                  Password\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Create a strong password\"\n                    value={formData.password}\n                    onChange={(e) => handleInputChange(\"password\", e.target.value)}\n                    className={`pl-10 pr-10 bg-white/50 border-gray-200 focus:border-purple-400 focus:ring-purple-400 ${\n                      errors.password ? \"border-red-500\" : \"\"\n                    }`}\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  >\n                    {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n                {formData.password && (\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"flex-1 bg-gray-200 rounded-full h-2\">\n                        <div\n                          className={`h-2 rounded-full transition-all duration-300 ${getPasswordStrengthColor()}`}\n                          style={{ width: `${(passwordStrength / 5) * 100}%` }}\n                        ></div>\n                      </div>\n                      <span className=\"text-xs text-gray-600\">{getPasswordStrengthText()}</span>\n                    </div>\n                  </div>\n                )}\n                {errors.password && <p className=\"text-xs text-red-600\">{errors.password}</p>}\n              </div>\n\n              {/* Confirm Password */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\" className=\"text-gray-700\">\n                  Confirm Password\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"confirmPassword\"\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    placeholder=\"Confirm your password\"\n                    value={formData.confirmPassword}\n                    onChange={(e) => handleInputChange(\"confirmPassword\", e.target.value)}\n                    className={`pl-10 pr-10 bg-white/50 border-gray-200 focus:border-purple-400 focus:ring-purple-400 ${\n                      errors.confirmPassword ? \"border-red-500\" : \"\"\n                    }`}\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  >\n                    {showConfirmPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n                {formData.confirmPassword && formData.password === formData.confirmPassword && (\n                  <div className=\"flex items-center space-x-1 text-green-600\">\n                    <CheckCircle className=\"w-3 h-3\" />\n                    <span className=\"text-xs\">Passwords match</span>\n                  </div>\n                )}\n                {errors.confirmPassword && <p className=\"text-xs text-red-600\">{errors.confirmPassword}</p>}\n              </div>\n\n              {/* Terms Agreement */}\n              <div className=\"space-y-2\">\n                <div className=\"flex items-start space-x-2\">\n                  <input\n                    id=\"terms\"\n                    type=\"checkbox\"\n                    checked={formData.agreeToTerms}\n                    onChange={(e) => handleInputChange(\"agreeToTerms\", e.target.checked)}\n                    className=\"w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500 mt-0.5\"\n                  />\n                  <Label htmlFor=\"terms\" className=\"text-sm text-gray-600\">\n                    I agree to the{\" \"}\n                    <Link href=\"/terms\" className=\"text-purple-600 hover:text-purple-800\">\n                      Terms of Service\n                    </Link>{\" \"}\n                    and{\" \"}\n                    <Link href=\"/privacy\" className=\"text-purple-600 hover:text-purple-800\">\n                      Privacy Policy\n                    </Link>\n                  </Label>\n                </div>\n                {errors.agreeToTerms && <p className=\"text-xs text-red-600\">{errors.agreeToTerms}</p>}\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-gradient-to-r from-green-500 to-purple-500 hover:from-green-600 hover:to-purple-600 text-white font-medium py-2.5\"\n                disabled={isLoading}\n              >\n                {isLoading ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                    <span>Creating account...</span>\n                  </div>\n                ) : (\n                  \"Create Account\"\n                )}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-gray-600\">\n                Already have an account?{\" \"}\n                <Link href=\"/login\" className=\"text-purple-600 hover:text-purple-800 font-medium\">\n                  Sign in\n                </Link>\n              </p>\n            </div>\n\n            {/* User Role Notice */}\n            <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n              <div className=\"flex items-start space-x-2\">\n                <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                <div>\n                  <p className=\"text-xs text-blue-700\">\n                    <strong>End User Account:</strong> You'll have access to charging stations via QR code scanning and\n                    payment. Limited dashboard access for your charging sessions only.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Security Notice */}\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <Shield className=\"w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n            <div>\n              <h3 className=\"text-sm font-medium text-blue-800\">Secure Registration</h3>\n              <p className=\"text-sm text-blue-700 mt-1\">\n                Your data is protected with enterprise-grade security. Mobile number is used for OTP verification and\n                account recovery.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":17488},"app/reports/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { FileText, Download, CalendarIcon, Zap, Shield, DollarSign, Activity, FileDown, Printer } from \"lucide-react\"\nimport { format } from \"date-fns\"\nimport {\n  Bar,\n  BarChart,\n  Line,\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Area,\n  AreaChart,\n  LineChart,\n} from \"recharts\"\nimport { ChartContainer, ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\"\nimport { SharedNavigation } from \"@/components/shared-navigation\"\n\nconst monthlyReports = [\n  { month: \"Jan 2024\", revenue: 45231, sessions: 1250, threats: 3, uptime: 99.2 },\n  { month: \"Feb 2024\", revenue: 52341, sessions: 1456, threats: 1, uptime: 99.8 },\n  { month: \"Mar 2024\", revenue: 48923, sessions: 1389, threats: 2, uptime: 99.5 },\n  { month: \"Apr 2024\", revenue: 61234, sessions: 1678, threats: 0, uptime: 100 },\n  { month: \"May 2024\", revenue: 58912, sessions: 1534, threats: 1, uptime: 99.7 },\n  { month: \"Jun 2024\", revenue: 67845, sessions: 1823, threats: 2, uptime: 99.4 },\n]\n\nconst stationPerformance = [\n  { station: \"ST001\", revenue: 15420, sessions: 456, efficiency: 94.2 },\n  { station: \"ST002\", revenue: 12890, sessions: 378, efficiency: 87.5 },\n  { station: \"ST003\", revenue: 18750, sessions: 523, efficiency: 96.8 },\n  { station: \"ST004\", revenue: 21785, sessions: 466, efficiency: 92.1 },\n]\n\nconst threatAnalysis = [\n  { type: \"MITM Attack\", count: 3, severity: \"High\", blocked: 3 },\n  { type: \"Voltage Spike\", count: 5, severity: \"Medium\", blocked: 5 },\n  { type: \"Firmware Tampering\", count: 2, severity: \"Low\", blocked: 1 },\n  { type: \"Unauthorized Access\", count: 4, severity: \"High\", blocked: 4 },\n]\n\nconst usagePatterns = [\n  { hour: \"00:00\", usage: 12 },\n  { hour: \"06:00\", usage: 45 },\n  { hour: \"12:00\", usage: 89 },\n  { hour: \"18:00\", usage: 156 },\n  { hour: \"24:00\", usage: 78 },\n]\n\nexport default function ReportsPage() {\n  const [dateRange, setDateRange] = useState<Date | undefined>(new Date())\n  const [reportType, setReportType] = useState(\"monthly\")\n  const [selectedStation, setSelectedStation] = useState(\"all\")\n  const [isGenerating, setIsGenerating] = useState(false)\n\n  const generateReport = async (format: string) => {\n    setIsGenerating(true)\n\n    // Simulate report generation\n    setTimeout(() => {\n      const reportData = {\n        type: reportType,\n        station: selectedStation,\n        date: dateRange,\n        format: format,\n        timestamp: new Date().toISOString(),\n      }\n\n      // Create and download file\n      const dataStr =\n        format === \"json\"\n          ? JSON.stringify(reportData, null, 2)\n          : `EV-Secure Report - ${reportType}\\nGenerated: ${new Date().toLocaleString()}\\nStation: ${selectedStation}\\nFormat: ${format}`\n\n      const dataBlob = new Blob([dataStr], { type: format === \"json\" ? \"application/json\" : \"text/plain\" })\n      const url = URL.createObjectURL(dataBlob)\n      const link = document.createElement(\"a\")\n      link.href = url\n      link.download = `ev-secure-report-${reportType}-${Date.now()}.${format === \"json\" ? \"json\" : format}`\n      document.body.appendChild(link)\n      link.click()\n      document.body.removeChild(link)\n      URL.revokeObjectURL(url)\n\n      setIsGenerating(false)\n    }, 2000)\n  }\n\n  const printReport = () => {\n    window.print()\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-green-50\">\n      <SharedNavigation currentPage=\"reports\" />\n\n      <div className=\"lg:ml-64 p-4 sm:p-6 space-y-4 sm:space-y-6 max-w-full overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div className=\"min-w-0\">\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800 flex items-center gap-2\">\n              <FileText className=\"w-6 h-6 sm:w-8 sm:h-8 text-blue-600 flex-shrink-0\" />\n              <span className=\"truncate\">Analytics Reports</span>\n            </h1>\n            <p className=\"text-gray-600 mt-1 text-sm sm:text-base\">Comprehensive insights and performance analytics</p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button variant=\"outline\" className=\"bg-white/80\">\n                  <CalendarIcon className=\"w-4 h-4 mr-2\" />\n                  {dateRange ? format(dateRange, \"PPP\") : \"Pick a date\"}\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-auto p-0\">\n                <Calendar mode=\"single\" selected={dateRange} onSelect={setDateRange} initialFocus />\n              </PopoverContent>\n            </Popover>\n            <Button onClick={printReport} variant=\"outline\" className=\"bg-white/80\">\n              <Printer className=\"w-4 h-4 mr-2\" />\n              Print\n            </Button>\n          </div>\n        </div>\n\n        {/* Report Controls */}\n        <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <label className=\"text-sm font-medium text-gray-700 mb-2 block\">Report Type</label>\n                <Select value={reportType} onValueChange={setReportType}>\n                  <SelectTrigger className=\"bg-white/50\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"monthly\">Monthly Summary</SelectItem>\n                    <SelectItem value=\"weekly\">Weekly Analysis</SelectItem>\n                    <SelectItem value=\"daily\">Daily Reports</SelectItem>\n                    <SelectItem value=\"custom\">Custom Range</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex-1\">\n                <label className=\"text-sm font-medium text-gray-700 mb-2 block\">Station Filter</label>\n                <Select value={selectedStation} onValueChange={setSelectedStation}>\n                  <SelectTrigger className=\"bg-white/50\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Stations</SelectItem>\n                    <SelectItem value=\"ST001\">Downtown Plaza</SelectItem>\n                    <SelectItem value=\"ST002\">Mall Parking</SelectItem>\n                    <SelectItem value=\"ST003\">Airport Terminal</SelectItem>\n                    <SelectItem value=\"ST004\">University Campus</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex items-end gap-2\">\n                <Button\n                  onClick={() => generateReport(\"pdf\")}\n                  disabled={isGenerating}\n                  className=\"bg-gradient-to-r from-red-500 to-pink-500 text-white\"\n                >\n                  {isGenerating ? (\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                  ) : (\n                    <FileDown className=\"w-4 h-4 mr-2\" />\n                  )}\n                  PDF\n                </Button>\n                <Button\n                  onClick={() => generateReport(\"csv\")}\n                  disabled={isGenerating}\n                  className=\"bg-gradient-to-r from-green-500 to-blue-500 text-white\"\n                >\n                  {isGenerating ? (\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                  ) : (\n                    <Download className=\"w-4 h-4 mr-2\" />\n                  )}\n                  CSV\n                </Button>\n                <Button\n                  onClick={() => generateReport(\"json\")}\n                  disabled={isGenerating}\n                  className=\"bg-gradient-to-r from-purple-500 to-indigo-500 text-white\"\n                >\n                  {isGenerating ? (\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                  ) : (\n                    <FileText className=\"w-4 h-4 mr-2\" />\n                  )}\n                  JSON\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Generate Report Section */}\n        <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200 shadow-lg\">\n          <CardHeader>\n            <CardTitle className=\"text-gray-800 flex items-center gap-2\">\n              <FileDown className=\"w-5 h-5 text-blue-600\" />\n              Generate Custom Report\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold text-gray-800\">PDF Report</h4>\n                <p className=\"text-sm text-gray-600\">Comprehensive formatted report with charts and analysis</p>\n                <Button\n                  onClick={() => generateReport(\"pdf\")}\n                  disabled={isGenerating}\n                  className=\"w-full bg-gradient-to-r from-red-500 to-pink-500 text-white\"\n                >\n                  {isGenerating ? \"Generating...\" : \"Download PDF\"}\n                </Button>\n              </div>\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold text-gray-800\">CSV Export</h4>\n                <p className=\"text-sm text-gray-600\">Raw data export for spreadsheet analysis</p>\n                <Button\n                  onClick={() => generateReport(\"csv\")}\n                  disabled={isGenerating}\n                  className=\"w-full bg-gradient-to-r from-green-500 to-blue-500 text-white\"\n                >\n                  {isGenerating ? \"Generating...\" : \"Export CSV\"}\n                </Button>\n              </div>\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold text-gray-800\">JSON Data</h4>\n                <p className=\"text-sm text-gray-600\">Structured data for API integration</p>\n                <Button\n                  onClick={() => generateReport(\"json\")}\n                  disabled={isGenerating}\n                  className=\"w-full bg-gradient-to-r from-purple-500 to-indigo-500 text-white\"\n                >\n                  {isGenerating ? \"Generating...\" : \"Export JSON\"}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Report Tabs */}\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg w-full sm:w-auto\">\n            <TabsTrigger value=\"overview\" className=\"text-xs sm:text-sm\">\n              Overview\n            </TabsTrigger>\n            <TabsTrigger value=\"performance\" className=\"text-xs sm:text-sm\">\n              Performance\n            </TabsTrigger>\n            <TabsTrigger value=\"security\" className=\"text-xs sm:text-sm\">\n              Security\n            </TabsTrigger>\n            <TabsTrigger value=\"usage\" className=\"text-xs sm:text-sm\">\n              Usage Patterns\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {/* Summary Cards */}\n            <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6\">\n              <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-600\">Total Revenue</p>\n                      <p className=\"text-2xl font-bold text-green-600\">$354,385</p>\n                    </div>\n                    <DollarSign className=\"w-8 h-8 text-green-500\" />\n                  </div>\n                  <p className=\"text-xs text-green-600 mt-2\">+12.5% from last period</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-600\">Total Sessions</p>\n                      <p className=\"text-2xl font-bold text-blue-600\">9,130</p>\n                    </div>\n                    <Activity className=\"w-8 h-8 text-blue-500\" />\n                  </div>\n                  <p className=\"text-xs text-blue-600 mt-2\">+8.3% from last period</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-600\">Avg Uptime</p>\n                      <p className=\"text-2xl font-bold text-purple-600\">99.6%</p>\n                    </div>\n                    <Zap className=\"w-8 h-8 text-purple-500\" />\n                  </div>\n                  <p className=\"text-xs text-purple-600 mt-2\">+0.4% from last period</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-600\">Threats Blocked</p>\n                      <p className=\"text-2xl font-bold text-red-600\">9</p>\n                    </div>\n                    <Shield className=\"w-8 h-8 text-red-500\" />\n                  </div>\n                  <p className=\"text-xs text-red-600 mt-2\">-25% from last period</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Monthly Trends */}\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-800\">Monthly Performance Trends</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ChartContainer\n                  config={{\n                    revenue: { label: \"Revenue ($)\", color: \"#10b981\" },\n                    sessions: { label: \"Sessions\", color: \"#3b82f6\" },\n                  }}\n                  className=\"h-[300px] sm:h-[400px] w-full\"\n                >\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <AreaChart data={monthlyReports}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"month\" />\n                      <YAxis />\n                      <ChartTooltip content={<ChartTooltipContent />} />\n                      <Area type=\"monotone\" dataKey=\"revenue\" stroke=\"#10b981\" fill=\"#10b981\" fillOpacity={0.3} />\n                      <Area type=\"monotone\" dataKey=\"sessions\" stroke=\"#3b82f6\" fill=\"#3b82f6\" fillOpacity={0.3} />\n                    </AreaChart>\n                  </ResponsiveContainer>\n                </ChartContainer>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"performance\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"text-gray-800\">Station Performance</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ChartContainer\n                    config={{\n                      revenue: { label: \"Revenue\", color: \"#8b5cf6\" },\n                      sessions: { label: \"Sessions\", color: \"#10b981\" },\n                    }}\n                    className=\"h-[300px] w-full\"\n                  >\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <BarChart data={stationPerformance}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"station\" />\n                        <YAxis />\n                        <ChartTooltip content={<ChartTooltipContent />} />\n                        <Bar dataKey=\"revenue\" fill=\"#8b5cf6\" />\n                        <Bar dataKey=\"sessions\" fill=\"#10b981\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </ChartContainer>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"text-gray-800\">Efficiency Metrics</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {stationPerformance.map((station) => (\n                    <div key={station.station} className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"font-medium\">{station.station}</span>\n                        <span>{station.efficiency}%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div\n                          className=\"bg-gradient-to-r from-green-400 to-blue-500 h-2 rounded-full\"\n                          style={{ width: `${station.efficiency}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"security\" className=\"space-y-6\">\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-800\">Threat Analysis</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {threatAnalysis.map((threat, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-4 bg-gradient-to-r from-red-50 to-orange-50 rounded-lg border border-red-100\"\n                    >\n                      <div>\n                        <h4 className=\"font-semibold text-gray-800\">{threat.type}</h4>\n                        <p className=\"text-sm text-gray-600\">\n                          {threat.count} incidents ‚Ä¢ {threat.blocked} blocked\n                        </p>\n                      </div>\n                      <Badge\n                        variant={\n                          threat.severity === \"High\"\n                            ? \"destructive\"\n                            : threat.severity === \"Medium\"\n                              ? \"default\"\n                              : \"secondary\"\n                        }\n                      >\n                        {threat.severity}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"usage\" className=\"space-y-6\">\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-800\">Daily Usage Patterns</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ChartContainer\n                  config={{\n                    usage: { label: \"Usage (%)\", color: \"#f59e0b\" },\n                  }}\n                  className=\"h-[300px] sm:h-[400px] w-full\"\n                >\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart data={usagePatterns}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"hour\" />\n                      <YAxis />\n                      <ChartTooltip content={<ChartTooltipContent />} />\n                      <Line\n                        type=\"monotone\"\n                        dataKey=\"usage\"\n                        stroke=\"#f59e0b\"\n                        strokeWidth={3}\n                        dot={{ fill: \"#f59e0b\", strokeWidth: 2, r: 6 }}\n                      />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </ChartContainer>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  )\n}\n","size_bytes":21436},"app/settings/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Badge } from \"@/components/ui/badge\"\nimport {\n  Settings,\n  Key,\n  Shield,\n  Bell,\n  Database,\n  Save,\n  RefreshCw,\n  AlertTriangle,\n  CheckCircle,\n  Copy,\n  Eye,\n  EyeOff,\n  Trash2,\n  FileText,\n} from \"lucide-react\"\nimport { SharedNavigation } from \"@/components/shared-navigation\"\n\n// Type definitions\ninterface ApiKeyData {\n  key: string\n  status: \"active\" | \"inactive\"\n  lastUsed: string | null\n  station: string\n}\n\ntype StationId = \"ST001\" | \"ST002\" | \"ST003\" | \"ST004\" | \"ST005\" | \"ST006\"\ntype ApiKeysState = Record<StationId, ApiKeyData>\ntype ShowApiKeysState = Record<string, boolean>\n\nconst initialApiKeys: ApiKeysState = {\n  ST001: { key: \"\", status: \"inactive\", lastUsed: null, station: \"Downtown Plaza\" },\n  ST002: { key: \"\", status: \"inactive\", lastUsed: null, station: \"Mall Parking\" },\n  ST003: { key: \"\", status: \"inactive\", lastUsed: null, station: \"Airport Terminal\" },\n  ST004: { key: \"\", status: \"inactive\", lastUsed: null, station: \"University Campus\" },\n  ST005: { key: \"\", status: \"inactive\", lastUsed: null, station: \"Business Park\" },\n  ST006: { key: \"\", status: \"inactive\", lastUsed: null, station: \"Residential Complex\" },\n}\n\nexport default function SettingsPage() {\n  const [apiKeys, setApiKeys] = useState<ApiKeysState>(initialApiKeys)\n  const [showApiKeys, setShowApiKeys] = useState<ShowApiKeysState>({})\n  const [notifications, setNotifications] = useState({\n    threats: true,\n    maintenance: true,\n    reports: false,\n    system: true,\n  })\n  const [systemSettings, setSystemSettings] = useState({\n    autoBackup: true,\n    dataRetention: \"90\",\n    mlSensitivity: \"medium\",\n    updateFrequency: \"5\",\n  })\n\n  // Load existing API keys from backend\n  useEffect(() => {\n    const loadApiKeys = async () => {\n      try {\n        const response = await fetch('/api/keys')\n        if (response.ok) {\n          const data = await response.json()\n          if (data.success && data.keys) {\n            const updatedKeys = { ...initialApiKeys }\n            data.keys.forEach((keyData: { stationId: StationId; fullKey: string; status: \"active\" | \"inactive\"; lastUsed: string | null }) => {\n              const stationId = keyData.stationId\n              if (stationId in updatedKeys) {\n                updatedKeys[stationId] = {\n                  ...updatedKeys[stationId],\n                  key: keyData.fullKey,\n                  status: keyData.status,\n                  lastUsed: keyData.lastUsed,\n                }\n              }\n            })\n            setApiKeys(updatedKeys)\n          }\n        }\n      } catch (error) {\n        console.error('Error loading API keys:', error)\n      }\n    }\n\n    loadApiKeys()\n  }, [])\n\n  const generateApiKey = async (stationId: string) => {\n    try {\n      const response = await fetch('/api/keys', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ stationId }),\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to generate API key')\n      }\n\n      const data = await response.json()\n      \n      setApiKeys((prev) => ({\n        ...prev,\n        [stationId as StationId]: {\n          ...prev[stationId as StationId],\n          key: data.key,\n          status: \"active\" as const,\n          lastUsed: new Date().toISOString(),\n        },\n      }))\n\n      // Show success message\n      alert(`API key generated successfully for ${stationId}`)\n    } catch (error) {\n      console.error('Error generating API key:', error)\n      alert('Failed to generate API key. Please try again.')\n    }\n  }\n\n  const revokeApiKey = async (stationId: StationId) => {\n    const currentKey = apiKeys[stationId]?.key\n    if (!currentKey) return\n\n    try {\n      const response = await fetch('/api/keys', {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ key: currentKey }),\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to revoke API key')\n      }\n\n      setApiKeys((prev) => ({\n        ...prev,\n        [stationId]: {\n          ...prev[stationId],\n          key: \"\",\n          status: \"inactive\" as const,\n          lastUsed: null,\n        },\n      }))\n\n      alert(`API key revoked successfully for ${stationId}`)\n    } catch (error) {\n      console.error('Error revoking API key:', error)\n      alert('Failed to revoke API key. Please try again.')\n    }\n  }\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text)\n  }\n\n  const toggleShowApiKey = (stationId: string) => {\n    setShowApiKeys((prev) => ({\n      ...prev,\n      [stationId]: !prev[stationId],\n    }))\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-green-50\">\n      <SharedNavigation currentPage=\"settings\" />\n\n      <div className=\"lg:ml-64 p-4 sm:p-6 space-y-4 sm:space-y-6 max-w-full overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div className=\"min-w-0\">\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800 flex items-center gap-2\">\n              <Settings className=\"w-6 h-6 sm:w-8 sm:h-8 text-gray-600 flex-shrink-0\" />\n              <span className=\"truncate\">System Settings</span>\n            </h1>\n            <p className=\"text-gray-600 mt-1 text-sm sm:text-base\">\n              Configure API keys, notifications, and system preferences\n            </p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" className=\"bg-white/80\">\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              Reset\n            </Button>\n            <Button className=\"bg-gradient-to-r from-green-500 to-purple-500 text-white\">\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save Changes\n            </Button>\n          </div>\n        </div>\n\n        {/* Settings Tabs */}\n        <Tabs defaultValue=\"api-keys\" className=\"space-y-6\">\n          <TabsList className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg w-full sm:w-auto\">\n            <TabsTrigger value=\"api-keys\" className=\"text-xs sm:text-sm\">\n              API Keys\n            </TabsTrigger>\n            <TabsTrigger value=\"notifications\" className=\"text-xs sm:text-sm\">\n              Notifications\n            </TabsTrigger>\n            <TabsTrigger value=\"security\" className=\"text-xs sm:text-sm\">\n              Security\n            </TabsTrigger>\n            <TabsTrigger value=\"system\" className=\"text-xs sm:text-sm\">\n              System\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"api-keys\" className=\"space-y-6\">\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-800 flex items-center gap-2\">\n                  <Key className=\"w-5 h-5 text-blue-600\" />\n                  ESP32-S3 API Key Management\n                </CardTitle>\n                <p className=\"text-sm text-gray-600\">\n                  Generate and manage API keys for your ESP32-S3 charging stations. Each station requires a unique API\n                  key for authentication.\n                </p>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {Object.entries(apiKeys).map(([stationId, config]) => (\n                  <div\n                    key={stationId}\n                    className=\"p-4 bg-gradient-to-r from-gray-50 to-blue-50 rounded-lg border border-gray-200\"\n                  >\n                    <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n                      <div className=\"min-w-0\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <h4 className=\"font-semibold text-gray-800\">{config.station}</h4>\n                          <Badge\n                            variant={config.status === \"active\" ? \"default\" : \"secondary\"}\n                            className={\n                              config.status === \"active\" ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"\n                            }\n                          >\n                            {config.status}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-600 mb-2\">Station ID: {stationId}</p>\n                        {config.key && (\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"flex-1 min-w-0\">\n                              <Input\n                                type={showApiKeys[stationId] ? \"text\" : \"password\"}\n                                value={config.key}\n                                readOnly\n                                className=\"bg-white/50 text-sm font-mono\"\n                              />\n                            </div>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => toggleShowApiKey(stationId)}\n                              className=\"bg-white/50\"\n                            >\n                              {showApiKeys[stationId] ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => copyToClipboard(config.key)}\n                              className=\"bg-white/50\"\n                            >\n                              <Copy className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        )}\n                        {config.lastUsed && (\n                          <p className=\"text-xs text-gray-500 mt-2\">\n                            Last used: {new Date(config.lastUsed).toLocaleString()}\n                          </p>\n                        )}\n                      </div>\n                      <div className=\"flex items-center gap-2 flex-shrink-0\">\n                        {config.status === \"inactive\" ? (\n                          <Button\n                            onClick={() => generateApiKey(stationId)}\n                            className=\"bg-gradient-to-r from-green-500 to-blue-500 text-white\"\n                          >\n                            <Key className=\"w-4 h-4 mr-2\" />\n                            Generate Key\n                          </Button>\n                        ) : (\n                          <Button\n                            variant=\"destructive\"\n                            onClick={() => revokeApiKey(stationId as StationId)}\n                            className=\"bg-gradient-to-r from-red-500 to-orange-500\"\n                          >\n                            <Trash2 className=\"w-4 h-4 mr-2\" />\n                            Revoke\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n\n                <div className=\"p-4 bg-gradient-to-r from-yellow-50 to-orange-50 rounded-lg border border-yellow-200\">\n                  <div className=\"flex items-start gap-3\">\n                    <AlertTriangle className=\"w-5 h-5 text-yellow-600 flex-shrink-0 mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-semibold text-yellow-800 mb-1\">Important Security Notice</h4>\n                      <p className=\"text-sm text-yellow-700\">\n                        ‚Ä¢ Keep your API keys secure and never share them publicly\n                        <br />‚Ä¢ Each ESP32-S3 station must use its designated API key\n                        <br />‚Ä¢ Revoke and regenerate keys if compromised\n                        <br />‚Ä¢ Only stations with valid API keys will display data on the dashboard\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"notifications\" className=\"space-y-6\">\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-800 flex items-center gap-2\">\n                  <Bell className=\"w-5 h-5 text-orange-600\" />\n                  Notification Preferences\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-red-50 to-pink-50 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-semibold text-gray-800\">Threat Alerts</h4>\n                      <p className=\"text-sm text-gray-600\">Get notified when ML models detect security threats</p>\n                    </div>\n                    <Switch\n                      checked={notifications.threats}\n                      onCheckedChange={(checked) => setNotifications((prev) => ({ ...prev, threats: checked }))}\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-semibold text-gray-800\">Maintenance Alerts</h4>\n                      <p className=\"text-sm text-gray-600\">Receive notifications for scheduled maintenance</p>\n                    </div>\n                    <Switch\n                      checked={notifications.maintenance}\n                      onCheckedChange={(checked) => setNotifications((prev) => ({ ...prev, maintenance: checked }))}\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-semibold text-gray-800\">Report Generation</h4>\n                      <p className=\"text-sm text-gray-600\">Get notified when reports are ready</p>\n                    </div>\n                    <Switch\n                      checked={notifications.reports}\n                      onCheckedChange={(checked) => setNotifications((prev) => ({ ...prev, reports: checked }))}\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-purple-50 to-violet-50 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-semibold text-gray-800\">System Updates</h4>\n                      <p className=\"text-sm text-gray-600\">Receive notifications about system updates</p>\n                    </div>\n                    <Switch\n                      checked={notifications.system}\n                      onCheckedChange={(checked) => setNotifications((prev) => ({ ...prev, system: checked }))}\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"security\" className=\"space-y-6\">\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-800 flex items-center gap-2\">\n                  <Shield className=\"w-5 h-5 text-red-600\" />\n                  Security Settings\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"ml-sensitivity\" className=\"text-sm font-medium text-gray-700\">\n                      ML Threat Detection Sensitivity\n                    </Label>\n                    <Select\n                      value={systemSettings.mlSensitivity}\n                      onValueChange={(value) => setSystemSettings((prev) => ({ ...prev, mlSensitivity: value }))}\n                    >\n                      <SelectTrigger className=\"bg-white/50 mt-2\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low - Fewer false positives</SelectItem>\n                        <SelectItem value=\"medium\">Medium - Balanced detection</SelectItem>\n                        <SelectItem value=\"high\">High - Maximum security</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"data-retention\" className=\"text-sm font-medium text-gray-700\">\n                      Data Retention Period (days)\n                    </Label>\n                    <Input\n                      id=\"data-retention\"\n                      type=\"number\"\n                      value={systemSettings.dataRetention}\n                      onChange={(e) => setSystemSettings((prev) => ({ ...prev, dataRetention: e.target.value }))}\n                      className=\"bg-white/50 mt-2\"\n                    />\n                  </div>\n\n                  <div className=\"p-4 bg-gradient-to-r from-red-50 to-orange-50 rounded-lg border border-red-200\">\n                    <h4 className=\"font-semibold text-red-800 mb-2\">Security Status</h4>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                        <span className=\"text-sm text-gray-700\">SSL/TLS encryption enabled</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                        <span className=\"text-sm text-gray-700\">API key authentication active</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                        <span className=\"text-sm text-gray-700\">ML threat detection running</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"system\" className=\"space-y-6\">\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-800 flex items-center gap-2\">\n                  <Database className=\"w-5 h-5 text-purple-600\" />\n                  System Configuration\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-semibold text-gray-800\">Automatic Backup</h4>\n                      <p className=\"text-sm text-gray-600\">Enable automatic daily backups</p>\n                    </div>\n                    <Switch\n                      checked={systemSettings.autoBackup}\n                      onCheckedChange={(checked) => setSystemSettings((prev) => ({ ...prev, autoBackup: checked }))}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"update-frequency\" className=\"text-sm font-medium text-gray-700\">\n                      Data Update Frequency (seconds)\n                    </Label>\n                    <Input\n                      id=\"update-frequency\"\n                      type=\"number\"\n                      value={systemSettings.updateFrequency}\n                      onChange={(e) => setSystemSettings((prev) => ({ ...prev, updateFrequency: e.target.value }))}\n                      className=\"bg-white/50 mt-2\"\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">How often to refresh data from ESP32-S3 stations</p>\n                  </div>\n\n                  <div className=\"p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg border border-green-200\">\n                    <h4 className=\"font-semibold text-green-800 mb-2\">System Health</h4>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm text-gray-600\">CPU Usage</p>\n                        <p className=\"text-lg font-bold text-green-700\">23%</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Memory Usage</p>\n                        <p className=\"text-lg font-bold text-green-700\">45%</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Storage</p>\n                        <p className=\"text-lg font-bold text-green-700\">67%</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Uptime</p>\n                        <p className=\"text-lg font-bold text-green-700\">99.8%</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  )\n}\n","size_bytes":22258},"app/stations/loading.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\n\nexport default function StationsLoading() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-green-50\">\n      <div className=\"lg:ml-64 p-4 sm:p-6 space-y-4 sm:space-y-6\">\n        {/* Header Skeleton */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <Skeleton className=\"h-8 w-64 mb-2\" />\n            <Skeleton className=\"h-4 w-96\" />\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Skeleton className=\"h-9 w-20\" />\n            <Skeleton className=\"h-9 w-24\" />\n          </div>\n        </div>\n\n        {/* Stats Cards Skeleton */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Card key={i} className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n              <CardContent className=\"p-3 sm:p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Skeleton className=\"h-4 w-20 mb-2\" />\n                    <Skeleton className=\"h-6 w-12\" />\n                  </div>\n                  <Skeleton className=\"w-8 h-8 sm:w-12 sm:h-12 rounded-lg\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Search and Filter Skeleton */}\n        <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n          <CardContent className=\"p-3 sm:p-4\">\n            <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4\">\n              <Skeleton className=\"h-10 flex-1\" />\n              <div className=\"flex items-center gap-2\">\n                <Skeleton className=\"h-4 w-4\" />\n                <Skeleton className=\"h-10 w-32\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Stations Grid Skeleton */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4 sm:gap-6\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i} className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n              <CardContent className=\"p-4 space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <Skeleton className=\"w-5 h-5 rounded-full\" />\n                    <div>\n                      <Skeleton className=\"h-5 w-32 mb-1\" />\n                      <Skeleton className=\"h-4 w-24\" />\n                    </div>\n                  </div>\n                  <Skeleton className=\"h-6 w-16 rounded-full\" />\n                </div>\n                <Skeleton className=\"h-8 w-full rounded\" />\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {Array.from({ length: 4 }).map((_, j) => (\n                    <Skeleton key={j} className=\"h-16 rounded-lg\" />\n                  ))}\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <Skeleton className=\"h-4 w-20\" />\n                  <Skeleton className=\"h-8 w-16\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":3407},"app/stations/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Switch } from \"@/components/ui/switch\"\nimport {\n  Zap,\n  Power,\n  Wifi,\n  WifiOff,\n  Search,\n  Filter,\n  RefreshCw,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Settings,\n  MoreVertical,\n  Car,\n  Cpu,\n  Battery,\n  Thermometer,\n} from \"lucide-react\"\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { SharedNavigation } from \"@/components/shared-navigation\"\n\ninterface StationData {\n  id: string\n  name: string\n  status: string\n  voltage: number\n  current: number\n  temp: number\n  power: number\n  location: string\n  address: string\n  apiKey: string\n  lastSync: string\n  relayStatus: boolean\n  firmwareVersion: string\n  connectedUser: string | null\n  carConnected: boolean\n  carModel: string | null\n  chargingProgress: number\n  mlThreatLevel: string\n  esp32Status: string\n  batteryLevel: number\n}\n\nexport default function StationsPage() {\n  const [stations, setStations] = useState<StationData[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [filterStatus, setFilterStatus] = useState(\"all\")\n\n  // Fetch stations data from API\n  const fetchStationsData = async () => {\n    try {\n      setLoading(true)\n      setError(null)\n      const response = await fetch('/api/stations')\n      if (!response.ok) {\n        throw new Error('Failed to fetch stations data')\n      }\n      const data = await response.json()\n      if (data.success) {\n        setStations(data.stations)\n      } else {\n        throw new Error(data.error || 'Failed to load stations')\n      }\n    } catch (error) {\n      console.error('Error fetching stations:', error)\n      setError(error instanceof Error ? error.message : 'Failed to load stations')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // Load data on component mount and set up periodic refresh\n  useEffect(() => {\n    fetchStationsData()\n    \n    // Refresh data every 3 seconds for real-time updates\n    const interval = setInterval(fetchStationsData, 3000)\n    \n    return () => clearInterval(interval)\n  }, [])\n\n  const filteredStations = stations.filter((station) => {\n    const matchesSearch =\n      station.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      station.id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      station.location.toLowerCase().includes(searchTerm.toLowerCase())\n    const matchesFilter = filterStatus === \"all\" || station.status === filterStatus\n    return matchesSearch && matchesFilter\n  })\n\n  const toggleRelay = (stationId: string) => {\n    setStations((prev) =>\n      prev.map((station) => (station.id === stationId ? { ...station, relayStatus: !station.relayStatus } : station)),\n    )\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <CheckCircle className=\"w-4 h-4 sm:w-5 sm:h-5 text-green-500 flex-shrink-0\" />\n      case \"threat\":\n        return <AlertTriangle className=\"w-4 h-4 sm:w-5 sm:h-5 text-red-500 flex-shrink-0\" />\n      case \"offline\":\n        return <XCircle className=\"w-4 h-4 sm:w-5 sm:h-5 text-gray-500 flex-shrink-0\" />\n      default:\n        return <XCircle className=\"w-4 h-4 sm:w-5 sm:h-5 text-gray-500 flex-shrink-0\" />\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-green-100 text-green-800 border-green-200\"\n      case \"threat\":\n        return \"bg-red-100 text-red-800 border-red-200\"\n      case \"offline\":\n        return \"bg-gray-100 text-gray-800 border-gray-200\"\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\"\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-green-50\">\n      <SharedNavigation currentPage=\"stations\" />\n\n      <div className=\"lg:ml-64 p-4 sm:p-6 space-y-4 sm:space-y-6 max-w-full overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div className=\"min-w-0\">\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800 flex items-center gap-2\">\n              <Zap className=\"w-6 h-6 sm:w-8 sm:h-8 text-purple-600 flex-shrink-0\" />\n              <span className=\"truncate\">Charging Stations</span>\n            </h1>\n            <p className=\"text-gray-600 mt-1 text-sm sm:text-base\">\n              Monitor and control your EV charging infrastructure\n            </p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              className=\"bg-white/80 text-xs sm:text-sm\"\n              onClick={fetchStationsData}\n              disabled={loading}\n            >\n              <RefreshCw className={`w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-2 ${loading ? 'animate-spin' : ''}`} />\n              <span className=\"hidden sm:inline\">{loading ? 'Refreshing...' : 'Refresh'}</span>\n            </Button>\n            <Button size=\"sm\" className=\"bg-gradient-to-r from-green-500 to-purple-500 text-white text-xs sm:text-sm\">\n              <Settings className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-2\" />\n              <span className=\"hidden sm:inline\">Configure</span>\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4\">\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-3 sm:p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0\">\n                  <p className=\"text-xs sm:text-sm text-gray-600 truncate\">Total Stations</p>\n                  <p className=\"text-lg sm:text-2xl font-bold text-gray-800\">{stations.length}</p>\n                </div>\n                <div className=\"w-8 h-8 sm:w-12 sm:h-12 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Zap className=\"w-4 h-4 sm:w-6 sm:h-6 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-3 sm:p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0\">\n                  <p className=\"text-xs sm:text-sm text-gray-600 truncate\">Active</p>\n                  <p className=\"text-lg sm:text-2xl font-bold text-green-600\">\n                    {stations.filter((s) => s.status === \"active\").length}\n                  </p>\n                </div>\n                <div className=\"w-8 h-8 sm:w-12 sm:h-12 bg-green-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <CheckCircle className=\"w-4 h-4 sm:w-6 sm:h-6 text-green-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-3 sm:p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0\">\n                  <p className=\"text-xs sm:text-sm text-gray-600 truncate\">Connected Cars</p>\n                  <p className=\"text-lg sm:text-2xl font-bold text-blue-600\">\n                    {stations.filter((s) => s.carConnected).length}\n                  </p>\n                </div>\n                <div className=\"w-8 h-8 sm:w-12 sm:h-12 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Car className=\"w-4 h-4 sm:w-6 sm:h-6 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-3 sm:p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0\">\n                  <p className=\"text-xs sm:text-sm text-gray-600 truncate\">ML Threats</p>\n                  <p className=\"text-lg sm:text-2xl font-bold text-red-600\">\n                    {stations.filter((s) => s.mlThreatLevel === \"high\").length}\n                  </p>\n                </div>\n                <div className=\"w-8 h-8 sm:w-12 sm:h-12 bg-red-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <AlertTriangle className=\"w-4 h-4 sm:w-6 sm:h-6 text-red-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Filter */}\n        <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n          <CardContent className=\"p-3 sm:p-4\">\n            <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search stations by name, ID, or location...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 bg-white/50 text-sm\"\n                />\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Filter className=\"w-4 h-4 text-gray-500 flex-shrink-0\" />\n                <select\n                  value={filterStatus}\n                  onChange={(e) => setFilterStatus(e.target.value)}\n                  className=\"px-3 py-2 bg-white/50 border border-gray-200 rounded-lg text-sm min-w-0\"\n                >\n                  <option value=\"all\">All Status</option>\n                  <option value=\"active\">Active</option>\n                  <option value=\"threat\">Threats</option>\n                  <option value=\"offline\">Offline</option>\n                </select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Loading State */}\n        {loading && !stations.length && (\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-6 sm:p-8 text-center\">\n              <RefreshCw className=\"w-8 h-8 sm:w-12 sm:h-12 text-gray-400 mx-auto mb-4 animate-spin\" />\n              <h3 className=\"text-base sm:text-lg font-semibold text-gray-800 mb-2\">Loading stations...</h3>\n              <p className=\"text-sm sm:text-base text-gray-600\">Fetching real-time data from API keys</p>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Error State */}\n        {error && (\n          <Card className=\"bg-red-50/80 backdrop-blur-xl border-red-200 shadow-lg\">\n            <CardContent className=\"p-6 sm:p-8 text-center\">\n              <AlertTriangle className=\"w-8 h-8 sm:w-12 sm:h-12 text-red-500 mx-auto mb-4\" />\n              <h3 className=\"text-base sm:text-lg font-semibold text-red-800 mb-2\">Error loading stations</h3>\n              <p className=\"text-sm sm:text-base text-red-600 mb-4\">{error}</p>\n              <Button onClick={fetchStationsData} className=\"bg-red-500 hover:bg-red-600\">\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Try Again\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Stations Grid */}\n        {!loading && !error && stations.length > 0 && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4 sm:gap-6\">\n            {filteredStations.map((station) => (\n              <Card\n                key={station.id}\n                className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg hover:shadow-xl transition-all duration-300\"\n              >\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2 sm:gap-3 min-w-0\">\n                    {getStatusIcon(station.status)}\n                    <div className=\"min-w-0\">\n                      <CardTitle className=\"text-sm sm:text-lg text-gray-800 truncate\">{station.name}</CardTitle>\n                      <p className=\"text-xs sm:text-sm text-gray-600 truncate\">\n                        {station.id} ‚Ä¢ {station.location}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-1 sm:gap-2 flex-shrink-0\">\n                    <Badge className={`${getStatusColor(station.status)} border text-xs`}>\n                      {station.status.toUpperCase()}\n                    </Badge>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"icon\" className=\"w-6 h-6 sm:w-8 sm:h-8\">\n                          <MoreVertical className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem>View Details</DropdownMenuItem>\n                        <DropdownMenuItem>Update Firmware</DropdownMenuItem>\n                        <DropdownMenuItem>Reset Station</DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-xs text-gray-600 bg-gray-50 p-2 rounded truncate\">üìç {station.address}</div>\n\n                {/* Car Connection Status */}\n                {station.carConnected ? (\n                  <div className=\"p-3 bg-gradient-to-r from-blue-50 to-green-50 rounded-lg border border-blue-100\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center space-x-2 min-w-0\">\n                        <Car className=\"w-4 h-4 text-blue-600 flex-shrink-0\" />\n                        <span className=\"text-sm font-medium text-blue-800 truncate\">{station.carModel}</span>\n                      </div>\n                      <span className=\"text-xs text-blue-600 flex-shrink-0\">{station.chargingProgress}%</span>\n                    </div>\n                    <Progress value={station.chargingProgress} className=\"h-2\" />\n                  </div>\n                ) : (\n                  <div className=\"p-3 bg-gray-50 rounded-lg border border-gray-200\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Car className=\"w-4 h-4 text-gray-400 flex-shrink-0\" />\n                      <span className=\"text-sm text-gray-600\">No car connected</span>\n                    </div>\n                  </div>\n                )}\n\n                {/* ESP32 ML Status */}\n                <div className=\"p-3 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border border-purple-100\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2 min-w-0\">\n                      <Cpu className=\"w-4 h-4 text-purple-600 flex-shrink-0\" />\n                      <span className=\"text-sm font-medium text-purple-800 truncate\">ESP32 ML</span>\n                    </div>\n                    <Badge\n                      variant={\n                        station.mlThreatLevel === \"safe\"\n                          ? \"default\"\n                          : station.mlThreatLevel === \"high\"\n                            ? \"destructive\"\n                            : \"secondary\"\n                      }\n                      className=\"text-xs flex-shrink-0\"\n                    >\n                      {station.mlThreatLevel.toUpperCase()}\n                    </Badge>\n                  </div>\n                </div>\n\n                {/* Metrics Grid */}\n                <div className=\"grid grid-cols-2 gap-2 sm:gap-3\">\n                  <div className=\"text-center p-2 sm:p-3 bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg\">\n                    <p className=\"text-xs text-blue-600 font-medium\">Voltage</p>\n                    <p className=\"text-sm sm:text-lg font-bold text-blue-800\">{station.voltage}V</p>\n                  </div>\n                  <div className=\"text-center p-2 sm:p-3 bg-gradient-to-br from-green-50 to-green-100 rounded-lg\">\n                    <p className=\"text-xs text-green-600 font-medium\">Current</p>\n                    <p className=\"text-sm sm:text-lg font-bold text-green-800\">{station.current}A</p>\n                  </div>\n                  <div className=\"text-center p-2 sm:p-3 bg-gradient-to-br from-orange-50 to-orange-100 rounded-lg\">\n                    <div className=\"flex items-center justify-center space-x-1\">\n                      <Thermometer className=\"w-3 h-3 text-orange-600\" />\n                      <p className=\"text-xs text-orange-600 font-medium\">Temp</p>\n                    </div>\n                    <p className=\"text-sm sm:text-lg font-bold text-orange-800\">{station.temp}¬∞C</p>\n                  </div>\n                  <div className=\"text-center p-2 sm:p-3 bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg\">\n                    <div className=\"flex items-center justify-center space-x-1\">\n                      <Battery className=\"w-3 h-3 text-purple-600\" />\n                      <p className=\"text-xs text-purple-600 font-medium\">Power</p>\n                    </div>\n                    <p className=\"text-sm sm:text-lg font-bold text-purple-800\">{station.power}kW</p>\n                  </div>\n                </div>\n\n                {/* Status Information */}\n                <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 pt-2 border-t border-gray-100\">\n                  <div className=\"flex items-center gap-2 sm:gap-4 text-sm min-w-0\">\n                    <div className=\"flex items-center gap-1\">\n                      {station.apiKey === \"active\" ? (\n                        <Wifi className=\"w-4 h-4 text-green-500 flex-shrink-0\" />\n                      ) : (\n                        <WifiOff className=\"w-4 h-4 text-red-500 flex-shrink-0\" />\n                      )}\n                      <span className=\"text-gray-600 text-xs sm:text-sm truncate\">API: {station.apiKey}</span>\n                    </div>\n                    <div className=\"text-gray-600 text-xs sm:text-sm truncate\">Last: {station.lastSync}</div>\n                  </div>\n                  <div className=\"flex items-center gap-2 sm:gap-3 flex-shrink-0\">\n                    <div className=\"flex items-center gap-1 sm:gap-2\">\n                      <span className=\"text-xs sm:text-sm text-gray-600\">Relay:</span>\n                      <Switch\n                        checked={station.relayStatus}\n                        onCheckedChange={() => toggleRelay(station.id)}\n                        className=\"data-[state=checked]:bg-green-500\"\n                      />\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"bg-white/50 hover:bg-white/80 p-1 sm:p-2\"\n                      onClick={() => toggleRelay(station.id)}\n                    >\n                      <Power className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Additional Info */}\n                <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 text-xs text-gray-500 bg-gray-50 p-2 rounded\">\n                  <span className=\"truncate\">Firmware: {station.firmwareVersion}</span>\n                  {station.connectedUser && <span className=\"truncate\">User: {station.connectedUser}</span>}\n                </div>\n              </CardContent>\n            </Card>\n            ))}\n          </div>\n        )}\n\n        {!loading && !error && filteredStations.length === 0 && stations.length > 0 && (\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-6 sm:p-8 text-center\">\n              <Zap className=\"w-8 h-8 sm:w-12 sm:h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-base sm:text-lg font-semibold text-gray-800 mb-2\">No stations found</h3>\n              <p className=\"text-sm sm:text-base text-gray-600\">Try adjusting your search or filter criteria.</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  )\n}\n","size_bytes":21002},"app/threats/loading.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\n\nexport default function ThreatsLoading() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-green-50\">\n      <div className=\"lg:ml-64 p-6 space-y-6\">\n        {/* Header Skeleton */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <Skeleton className=\"h-8 w-48 mb-2\" />\n            <Skeleton className=\"h-4 w-80\" />\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Skeleton className=\"h-9 w-24\" />\n            <Skeleton className=\"h-9 w-28\" />\n          </div>\n        </div>\n\n        {/* Stats Cards Skeleton */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Card key={i} className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Skeleton className=\"h-4 w-20 mb-2\" />\n                    <Skeleton className=\"h-6 w-8\" />\n                  </div>\n                  <Skeleton className=\"w-12 h-12 rounded-lg\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Search and Filter Skeleton */}\n        <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Skeleton className=\"h-10 flex-1\" />\n              <div className=\"flex items-center gap-2\">\n                <Skeleton className=\"h-4 w-4\" />\n                <Skeleton className=\"h-10 w-28\" />\n                <Skeleton className=\"h-10 w-28\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Threats List Skeleton */}\n        <div className=\"space-y-4\">\n          {Array.from({ length: 5 }).map((_, i) => (\n            <Card key={i} className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start gap-4\">\n                  <Skeleton className=\"w-5 h-5 rounded-full flex-shrink-0 mt-1\" />\n                  <div className=\"flex-1 space-y-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <Skeleton className=\"h-6 w-32\" />\n                      <Skeleton className=\"h-5 w-16 rounded-full\" />\n                      <Skeleton className=\"h-5 w-20 rounded-full\" />\n                    </div>\n                    <Skeleton className=\"h-4 w-full\" />\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3\">\n                      <Skeleton className=\"h-4 w-32\" />\n                      <Skeleton className=\"h-4 w-28\" />\n                      <Skeleton className=\"h-4 w-36\" />\n                      <Skeleton className=\"h-4 w-24\" />\n                    </div>\n                  </div>\n                  <Skeleton className=\"h-9 w-20 flex-shrink-0\" />\n                </div>\n                <div className=\"mt-4\">\n                  <Skeleton className=\"h-12 w-full rounded-lg\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":3494},"app/threats/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Shield, AlertTriangle, Search, Filter, Download, Eye, Clock, MapPin, Activity } from \"lucide-react\"\nimport { SharedNavigation } from \"@/components/shared-navigation\"\n\ninterface ThreatData {\n  id: string\n  timestamp: string\n  type: string\n  station: string\n  stationName: string\n  severity: string\n  status: string\n  description: string\n  source: string\n  action: string\n  mlConfidence: number\n  device_id?: string\n  details?: string\n}\n\nexport default function ThreatsPage() {\n  const [threats, setThreats] = useState<ThreatData[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [filterSeverity, setFilterSeverity] = useState(\"all\")\n  const [filterStatus, setFilterStatus] = useState(\"all\")\n\n  // Fetch all threat logs from API\n  const fetchThreats = async () => {\n    try {\n      setLoading(true)\n      setError(null)\n      const response = await fetch('/api/threats')\n      if (!response.ok) {\n        throw new Error('Failed to fetch threat logs')\n      }\n      const data = await response.json()\n      if (data.success) {\n        setThreats(data.threats)\n      } else {\n        throw new Error(data.error || 'Failed to load threat logs')\n      }\n    } catch (error) {\n      console.error('Error fetching threats:', error)\n      setError(error instanceof Error ? error.message : 'Failed to load threat logs')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // Load data on mount and set up real-time refresh\n  useEffect(() => {\n    fetchThreats()\n    \n    // Refresh every 5 seconds for real-time threat monitoring\n    const interval = setInterval(fetchThreats, 5000)\n    \n    return () => clearInterval(interval)\n  }, [])\n\n  const filteredThreats = threats.filter((threat) => {\n    const matchesSearch =\n      threat.type.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      threat.station.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      threat.stationName.toLowerCase().includes(searchTerm.toLowerCase())\n    const matchesSeverity = filterSeverity === \"all\" || threat.severity === filterSeverity\n    const matchesStatus = filterStatus === \"all\" || threat.status === filterStatus\n    return matchesSearch && matchesSeverity && matchesStatus\n  })\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case \"high\":\n        return \"bg-red-100 text-red-800 border-red-200\"\n      case \"medium\":\n        return \"bg-orange-100 text-orange-800 border-orange-200\"\n      case \"low\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\"\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\"\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"blocked\":\n        return \"bg-red-100 text-red-800 border-red-200\"\n      case \"mitigated\":\n        return \"bg-blue-100 text-blue-800 border-blue-200\"\n      case \"monitored\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\"\n      case \"resolved\":\n        return \"bg-green-100 text-green-800 border-green-200\"\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\"\n    }\n  }\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case \"high\":\n        return <AlertTriangle className=\"w-5 h-5 text-red-500\" />\n      case \"medium\":\n        return <AlertTriangle className=\"w-5 h-5 text-orange-500\" />\n      case \"low\":\n        return <AlertTriangle className=\"w-5 h-5 text-yellow-500\" />\n      default:\n        return <AlertTriangle className=\"w-5 h-5 text-gray-500\" />\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-green-50\">\n      <SharedNavigation currentPage=\"threats\" />\n\n      <div className=\"lg:ml-64 p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-800 flex items-center gap-2\">\n              <Shield className=\"w-8 h-8 text-red-600\" />\n              Threat Logs\n            </h1>\n            <p className=\"text-gray-600 mt-1\">Monitor and analyze security threats across your network</p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              className=\"bg-white/80\"\n              onClick={fetchThreats}\n              disabled={loading}\n            >\n              <Activity className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n              {loading ? 'Refreshing...' : 'Refresh'}\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" className=\"bg-white/80\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export All\n            </Button>\n            <div className=\"flex items-center gap-2 px-3 py-2 bg-green-100 rounded-full\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm font-medium text-green-700\">\n                Live Monitoring\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Threats</p>\n                  <p className=\"text-2xl font-bold text-gray-800\">{threats.length}</p>\n                </div>\n                <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                  <Shield className=\"w-6 h-6 text-red-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">High Severity</p>\n                  <p className=\"text-2xl font-bold text-red-600\">\n                    {threats.filter((t) => t.severity === \"high\").length}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                  <AlertTriangle className=\"w-6 h-6 text-red-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Blocked</p>\n                  <p className=\"text-2xl font-bold text-orange-600\">\n                    {threats.filter((t) => t.status === \"blocked\").length}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                  <Shield className=\"w-6 h-6 text-orange-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Resolved</p>\n                  <p className=\"text-2xl font-bold text-green-600\">\n                    {threats.filter((t) => t.status === \"resolved\").length}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <Activity className=\"w-6 h-6 text-green-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Filter */}\n        <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search threats by type, station, or description...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 bg-white/50\"\n                />\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Filter className=\"w-4 h-4 text-gray-500\" />\n                <select\n                  value={filterSeverity}\n                  onChange={(e) => setFilterSeverity(e.target.value)}\n                  className=\"px-3 py-2 bg-white/50 border border-gray-200 rounded-lg text-sm\"\n                >\n                  <option value=\"all\">All Severity</option>\n                  <option value=\"high\">High</option>\n                  <option value=\"medium\">Medium</option>\n                  <option value=\"low\">Low</option>\n                </select>\n                <select\n                  value={filterStatus}\n                  onChange={(e) => setFilterStatus(e.target.value)}\n                  className=\"px-3 py-2 bg-white/50 border border-gray-200 rounded-lg text-sm\"\n                >\n                  <option value=\"all\">All Status</option>\n                  <option value=\"blocked\">Blocked</option>\n                  <option value=\"mitigated\">Mitigated</option>\n                  <option value=\"monitored\">Monitored</option>\n                  <option value=\"resolved\">Resolved</option>\n                </select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Loading State */}\n        {loading && threats.length === 0 && (\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-8 text-center\">\n              <Activity className=\"w-12 h-12 text-gray-400 mx-auto mb-4 animate-spin\" />\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">Loading threat logs...</h3>\n              <p className=\"text-gray-600\">Fetching all security events from ESP32 devices</p>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Error State */}\n        {error && (\n          <Card className=\"bg-red-50/80 backdrop-blur-xl border-red-200 shadow-lg\">\n            <CardContent className=\"p-8 text-center\">\n              <AlertTriangle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-red-800 mb-2\">Error loading threat logs</h3>\n              <p className=\"text-red-600 mb-4\">{error}</p>\n              <Button onClick={fetchThreats} className=\"bg-red-500 hover:bg-red-600\">\n                <Activity className=\"w-4 h-4 mr-2\" />\n                Try Again\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Threats List */}\n        {!loading && !error && threats.length > 0 && (\n        <div className=\"space-y-4\">\n          {filteredThreats.map((threat) => (\n            <Card\n              key={threat.id}\n              className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg hover:shadow-xl transition-all duration-300\"\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"flex-shrink-0\">{getSeverityIcon(threat.severity)}</div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <h3 className=\"text-lg font-semibold text-gray-800\">{threat.type}</h3>\n                        <Badge className={`${getSeverityColor(threat.severity)} border text-xs`}>\n                          {threat.severity.toUpperCase()}\n                        </Badge>\n                        <Badge className={`${getStatusColor(threat.status)} border text-xs`}>\n                          {threat.status.toUpperCase()}\n                        </Badge>\n                      </div>\n                      <p className=\"text-gray-600 mb-3\">{threat.description}</p>\n                      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 text-sm\">\n                        <div className=\"flex items-center gap-1 text-gray-500\">\n                          <Clock className=\"w-4 h-4\" />\n                          <span>{threat.timestamp}</span>\n                        </div>\n                        <div className=\"flex items-center gap-1 text-gray-500\">\n                          <MapPin className=\"w-4 h-4\" />\n                          <span>\n                            {threat.station} - {threat.stationName}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-1 text-gray-500\">\n                          <Activity className=\"w-4 h-4\" />\n                          <span>ML Confidence: {threat.mlConfidence}%</span>\n                        </div>\n                        <div className=\"flex items-center gap-1 text-gray-500\">\n                          <span>Source: {threat.source}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Button variant=\"outline\" size=\"sm\" className=\"bg-white/50\">\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      Details\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n                  <p className=\"text-sm text-gray-700\">\n                    <strong>Action Taken:</strong> {threat.action}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        )}\n\n        {!loading && !error && filteredThreats.length === 0 && threats.length > 0 && (\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-8 text-center\">\n              <Shield className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">No threats match your filters</h3>\n              <p className=\"text-gray-600\">Try adjusting your search or filter criteria.</p>\n            </CardContent>\n          </Card>\n        )}\n\n        {!loading && !error && threats.length === 0 && (\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardContent className=\"p-8 text-center\">\n              <Shield className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">No threats found</h3>\n              <p className=\"text-gray-600\">Try adjusting your search or filter criteria.</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  )\n}\n","size_bytes":15788},"app/user-dashboard/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport {\n  Zap,\n  QrCode,\n  CreditCard,\n  Clock,\n  Battery,\n  Activity,\n  AlertTriangle,\n  CheckCircle,\n  LogOut,\n  Smartphone,\n} from \"lucide-react\"\nimport { useRouter } from \"next/navigation\"\n\n// Mock data for user's charging session\nconst userSession = {\n  stationId: \"ST003\",\n  stationName: \"Downtown Mall - Station 3\",\n  status: \"charging\",\n  startTime: \"2:30 PM\",\n  duration: \"45 min\",\n  batteryLevel: 78,\n  chargingRate: \"7.2 kW\",\n  voltage: \"240V\",\n  current: \"30A\",\n  cost: \"$12.50\",\n  estimatedCompletion: \"3:45 PM\",\n}\n\nconst chargingHistory = [\n  {\n    id: 1,\n    date: \"2024-01-15\",\n    station: \"ST003\",\n    duration: \"1h 20m\",\n    cost: \"$18.75\",\n    energy: \"25.4 kWh\",\n  },\n  {\n    id: 2,\n    date: \"2024-01-12\",\n    station: \"ST001\",\n    duration: \"55m\",\n    cost: \"$14.20\",\n    energy: \"18.8 kWh\",\n  },\n  {\n    id: 3,\n    date: \"2024-01-08\",\n    station: \"ST004\",\n    duration: \"2h 10m\",\n    cost: \"$28.90\",\n    energy: \"42.1 kWh\",\n  },\n]\n\nexport default function UserDashboard() {\n  const [isConnected, setIsConnected] = useState(false) // ESP32 connection status\n  const [activeSession, setActiveSession] = useState(false)\n  const [showQRScanner, setShowQRScanner] = useState(false)\n  const router = useRouter()\n\n  useEffect(() => {\n    // Check if user is logged in and has proper role\n    const userSession = localStorage.getItem(\"userSession\")\n    if (!userSession) {\n      router.push(\"/login\")\n      return\n    }\n\n    const session = JSON.parse(userSession)\n    if (session.role !== \"end_user\") {\n      router.push(\"/\") // Redirect admins to main dashboard\n      return\n    }\n\n    // Simulate ESP32 connection check\n    setIsConnected(false) // Set to false to show \"No Data Available\" state\n    setActiveSession(false) // No active session when ESP32 not connected\n  }, [router])\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"userSession\")\n    sessionStorage.clear()\n    router.push(\"/login\")\n  }\n\n  const handleQRScan = () => {\n    setShowQRScanner(true)\n    // In real app, this would open camera for QR scanning\n    setTimeout(() => {\n      // Simulate QR code scan result\n      const scannedStationId = \"ST003\"\n      setShowQRScanner(false)\n      handlePaymentFlow(scannedStationId)\n    }, 2000)\n  }\n\n  const handlePaymentFlow = (stationId: string) => {\n    // Simulate payment gateway redirect\n    alert(`Redirecting to payment gateway for Station ${stationId}...`)\n\n    // After successful payment, grant access\n    setTimeout(() => {\n      setActiveSession(true)\n      setIsConnected(true)\n      alert(\"Payment successful! Charging session started.\")\n    }, 1000)\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-green-50\">\n      {/* Header */}\n      <header className=\"bg-white/80 backdrop-blur-xl border-b border-white/20 shadow-sm sticky top-0 z-40\">\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-green-400 to-purple-400 rounded-lg flex items-center justify-center\">\n              <Zap className=\"w-5 h-5 text-white\" />\n            </div>\n            <span className=\"text-xl font-bold bg-gradient-to-r from-green-600 to-purple-600 bg-clip-text text-transparent\">\n              EV-Secure\n            </span>\n            <Badge variant=\"outline\" className=\"ml-2 bg-blue-50 text-blue-700 border-blue-200\">\n              User Dashboard\n            </Badge>\n          </div>\n          <Button\n            variant=\"outline\"\n            onClick={handleLogout}\n            className=\"bg-red-50 border-red-200 text-red-600 hover:bg-red-100\"\n          >\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            Logout\n          </Button>\n        </div>\n      </header>\n\n      <div className=\"p-4 sm:p-6 space-y-4 sm:space-y-6 max-w-4xl mx-auto\">\n        {/* Welcome Section */}\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800 mb-2\">Welcome to EV-Secure</h1>\n          <p className=\"text-gray-600\">Scan QR codes at charging stations to start your session</p>\n        </div>\n\n        {/* QR Code Scanner */}\n        <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n          <CardHeader>\n            <CardTitle className=\"text-gray-800 flex items-center gap-2\">\n              <QrCode className=\"w-5 h-5 text-purple-600\" />\n              Start Charging Session\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {!activeSession ? (\n              <div className=\"text-center py-8\">\n                <div className=\"w-24 h-24 bg-gradient-to-r from-green-100 to-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <QrCode className=\"w-12 h-12 text-purple-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">Scan QR Code</h3>\n                <p className=\"text-gray-600 mb-6\">Find a charging station and scan the QR code to start your session</p>\n                <Button\n                  onClick={handleQRScan}\n                  className=\"bg-gradient-to-r from-green-500 to-purple-500 text-white\"\n                  disabled={showQRScanner}\n                >\n                  {showQRScanner ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                      <span>Scanning...</span>\n                    </div>\n                  ) : (\n                    <>\n                      <Smartphone className=\"w-4 h-4 mr-2\" />\n                      Open QR Scanner\n                    </>\n                  )}\n                </Button>\n              </div>\n            ) : (\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span className=\"font-semibold text-green-800\">Session Active</span>\n                </div>\n                <p className=\"text-green-700\">You have access to {userSession.stationName}</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Current Session */}\n        {activeSession && isConnected ? (\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-800 flex items-center gap-2\">\n                <Activity className=\"w-5 h-5 text-green-600\" />\n                Current Charging Session\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-semibold text-gray-800 mb-2\">Station Information</h4>\n                    <p className=\"text-gray-600\">{userSession.stationName}</p>\n                    <Badge variant=\"outline\" className=\"mt-1 bg-green-50 text-green-700 border-green-200\">\n                      {userSession.status}\n                    </Badge>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold text-gray-800 mb-2\">Session Details</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Start Time:</span>\n                        <span className=\"font-medium\">{userSession.startTime}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Duration:</span>\n                        <span className=\"font-medium\">{userSession.duration}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Cost:</span>\n                        <span className=\"font-medium text-green-600\">{userSession.cost}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-semibold text-gray-800 mb-2\">Battery Status</h4>\n                    <div className=\"flex items-center space-x-3\">\n                      <Battery className=\"w-8 h-8 text-green-600\" />\n                      <div className=\"flex-1\">\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span>Battery Level</span>\n                          <span className=\"font-medium\">{userSession.batteryLevel}%</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                          <div\n                            className=\"bg-green-500 h-2 rounded-full transition-all duration-300\"\n                            style={{ width: `${userSession.batteryLevel}%` }}\n                          ></div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold text-gray-800 mb-2\">Live Metrics</h4>\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div className=\"bg-blue-50 p-3 rounded-lg\">\n                        <p className=\"text-blue-600 font-medium\">Charging Rate</p>\n                        <p className=\"text-lg font-bold text-blue-800\">{userSession.chargingRate}</p>\n                      </div>\n                      <div className=\"bg-purple-50 p-3 rounded-lg\">\n                        <p className=\"text-purple-600 font-medium\">Voltage</p>\n                        <p className=\"text-lg font-bold text-purple-800\">{userSession.voltage}</p>\n                      </div>\n                      <div className=\"bg-orange-50 p-3 rounded-lg\">\n                        <p className=\"text-orange-600 font-medium\">Current</p>\n                        <p className=\"text-lg font-bold text-orange-800\">{userSession.current}</p>\n                      </div>\n                      <div className=\"bg-green-50 p-3 rounded-lg\">\n                        <p className=\"text-green-600 font-medium\">Est. Complete</p>\n                        <p className=\"text-lg font-bold text-green-800\">{userSession.estimatedCompletion}</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-6 flex justify-center\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setActiveSession(false)\n                    setIsConnected(false)\n                    alert(\"Charging session ended.\")\n                  }}\n                  className=\"bg-red-50 border-red-200 text-red-600 hover:bg-red-100\"\n                >\n                  End Session\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ) : activeSession && !isConnected ? (\n          <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-800 flex items-center gap-2\">\n                <AlertTriangle className=\"w-5 h-5 text-orange-600\" />\n                Session Status\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8\">\n                <AlertTriangle className=\"w-16 h-16 text-orange-500 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">No Data Available</h3>\n                <p className=\"text-gray-600 mb-4\">\n                  ESP32-S3 station is not connected. Unable to retrieve live charging data.\n                </p>\n                <Badge variant=\"outline\" className=\"bg-orange-50 text-orange-700 border-orange-200\">\n                  ESP32-S3 Disconnected\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n        ) : null}\n\n        {/* Charging History */}\n        <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n          <CardHeader>\n            <CardTitle className=\"text-gray-800 flex items-center gap-2\">\n              <Clock className=\"w-5 h-5 text-blue-600\" />\n              Charging History\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {chargingHistory.map((session) => (\n                <div key={session.id} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                  <div>\n                    <p className=\"font-medium text-gray-800\">{session.station}</p>\n                    <p className=\"text-sm text-gray-600\">{session.date}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium text-gray-800\">{session.cost}</p>\n                    <p className=\"text-sm text-gray-600\">\n                      {session.duration} ‚Ä¢ {session.energy}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Payment Methods */}\n        <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-lg\">\n          <CardHeader>\n            <CardTitle className=\"text-gray-800 flex items-center gap-2\">\n              <CreditCard className=\"w-5 h-5 text-green-600\" />\n              Payment Methods\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center py-6\">\n              <CreditCard className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">Secure Payment</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Payment is processed securely when you scan QR codes at charging stations\n              </p>\n              <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n                SSL Encrypted\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Access Limitations Notice */}\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <AlertTriangle className=\"w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5\" />\n            <div>\n              <h4 className=\"font-semibold text-blue-800 mb-1\">Limited Access Account</h4>\n              <p className=\"text-sm text-blue-700\">\n                As an end user, you can only access charging stations through QR code scanning and payment. You cannot\n                view other stations' data or access administrative functions.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":15411},"components/ui/accordion.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDownIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Accordion({\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Root>) {\n  return <AccordionPrimitive.Root data-slot=\"accordion\" {...props} />\n}\n\nfunction AccordionItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn(\"border-b last:border-b-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AccordionTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(\n          \"focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}\n\nfunction AccordionContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Content>) {\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-content\"\n      className=\"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm\"\n      {...props}\n    >\n      <div className={cn(\"pt-0 pb-4\", className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  )\n}\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2053},"components/ui/alert-dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nfunction AlertDialog({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {\n  return <AlertDialogPrimitive.Root data-slot=\"alert-dialog\" {...props} />\n}\n\nfunction AlertDialogTrigger({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {\n  return (\n    <AlertDialogPrimitive.Trigger data-slot=\"alert-dialog-trigger\" {...props} />\n  )\n}\n\nfunction AlertDialogPortal({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {\n  return (\n    <AlertDialogPrimitive.Portal data-slot=\"alert-dialog-portal\" {...props} />\n  )\n}\n\nfunction AlertDialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {\n  return (\n    <AlertDialogPrimitive.Overlay\n      data-slot=\"alert-dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {\n  return (\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogPrimitive.Content\n        data-slot=\"alert-dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      />\n    </AlertDialogPortal>\n  )\n}\n\nfunction AlertDialogHeader({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogFooter({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {\n  return (\n    <AlertDialogPrimitive.Title\n      data-slot=\"alert-dialog-title\"\n      className={cn(\"text-lg font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {\n  return (\n    <AlertDialogPrimitive.Description\n      data-slot=\"alert-dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogAction({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {\n  return (\n    <AlertDialogPrimitive.Action\n      className={cn(buttonVariants(), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogCancel({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {\n  return (\n    <AlertDialogPrimitive.Cancel\n      className={cn(buttonVariants({ variant: \"outline\" }), className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":3864},"components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-card text-card-foreground\",\n        destructive:\n          \"text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Alert({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof alertVariants>) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-title\"\n      className={cn(\n        \"col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDescription({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn(\n        \"text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1614},"components/ui/aspect-ratio.tsx":{"content":"\"use client\"\n\nimport * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nfunction AspectRatio({\n  ...props\n}: React.ComponentProps<typeof AspectRatioPrimitive.Root>) {\n  return <AspectRatioPrimitive.Root data-slot=\"aspect-ratio\" {...props} />\n}\n\nexport { AspectRatio }\n","size_bytes":280},"components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        \"relative flex size-8 shrink-0 overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn(\"aspect-square size-full\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        \"bg-muted flex size-full items-center justify-center rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1097},"components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1631},"components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Breadcrumb({ ...props }: React.ComponentProps<\"nav\">) {\n  return <nav aria-label=\"breadcrumb\" data-slot=\"breadcrumb\" {...props} />\n}\n\nfunction BreadcrumbList({ className, ...props }: React.ComponentProps<\"ol\">) {\n  return (\n    <ol\n      data-slot=\"breadcrumb-list\"\n      className={cn(\n        \"text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"breadcrumb-item\"\n      className={cn(\"inline-flex items-center gap-1.5\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbLink({\n  asChild,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"breadcrumb-link\"\n      className={cn(\"hover:text-foreground transition-colors\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbPage({ className, ...props }: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"breadcrumb-page\"\n      role=\"link\"\n      aria-disabled=\"true\"\n      aria-current=\"page\"\n      className={cn(\"text-foreground font-normal\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbSeparator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"breadcrumb-separator\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\"[&>svg]:size-3.5\", className)}\n      {...props}\n    >\n      {children ?? <ChevronRight />}\n    </li>\n  )\n}\n\nfunction BreadcrumbEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"breadcrumb-ellipsis\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\"flex size-9 items-center justify-center\", className)}\n      {...props}\n    >\n      <MoreHorizontal className=\"size-4\" />\n      <span className=\"sr-only\">More</span>\n    </span>\n  )\n}\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2357},"components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n","size_bytes":2123},"components/ui/calendar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from \"lucide-react\"\nimport { DayButton, DayPicker, getDefaultClassNames } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, buttonVariants } from \"@/components/ui/button\"\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = \"label\",\n  buttonVariant = \"ghost\",\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>[\"variant\"]\n}) {\n  const defaultClassNames = getDefaultClassNames()\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        \"bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent\",\n        String.raw`rtl:**:[.rdp-button\\_next>svg]:rotate-180`,\n        String.raw`rtl:**:[.rdp-button\\_previous>svg]:rotate-180`,\n        className\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) =>\n          date.toLocaleString(\"default\", { month: \"short\" }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cn(\"w-fit\", defaultClassNames.root),\n        months: cn(\n          \"flex gap-4 flex-col md:flex-row relative\",\n          defaultClassNames.months\n        ),\n        month: cn(\"flex flex-col w-full gap-4\", defaultClassNames.month),\n        nav: cn(\n          \"flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between\",\n          defaultClassNames.nav\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"size-(--cell-size) aria-disabled:opacity-50 p-0 select-none\",\n          defaultClassNames.button_previous\n        ),\n        button_next: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"size-(--cell-size) aria-disabled:opacity-50 p-0 select-none\",\n          defaultClassNames.button_next\n        ),\n        month_caption: cn(\n          \"flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)\",\n          defaultClassNames.month_caption\n        ),\n        dropdowns: cn(\n          \"w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5\",\n          defaultClassNames.dropdowns\n        ),\n        dropdown_root: cn(\n          \"relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md\",\n          defaultClassNames.dropdown_root\n        ),\n        dropdown: cn(\n          \"absolute bg-popover inset-0 opacity-0\",\n          defaultClassNames.dropdown\n        ),\n        caption_label: cn(\n          \"select-none font-medium\",\n          captionLayout === \"label\"\n            ? \"text-sm\"\n            : \"rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5\",\n          defaultClassNames.caption_label\n        ),\n        table: \"w-full border-collapse\",\n        weekdays: cn(\"flex\", defaultClassNames.weekdays),\n        weekday: cn(\n          \"text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none\",\n          defaultClassNames.weekday\n        ),\n        week: cn(\"flex w-full mt-2\", defaultClassNames.week),\n        week_number_header: cn(\n          \"select-none w-(--cell-size)\",\n          defaultClassNames.week_number_header\n        ),\n        week_number: cn(\n          \"text-[0.8rem] select-none text-muted-foreground\",\n          defaultClassNames.week_number\n        ),\n        day: cn(\n          \"relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none\",\n          defaultClassNames.day\n        ),\n        range_start: cn(\n          \"rounded-l-md bg-accent\",\n          defaultClassNames.range_start\n        ),\n        range_middle: cn(\"rounded-none\", defaultClassNames.range_middle),\n        range_end: cn(\"rounded-r-md bg-accent\", defaultClassNames.range_end),\n        today: cn(\n          \"bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none\",\n          defaultClassNames.today\n        ),\n        outside: cn(\n          \"text-muted-foreground aria-selected:text-muted-foreground\",\n          defaultClassNames.outside\n        ),\n        disabled: cn(\n          \"text-muted-foreground opacity-50\",\n          defaultClassNames.disabled\n        ),\n        hidden: cn(\"invisible\", defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          )\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === \"left\") {\n            return (\n              <ChevronLeftIcon className={cn(\"size-4\", className)} {...props} />\n            )\n          }\n\n          if (orientation === \"right\") {\n            return (\n              <ChevronRightIcon\n                className={cn(\"size-4\", className)}\n                {...props}\n              />\n            )\n          }\n\n          return (\n            <ChevronDownIcon className={cn(\"size-4\", className)} {...props} />\n          )\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-(--cell-size) items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          )\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames()\n\n  const ref = React.useRef<HTMLButtonElement>(null)\n  React.useEffect(() => {\n    if (modifiers.focused) ref.current?.focus()\n  }, [modifiers.focused])\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        \"data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70\",\n        defaultClassNames.day,\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Calendar, CalendarDayButton }\n","size_bytes":7660},"components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1989},"components/ui/carousel.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nfunction Carousel({\n  orientation = \"horizontal\",\n  opts,\n  setApi,\n  plugins,\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & CarouselProps) {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n    },\n    plugins\n  )\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) return\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === \"ArrowLeft\") {\n        event.preventDefault()\n        scrollPrev()\n      } else if (event.key === \"ArrowRight\") {\n        event.preventDefault()\n        scrollNext()\n      }\n    },\n    [scrollPrev, scrollNext]\n  )\n\n  React.useEffect(() => {\n    if (!api || !setApi) return\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) return\n    onSelect(api)\n    api.on(\"reInit\", onSelect)\n    api.on(\"select\", onSelect)\n\n    return () => {\n      api?.off(\"select\", onSelect)\n    }\n  }, [api, onSelect])\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation:\n          orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}\n    >\n      <div\n        onKeyDownCapture={handleKeyDown}\n        className={cn(\"relative\", className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        data-slot=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  )\n}\n\nfunction CarouselContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div\n      ref={carouselRef}\n      className=\"overflow-hidden\"\n      data-slot=\"carousel-content\"\n    >\n      <div\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CarouselItem({ className, ...props }: React.ComponentProps<\"div\">) {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      data-slot=\"carousel-item\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CarouselPrevious({\n  className,\n  variant = \"outline\",\n  size = \"icon\",\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-previous\"\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute size-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"top-1/2 -left-12 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n}\n\nfunction CarouselNext({\n  className,\n  variant = \"outline\",\n  size = \"icon\",\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-next\"\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute size-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"top-1/2 -right-12 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n}\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":5556},"components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  config: ChartConfig\n  children: React.ComponentProps<\n    typeof RechartsPrimitive.ResponsiveContainer\n  >[\"children\"]\n}) {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = \"dot\",\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<\"div\"> & {\n    hideLabel?: boolean\n    hideIndicator?: boolean\n    indicator?: \"line\" | \"dot\" | \"dashed\"\n    nameKey?: string\n    labelKey?: string\n  }) {\n  const { config } = useChart()\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null\n    }\n\n    const [item] = payload\n    const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n    const value =\n      !labelKey && typeof label === \"string\"\n        ? config[label as keyof typeof config]?.label || label\n        : itemConfig?.label\n\n    if (labelFormatter) {\n      return (\n        <div className={cn(\"font-medium\", labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>\n      )\n    }\n\n    if (!value) {\n      return null\n    }\n\n    return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n  }, [\n    label,\n    labelFormatter,\n    payload,\n    hideLabel,\n    labelClassName,\n    config,\n    labelKey,\n  ])\n\n  if (!active || !payload?.length) {\n    return null\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n  return (\n    <div\n      className={cn(\n        \"border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl\",\n        className\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n          const indicatorColor = color || item.payload.fill || item.color\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                \"[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5\",\n                indicator === \"dot\" && \"items-center\"\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn(\n                          \"shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)\",\n                          {\n                            \"h-2.5 w-2.5\": indicator === \"dot\",\n                            \"w-1\": indicator === \"line\",\n                            \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                              indicator === \"dashed\",\n                            \"my-0.5\": nestLabel && indicator === \"dashed\",\n                          }\n                        )}\n                        style={\n                          {\n                            \"--color-bg\": indicatorColor,\n                            \"--color-border\": indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn(\n                      \"flex flex-1 justify-between leading-none\",\n                      nestLabel ? \"items-end\" : \"items-center\"\n                    )}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">\n                        {itemConfig?.label || item.name}\n                      </span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = \"bottom\",\n  nameKey,\n}: React.ComponentProps<\"div\"> &\n  Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n    hideIcon?: boolean\n    nameKey?: string\n  }) {\n  const { config } = useChart()\n\n  if (!payload?.length) {\n    return null\n  }\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center justify-center gap-4\",\n        verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n        className\n      )}\n    >\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || \"value\"}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n        return (\n          <div\n            key={item.value}\n            className={cn(\n              \"[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3\"\n            )}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":9781},"components/ui/checkbox.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { CheckIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Checkbox({\n  className,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        \"peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"flex items-center justify-center text-current transition-none\"\n      >\n        <CheckIcon className=\"size-3.5\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  )\n}\n\nexport { Checkbox }\n","size_bytes":1226},"components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nfunction Collapsible({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {\n  return <CollapsiblePrimitive.Root data-slot=\"collapsible\" {...props} />\n}\n\nfunction CollapsibleTrigger({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleTrigger\n      data-slot=\"collapsible-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction CollapsibleContent({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleContent\n      data-slot=\"collapsible-content\"\n      {...props}\n    />\n  )\n}\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":800},"components/ui/command.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { SearchIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\n\nfunction Command({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      data-slot=\"command\"\n      className={cn(\n        \"bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandDialog({\n  title = \"Command Palette\",\n  description = \"Search for a command to run...\",\n  children,\n  className,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof Dialog> & {\n  title?: string\n  description?: string\n  className?: string\n  showCloseButton?: boolean\n}) {\n  return (\n    <Dialog {...props}>\n      <DialogHeader className=\"sr-only\">\n        <DialogTitle>{title}</DialogTitle>\n        <DialogDescription>{description}</DialogDescription>\n      </DialogHeader>\n      <DialogContent\n        className={cn(\"overflow-hidden p-0\", className)}\n        showCloseButton={showCloseButton}\n      >\n        <Command className=\"[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nfunction CommandInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div\n      data-slot=\"command-input-wrapper\"\n      className=\"flex h-9 items-center gap-2 border-b px-3\"\n    >\n      <SearchIcon className=\"size-4 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        data-slot=\"command-input\"\n        className={cn(\n          \"placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CommandList({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn(\n        \"max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandEmpty({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return (\n    <CommandPrimitive.Empty\n      data-slot=\"command-empty\"\n      className=\"py-6 text-center text-sm\"\n      {...props}\n    />\n  )\n}\n\nfunction CommandGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        \"text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn(\"bg-border -mx-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CommandItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        \"data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"command-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4818},"components/ui/context-menu.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction ContextMenu({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {\n  return <ContextMenuPrimitive.Root data-slot=\"context-menu\" {...props} />\n}\n\nfunction ContextMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {\n  return (\n    <ContextMenuPrimitive.Trigger data-slot=\"context-menu-trigger\" {...props} />\n  )\n}\n\nfunction ContextMenuGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {\n  return (\n    <ContextMenuPrimitive.Group data-slot=\"context-menu-group\" {...props} />\n  )\n}\n\nfunction ContextMenuPortal({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {\n  return (\n    <ContextMenuPrimitive.Portal data-slot=\"context-menu-portal\" {...props} />\n  )\n}\n\nfunction ContextMenuSub({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {\n  return <ContextMenuPrimitive.Sub data-slot=\"context-menu-sub\" {...props} />\n}\n\nfunction ContextMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {\n  return (\n    <ContextMenuPrimitive.RadioGroup\n      data-slot=\"context-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.SubTrigger\n      data-slot=\"context-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto\" />\n    </ContextMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction ContextMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {\n  return (\n    <ContextMenuPrimitive.SubContent\n      data-slot=\"context-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {\n  return (\n    <ContextMenuPrimitive.Portal>\n      <ContextMenuPrimitive.Content\n        data-slot=\"context-menu-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-context-menu-content-available-height) min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </ContextMenuPrimitive.Portal>\n  )\n}\n\nfunction ContextMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <ContextMenuPrimitive.Item\n      data-slot=\"context-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {\n  return (\n    <ContextMenuPrimitive.CheckboxItem\n      data-slot=\"context-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction ContextMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {\n  return (\n    <ContextMenuPrimitive.RadioItem\n      data-slot=\"context-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.RadioItem>\n  )\n}\n\nfunction ContextMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.Label\n      data-slot=\"context-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {\n  return (\n    <ContextMenuPrimitive.Separator\n      data-slot=\"context-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"context-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":8222},"components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n","size_bytes":3982},"components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Drawer({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) {\n  return <DrawerPrimitive.Root data-slot=\"drawer\" {...props} />\n}\n\nfunction DrawerTrigger({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {\n  return <DrawerPrimitive.Trigger data-slot=\"drawer-trigger\" {...props} />\n}\n\nfunction DrawerPortal({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {\n  return <DrawerPrimitive.Portal data-slot=\"drawer-portal\" {...props} />\n}\n\nfunction DrawerClose({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Close>) {\n  return <DrawerPrimitive.Close data-slot=\"drawer-close\" {...props} />\n}\n\nfunction DrawerOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {\n  return (\n    <DrawerPrimitive.Overlay\n      data-slot=\"drawer-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Content>) {\n  return (\n    <DrawerPortal data-slot=\"drawer-portal\">\n      <DrawerOverlay />\n      <DrawerPrimitive.Content\n        data-slot=\"drawer-content\"\n        className={cn(\n          \"group/drawer-content bg-background fixed z-50 flex h-auto flex-col\",\n          \"data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b\",\n          \"data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t\",\n          \"data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm\",\n          \"data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm\",\n          className\n        )}\n        {...props}\n      >\n        <div className=\"bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block\" />\n        {children}\n      </DrawerPrimitive.Content>\n    </DrawerPortal>\n  )\n}\n\nfunction DrawerHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"drawer-header\"\n      className={cn(\n        \"flex flex-col gap-0.5 p-4 group-data-[vaul-drawer-direction=bottom]/drawer-content:text-center group-data-[vaul-drawer-direction=top]/drawer-content:text-center md:gap-1.5 md:text-left\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"drawer-footer\"\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Title>) {\n  return (\n    <DrawerPrimitive.Title\n      data-slot=\"drawer-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Description>) {\n  return (\n    <DrawerPrimitive.Description\n      data-slot=\"drawer-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":4255},"components/ui/dropdown-menu.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n","size_bytes":8284},"components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useFormState,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({ name: fieldContext.name })\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<\"div\">) {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        data-slot=\"form-item\"\n        className={cn(\"grid gap-2\", className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  )\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn(\"data-[error=true]:text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn(\"text-destructive text-sm\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":3759},"components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction HoverCard({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Root>) {\n  return <HoverCardPrimitive.Root data-slot=\"hover-card\" {...props} />\n}\n\nfunction HoverCardTrigger({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {\n  return (\n    <HoverCardPrimitive.Trigger data-slot=\"hover-card-trigger\" {...props} />\n  )\n}\n\nfunction HoverCardContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {\n  return (\n    <HoverCardPrimitive.Portal data-slot=\"hover-card-portal\">\n      <HoverCardPrimitive.Content\n        data-slot=\"hover-card-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-64 origin-(--radix-hover-card-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className\n        )}\n        {...props}\n      />\n    </HoverCardPrimitive.Portal>\n  )\n}\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1532},"components/ui/input-otp.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { MinusIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction InputOTP({\n  className,\n  containerClassName,\n  ...props\n}: React.ComponentProps<typeof OTPInput> & {\n  containerClassName?: string\n}) {\n  return (\n    <OTPInput\n      data-slot=\"input-otp\"\n      containerClassName={cn(\n        \"flex items-center gap-2 has-disabled:opacity-50\",\n        containerClassName\n      )}\n      className={cn(\"disabled:cursor-not-allowed\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"input-otp-group\"\n      className={cn(\"flex items-center\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPSlot({\n  index,\n  className,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  index: number\n}) {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}\n\n  return (\n    <div\n      data-slot=\"input-otp-slot\"\n      data-active={isActive}\n      className={cn(\n        \"data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"animate-caret-blink bg-foreground h-4 w-px duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n}\n\nfunction InputOTPSeparator({ ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div data-slot=\"input-otp-separator\" role=\"separator\" {...props}>\n      <MinusIcon />\n    </div>\n  )\n}\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2254},"components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n","size_bytes":967},"components/ui/label.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n","size_bytes":611},"components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Menubar({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Root>) {\n  return (\n    <MenubarPrimitive.Root\n      data-slot=\"menubar\"\n      className={cn(\n        \"bg-background flex h-9 items-center gap-1 rounded-md border p-1 shadow-xs\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu data-slot=\"menubar-menu\" {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group data-slot=\"menubar-group\" {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal data-slot=\"menubar-portal\" {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return (\n    <MenubarPrimitive.RadioGroup data-slot=\"menubar-radio-group\" {...props} />\n  )\n}\n\nfunction MenubarTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Trigger>) {\n  return (\n    <MenubarPrimitive.Trigger\n      data-slot=\"menubar-trigger\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex items-center rounded-sm px-2 py-1 text-sm font-medium outline-hidden select-none\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarContent({\n  className,\n  align = \"start\",\n  alignOffset = -4,\n  sideOffset = 8,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Content>) {\n  return (\n    <MenubarPortal>\n      <MenubarPrimitive.Content\n        data-slot=\"menubar-content\"\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[12rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPortal>\n  )\n}\n\nfunction MenubarItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <MenubarPrimitive.Item\n      data-slot=\"menubar-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.CheckboxItem>) {\n  return (\n    <MenubarPrimitive.CheckboxItem\n      data-slot=\"menubar-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.CheckboxItem>\n  )\n}\n\nfunction MenubarRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioItem>) {\n  return (\n    <MenubarPrimitive.RadioItem\n      data-slot=\"menubar-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.RadioItem>\n  )\n}\n\nfunction MenubarLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <MenubarPrimitive.Label\n      data-slot=\"menubar-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Separator>) {\n  return (\n    <MenubarPrimitive.Separator\n      data-slot=\"menubar-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"menubar-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nfunction MenubarSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <MenubarPrimitive.SubTrigger\n      data-slot=\"menubar-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-none select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto h-4 w-4\" />\n    </MenubarPrimitive.SubTrigger>\n  )\n}\n\nfunction MenubarSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.SubContent>) {\n  return (\n    <MenubarPrimitive.SubContent\n      data-slot=\"menubar-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Menubar,\n  MenubarPortal,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarGroup,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarItem,\n  MenubarShortcut,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSub,\n  MenubarSubTrigger,\n  MenubarSubContent,\n}\n","size_bytes":8394},"components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDownIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction NavigationMenu({\n  className,\n  children,\n  viewport = true,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {\n  viewport?: boolean\n}) {\n  return (\n    <NavigationMenuPrimitive.Root\n      data-slot=\"navigation-menu\"\n      data-viewport={viewport}\n      className={cn(\n        \"group/navigation-menu relative flex max-w-max flex-1 items-center justify-center\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      {viewport && <NavigationMenuViewport />}\n    </NavigationMenuPrimitive.Root>\n  )\n}\n\nfunction NavigationMenuList({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {\n  return (\n    <NavigationMenuPrimitive.List\n      data-slot=\"navigation-menu-list\"\n      className={cn(\n        \"group flex flex-1 list-none items-center justify-center gap-1\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {\n  return (\n    <NavigationMenuPrimitive.Item\n      data-slot=\"navigation-menu-item\"\n      className={cn(\"relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1\"\n)\n\nfunction NavigationMenuTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {\n  return (\n    <NavigationMenuPrimitive.Trigger\n      data-slot=\"navigation-menu-trigger\"\n      className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n      {...props}\n    >\n      {children}{\" \"}\n      <ChevronDownIcon\n        className=\"relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180\"\n        aria-hidden=\"true\"\n      />\n    </NavigationMenuPrimitive.Trigger>\n  )\n}\n\nfunction NavigationMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {\n  return (\n    <NavigationMenuPrimitive.Content\n      data-slot=\"navigation-menu-content\"\n      className={cn(\n        \"data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto\",\n        \"group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuViewport({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {\n  return (\n    <div\n      className={cn(\n        \"absolute top-full left-0 isolate z-50 flex justify-center\"\n      )}\n    >\n      <NavigationMenuPrimitive.Viewport\n        data-slot=\"navigation-menu-viewport\"\n        className={cn(\n          \"origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction NavigationMenuLink({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {\n  return (\n    <NavigationMenuPrimitive.Link\n      data-slot=\"navigation-menu-link\"\n      className={cn(\n        \"data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuIndicator({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {\n  return (\n    <NavigationMenuPrimitive.Indicator\n      data-slot=\"navigation-menu-indicator\"\n      className={cn(\n        \"data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md\" />\n    </NavigationMenuPrimitive.Indicator>\n  )\n}\n\nexport {\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n  navigationMenuTriggerStyle,\n}\n","size_bytes":6664},"components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  MoreHorizontalIcon,\n} from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, buttonVariants } from \"@/components/ui/button\"\n\nfunction Pagination({ className, ...props }: React.ComponentProps<\"nav\">) {\n  return (\n    <nav\n      role=\"navigation\"\n      aria-label=\"pagination\"\n      data-slot=\"pagination\"\n      className={cn(\"mx-auto flex w-full justify-center\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationContent({\n  className,\n  ...props\n}: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"pagination-content\"\n      className={cn(\"flex flex-row items-center gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationItem({ ...props }: React.ComponentProps<\"li\">) {\n  return <li data-slot=\"pagination-item\" {...props} />\n}\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<React.ComponentProps<typeof Button>, \"size\"> &\n  React.ComponentProps<\"a\">\n\nfunction PaginationLink({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) {\n  return (\n    <a\n      aria-current={isActive ? \"page\" : undefined}\n      data-slot=\"pagination-link\"\n      data-active={isActive}\n      className={cn(\n        buttonVariants({\n          variant: isActive ? \"outline\" : \"ghost\",\n          size,\n        }),\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationPrevious({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to previous page\"\n      size=\"default\"\n      className={cn(\"gap-1 px-2.5 sm:pl-2.5\", className)}\n      {...props}\n    >\n      <ChevronLeftIcon />\n      <span className=\"hidden sm:block\">Previous</span>\n    </PaginationLink>\n  )\n}\n\nfunction PaginationNext({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to next page\"\n      size=\"default\"\n      className={cn(\"gap-1 px-2.5 sm:pr-2.5\", className)}\n      {...props}\n    >\n      <span className=\"hidden sm:block\">Next</span>\n      <ChevronRightIcon />\n    </PaginationLink>\n  )\n}\n\nfunction PaginationEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      aria-hidden\n      data-slot=\"pagination-ellipsis\"\n      className={cn(\"flex size-9 items-center justify-center\", className)}\n      {...props}\n    >\n      <MoreHorizontalIcon className=\"size-4\" />\n      <span className=\"sr-only\">More pages</span>\n    </span>\n  )\n}\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2712},"components/ui/popover.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}\n\nfunction PopoverContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1635},"components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Progress({\n  className,\n  value,\n  ...props\n}: React.ComponentProps<typeof ProgressPrimitive.Root>) {\n  return (\n    <ProgressPrimitive.Root\n      data-slot=\"progress\"\n      className={cn(\n        \"bg-primary/20 relative h-2 w-full overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    >\n      <ProgressPrimitive.Indicator\n        data-slot=\"progress-indicator\"\n        className=\"bg-primary h-full w-full flex-1 transition-all\"\n        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n      />\n    </ProgressPrimitive.Root>\n  )\n}\n\nexport { Progress }\n","size_bytes":740},"components/ui/radio-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction RadioGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {\n  return (\n    <RadioGroupPrimitive.Root\n      data-slot=\"radio-group\"\n      className={cn(\"grid gap-3\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction RadioGroupItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {\n  return (\n    <RadioGroupPrimitive.Item\n      data-slot=\"radio-group-item\"\n      className={cn(\n        \"border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator\n        data-slot=\"radio-group-indicator\"\n        className=\"relative flex items-center justify-center\"\n      >\n        <CircleIcon className=\"fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n}\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1466},"components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { GripVerticalIcon } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction ResizablePanelGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {\n  return (\n    <ResizablePrimitive.PanelGroup\n      data-slot=\"resizable-panel-group\"\n      className={cn(\n        \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ResizablePanel({\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {\n  return <ResizablePrimitive.Panel data-slot=\"resizable-panel\" {...props} />\n}\n\nfunction ResizableHandle({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) {\n  return (\n    <ResizablePrimitive.PanelResizeHandle\n      data-slot=\"resizable-handle\"\n      className={cn(\n        \"bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:translate-x-0 data-[panel-group-direction=vertical]:after:-translate-y-1/2 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n        className\n      )}\n      {...props}\n    >\n      {withHandle && (\n        <div className=\"bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border\">\n          <GripVerticalIcon className=\"size-2.5\" />\n        </div>\n      )}\n    </ResizablePrimitive.PanelResizeHandle>\n  )\n}\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":2028},"components/ui/scroll-area.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}\n\nfunction ScrollBar({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        \"flex touch-none p-px transition-colors select-none\",\n        orientation === \"vertical\" &&\n          \"h-full w-2.5 border-l border-l-transparent\",\n        orientation === \"horizontal\" &&\n          \"h-2.5 flex-col border-t border-t-transparent\",\n        className\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1645},"components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n","size_bytes":6253},"components/ui/separator.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Separator({\n  className,\n  orientation = \"horizontal\",\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }\n","size_bytes":699},"components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {\n  return <SheetPrimitive.Root data-slot=\"sheet\" {...props} />\n}\n\nfunction SheetTrigger({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {\n  return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />\n}\n\nfunction SheetClose({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Close>) {\n  return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />\n}\n\nfunction SheetPortal({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Portal>) {\n  return <SheetPrimitive.Portal data-slot=\"sheet-portal\" {...props} />\n}\n\nfunction SheetOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {\n  return (\n    <SheetPrimitive.Overlay\n      data-slot=\"sheet-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SheetContent({\n  className,\n  children,\n  side = \"right\",\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Content> & {\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\"\n}) {\n  return (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        data-slot=\"sheet-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n          side === \"right\" &&\n            \"data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm\",\n          side === \"left\" &&\n            \"data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm\",\n          side === \"top\" &&\n            \"data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b\",\n          side === \"bottom\" &&\n            \"data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <SheetPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none\">\n          <XIcon className=\"size-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  )\n}\n\nfunction SheetHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-header\"\n      className={cn(\"flex flex-col gap-1.5 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-footer\"\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Title>) {\n  return (\n    <SheetPrimitive.Title\n      data-slot=\"sheet-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Description>) {\n  return (\n    <SheetPrimitive.Description\n      data-slot=\"sheet-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4090},"components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon)\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"size-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-(--skeleton-width) flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21633},"components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn(\"bg-accent animate-pulse rounded-md\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":276},"components/ui/slider.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  const _values = React.useMemo(\n    () =>\n      Array.isArray(value)\n        ? value\n        : Array.isArray(defaultValue)\n          ? defaultValue\n          : [min, max],\n    [value, defaultValue, min, max]\n  )\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        \"relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col\",\n        className\n      )}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={cn(\n          \"bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5\"\n        )}\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={cn(\n            \"bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full\"\n          )}\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: _values.length }, (_, index) => (\n        <SliderPrimitive.Thumb\n          data-slot=\"slider-thumb\"\n          key={index}\n          className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50\"\n        />\n      ))}\n    </SliderPrimitive.Root>\n  )\n}\n\nexport { Slider }\n","size_bytes":2001},"components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, ToasterProps } from \"sonner\"\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      style={\n        {\n          \"--normal-bg\": \"var(--popover)\",\n          \"--normal-text\": \"var(--popover-foreground)\",\n          \"--normal-border\": \"var(--border)\",\n        } as React.CSSProperties\n      }\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":564},"components/ui/switch.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitive from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Switch({\n  className,\n  ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n  return (\n    <SwitchPrimitive.Root\n      data-slot=\"switch\"\n      className={cn(\n        \"peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <SwitchPrimitive.Thumb\n        data-slot=\"switch-thumb\"\n        className={cn(\n          \"bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0\"\n        )}\n      />\n    </SwitchPrimitive.Root>\n  )\n}\n\nexport { Switch }\n","size_bytes":1177},"components/ui/table.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Table({ className, ...props }: React.ComponentProps<\"table\">) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn(\"w-full caption-bottom text-sm\", className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<\"thead\">) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn(\"[&_tr]:border-b\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<\"tbody\">) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn(\"[&_tr:last-child]:border-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<\"tfoot\">) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        \"bg-muted/50 border-t font-medium [&>tr]:last:border-b-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<\"tr\">) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        \"hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<\"th\">) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        \"text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<\"td\">) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        \"p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<\"caption\">) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn(\"text-muted-foreground mt-4 text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2448},"components/ui/tabs.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1969},"components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Textarea }\n","size_bytes":759},"components/ui/toast.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4859},"components/ui/toaster.tsx":{"content":"\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":786},"components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nfunction ToggleGroup({\n  className,\n  variant,\n  size,\n  children,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <ToggleGroupPrimitive.Root\n      data-slot=\"toggle-group\"\n      data-variant={variant}\n      data-size={size}\n      className={cn(\n        \"group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs\",\n        className\n      )}\n      {...props}\n    >\n      <ToggleGroupContext.Provider value={{ variant, size }}>\n        {children}\n      </ToggleGroupContext.Provider>\n    </ToggleGroupPrimitive.Root>\n  )\n}\n\nfunction ToggleGroupItem({\n  className,\n  children,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &\n  VariantProps<typeof toggleVariants>) {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      data-slot=\"toggle-group-item\"\n      data-variant={context.variant || variant}\n      data-size={context.size || size}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        \"min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n}\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1925},"components/ui/toggle.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Toggle({\n  className,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof TogglePrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <TogglePrimitive.Root\n      data-slot=\"toggle\"\n      className={cn(toggleVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Toggle, toggleVariants }\n","size_bytes":1570},"components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  )\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1891},"components/ui/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"components/ui/use-toast.ts":{"content":"\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3948},"app/api/alerts/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\n\n// In-memory storage for alerts\nconst apiKeys = new Map<string, { stationId: string; lastUsed: Date; status: 'active' | 'inactive' }>()\nconst alerts = new Map<string, any[]>()\n\n// Initialize with default API keys\napiKeys.set('vsr_st001_abc123def456', { stationId: 'ST001', lastUsed: new Date(), status: 'active' })\napiKeys.set('vsr_st002_xyz789ghi012', { stationId: 'ST002', lastUsed: new Date(), status: 'active' })\napiKeys.set('vsr_st003_mno345pqr678', { stationId: 'ST003', lastUsed: new Date(), status: 'active' })\napiKeys.set('vsr_st004_stu901vwx234', { stationId: 'ST004', lastUsed: new Date(), status: 'active' })\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get('authorization')\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Missing or invalid authorization header' },\n        { status: 401 }\n      )\n    }\n\n    const apiKey = authHeader.substring(7)\n    const keyData = apiKeys.get(apiKey)\n\n    if (!keyData || keyData.status !== 'active') {\n      return NextResponse.json(\n        { error: 'Invalid or inactive API key' },\n        { status: 401 }\n      )\n    }\n\n    const body = await request.json()\n    \n    if (!body.device_id || !body.alert_type) {\n      return NextResponse.json(\n        { error: 'Missing required fields: device_id, alert_type' },\n        { status: 400 }\n      )\n    }\n\n    const stationId = keyData.stationId\n    if (!alerts.has(stationId)) {\n      alerts.set(stationId, [])\n    }\n\n    const alert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      device_id: body.device_id,\n      alert_type: body.alert_type,\n      details: body.details || '',\n      severity: body.severity || 'medium',\n      timestamp: new Date().toISOString(),\n      stationId,\n      status: 'active',\n      acknowledged: false\n    }\n\n    alerts.get(stationId)!.push(alert)\n    \n    // Keep only last 50 alerts per station\n    const stationAlerts = alerts.get(stationId)!\n    if (stationAlerts.length > 50) {\n      stationAlerts.splice(0, stationAlerts.length - 50)\n    }\n\n    console.log(`Alert received from ${stationId}:`, {\n      alert_type: alert.alert_type,\n      severity: alert.severity,\n      timestamp: alert.timestamp\n    })\n\n    return NextResponse.json({\n      success: true,\n      message: 'Alert received successfully',\n      alertId: alert.id\n    })\n\n  } catch (error) {\n    console.error('Error processing alert:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get('authorization')\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Missing or invalid authorization header' },\n        { status: 401 }\n      )\n    }\n\n    const apiKey = authHeader.substring(7)\n    const keyData = apiKeys.get(apiKey)\n\n    if (!keyData || keyData.status !== 'active') {\n      return NextResponse.json(\n        { error: 'Invalid or inactive API key' },\n        { status: 401 }\n      )\n    }\n\n    const stationId = keyData.stationId\n    const stationAlerts = alerts.get(stationId) || []\n\n    // Return active alerts\n    const activeAlerts = stationAlerts.filter(alert => alert.status === 'active')\n\n    return NextResponse.json({\n      success: true,\n      stationId,\n      alerts: activeAlerts.slice(-10), // Return last 10 active alerts\n      totalAlerts: stationAlerts.length,\n      activeAlerts: activeAlerts.length\n    })\n\n  } catch (error) {\n    console.error('Error retrieving alerts:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":3851},"app/api/commands/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\n\n// In-memory storage for commands\nconst apiKeys = new Map<string, { stationId: string; lastUsed: Date; status: 'active' | 'inactive' }>()\nconst commandQueue = new Map<string, any[]>()\n\n// Initialize with default API keys\napiKeys.set('vsr_st001_abc123def456', { stationId: 'ST001', lastUsed: new Date(), status: 'active' })\napiKeys.set('vsr_st002_xyz789ghi012', { stationId: 'ST002', lastUsed: new Date(), status: 'active' })\napiKeys.set('vsr_st003_mno345pqr678', { stationId: 'ST003', lastUsed: new Date(), status: 'active' })\napiKeys.set('vsr_st004_stu901vwx234', { stationId: 'ST004', lastUsed: new Date(), status: 'active' })\n\nexport async function GET(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get('authorization')\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Missing or invalid authorization header' },\n        { status: 401 }\n      )\n    }\n\n    const apiKey = authHeader.substring(7)\n    const keyData = apiKeys.get(apiKey)\n\n    if (!keyData || keyData.status !== 'active') {\n      return NextResponse.json(\n        { error: 'Invalid or inactive API key' },\n        { status: 401 }\n      )\n    }\n\n    const stationId = keyData.stationId\n    const commands = commandQueue.get(stationId) || []\n\n    // Return the oldest unprocessed command\n    const pendingCommand = commands.find(cmd => !cmd.processed)\n    \n    if (pendingCommand) {\n      // Mark command as processed\n      pendingCommand.processed = true\n      pendingCommand.processedAt = new Date().toISOString()\n      \n      console.log(`Command sent to ${stationId}:`, pendingCommand)\n      \n      return NextResponse.json({\n        success: true,\n        command: pendingCommand\n      })\n    }\n\n    return NextResponse.json({\n      success: true,\n      command: null,\n      message: 'No pending commands'\n    })\n\n  } catch (error) {\n    console.error('Error retrieving commands:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get('authorization')\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Missing or invalid authorization header' },\n        { status: 401 }\n      )\n    }\n\n    const apiKey = authHeader.substring(7)\n    const keyData = apiKeys.get(apiKey)\n\n    if (!keyData || keyData.status !== 'active') {\n      return NextResponse.json(\n        { error: 'Invalid or inactive API key' },\n        { status: 401 }\n      )\n    }\n\n    const body = await request.json()\n    \n    if (!body.stationId || !body.command) {\n      return NextResponse.json(\n        { error: 'Missing required fields: stationId, command' },\n        { status: 400 }\n      )\n    }\n\n    const stationId = body.stationId\n    if (!commandQueue.has(stationId)) {\n      commandQueue.set(stationId, [])\n    }\n\n    const command = {\n      id: `cmd_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      command: body.command,\n      parameters: body.parameters || {},\n      timestamp: new Date().toISOString(),\n      processed: false,\n      createdBy: 'dashboard'\n    }\n\n    commandQueue.get(stationId)!.push(command)\n    \n    console.log(`Command queued for ${stationId}:`, command)\n\n    return NextResponse.json({\n      success: true,\n      message: 'Command queued successfully',\n      commandId: command.id\n    })\n\n  } catch (error) {\n    console.error('Error queuing command:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":3726},"app/api/data/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { apiKeys, sensorData, type SensorDataEntry } from '@/lib/shared-storage'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get('authorization')\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Missing or invalid authorization header' },\n        { status: 401 }\n      )\n    }\n\n    const apiKey = authHeader.substring(7) // Remove 'Bearer ' prefix\n    const keyData = apiKeys.get(apiKey)\n\n    if (!keyData || keyData.status !== 'active') {\n      return NextResponse.json(\n        { error: 'Invalid or inactive API key' },\n        { status: 401 }\n      )\n    }\n\n    const body = await request.json()\n    \n    // Validate required fields\n    if (!body.device_id || !body.sensor_data) {\n      return NextResponse.json(\n        { error: 'Missing required fields: device_id, sensor_data' },\n        { status: 400 }\n      )\n    }\n\n    // Update last used timestamp\n    keyData.lastUsed = new Date()\n    apiKeys.set(apiKey, keyData)\n\n    // Store sensor data\n    const stationId = keyData.stationId\n    if (!sensorData.has(stationId)) {\n      sensorData.set(stationId, [])\n    }\n    \n    const dataEntry: SensorDataEntry = {\n      device_id: body.device_id,\n      sensor_data: body.sensor_data,\n      timestamp: new Date().toISOString(),\n      stationId,\n      apiKey: apiKey.substring(0, 10) + '...' // Partial key for logging\n    }\n    \n    sensorData.get(stationId)!.push(dataEntry)\n    \n    // Keep only last 100 entries per station\n    const stationData = sensorData.get(stationId)!\n    if (stationData.length > 100) {\n      stationData.splice(0, stationData.length - 100)\n    }\n\n    console.log(`Data received from ${stationId}:`, {\n      device_id: body.device_id,\n      timestamp: dataEntry.timestamp,\n      sensor_count: Object.keys(body.sensor_data || {}).length\n    })\n\n    return NextResponse.json({\n      success: true,\n      message: 'Data received successfully',\n      stationId,\n      timestamp: dataEntry.timestamp\n    })\n\n  } catch (error) {\n    console.error('Error processing sensor data:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get('authorization')\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Missing or invalid authorization header' },\n        { status: 401 }\n      )\n    }\n\n    const apiKey = authHeader.substring(7)\n    const keyData = apiKeys.get(apiKey)\n\n    if (!keyData || keyData.status !== 'active') {\n      return NextResponse.json(\n        { error: 'Invalid or inactive API key' },\n        { status: 401 }\n      )\n    }\n\n    const stationId = keyData.stationId\n    const data = sensorData.get(stationId) || []\n\n    return NextResponse.json({\n      success: true,\n      stationId,\n      data: data.slice(-10), // Return last 10 entries\n      totalEntries: data.length\n    })\n\n  } catch (error) {\n    console.error('Error retrieving sensor data:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":3305},"app/api/keys/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\n\n// In-memory storage for API keys\nconst apiKeys = new Map<string, { stationId: string; lastUsed: Date; status: 'active' | 'inactive'; createdAt: Date }>()\n\n// Initialize with default API keys\napiKeys.set('vsr_st001_abc123def456', { stationId: 'ST001', lastUsed: new Date(), status: 'active', createdAt: new Date() })\napiKeys.set('vsr_st002_xyz789ghi012', { stationId: 'ST002', lastUsed: new Date(), status: 'active', createdAt: new Date() })\napiKeys.set('vsr_st003_mno345pqr678', { stationId: 'ST003', lastUsed: new Date(), status: 'active', createdAt: new Date() })\napiKeys.set('vsr_st004_stu901vwx234', { stationId: 'ST004', lastUsed: new Date(), status: 'active', createdAt: new Date() })\napiKeys.set('vsr_st005_lmn567opq890', { stationId: 'ST005', lastUsed: new Date(), status: 'active', createdAt: new Date() })\napiKeys.set('vsr_st006_rst123uvw456', { stationId: 'ST006', lastUsed: new Date(), status: 'active', createdAt: new Date() })\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Get all API keys for the dashboard\n    const keysArray = Array.from(apiKeys.entries()).map(([key, data]) => ({\n      key: key.substring(0, 10) + '...', // Partial key for security\n      fullKey: key,\n      stationId: data.stationId,\n      status: data.status,\n      lastUsed: data.lastUsed,\n      createdAt: data.createdAt\n    }))\n\n    return NextResponse.json({\n      success: true,\n      keys: keysArray\n    })\n\n  } catch (error) {\n    console.error('Error retrieving API keys:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    \n    if (!body.stationId) {\n      return NextResponse.json(\n        { error: 'Missing required field: stationId' },\n        { status: 400 }\n      )\n    }\n\n    // Generate new API key\n    const newKey = `vsr_${body.stationId.toLowerCase()}_${Math.random().toString(36).substring(2, 15)}`\n    \n    // Check if station already has an active key\n    const existingKey = Array.from(apiKeys.entries()).find(([_, data]) => \n      data.stationId === body.stationId && data.status === 'active'\n    )\n\n    if (existingKey) {\n      // Deactivate existing key\n      const [oldKey, oldData] = existingKey\n      oldData.status = 'inactive'\n      apiKeys.set(oldKey, oldData)\n    }\n\n    // Add new key\n    apiKeys.set(newKey, {\n      stationId: body.stationId,\n      lastUsed: new Date(),\n      status: 'active',\n      createdAt: new Date()\n    })\n\n    console.log(`New API key generated for ${body.stationId}:`, newKey.substring(0, 10) + '...')\n\n    return NextResponse.json({\n      success: true,\n      message: 'API key generated successfully',\n      key: newKey,\n      stationId: body.stationId,\n      createdAt: new Date().toISOString()\n    })\n\n  } catch (error) {\n    console.error('Error generating API key:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    const body = await request.json()\n    \n    if (!body.key) {\n      return NextResponse.json(\n        { error: 'Missing required field: key' },\n        { status: 400 }\n      )\n    }\n\n    const keyData = apiKeys.get(body.key)\n    \n    if (!keyData) {\n      return NextResponse.json(\n        { error: 'API key not found' },\n        { status: 404 }\n      )\n    }\n\n    // Revoke the key\n    keyData.status = 'inactive'\n    apiKeys.set(body.key, keyData)\n\n    console.log(`API key revoked for ${keyData.stationId}:`, body.key.substring(0, 10) + '...')\n\n    return NextResponse.json({\n      success: true,\n      message: 'API key revoked successfully',\n      stationId: keyData.stationId\n    })\n\n  } catch (error) {\n    console.error('Error revoking API key:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":4009},"app/api/status/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\n\n// In-memory storage for API keys and status\nconst apiKeys = new Map<string, { stationId: string; lastUsed: Date; status: 'active' | 'inactive' }>()\n\n// Initialize with default API keys\napiKeys.set('vsr_st001_abc123def456', { stationId: 'ST001', lastUsed: new Date(), status: 'active' })\napiKeys.set('vsr_st002_xyz789ghi012', { stationId: 'ST002', lastUsed: new Date(), status: 'active' })\napiKeys.set('vsr_st003_mno345pqr678', { stationId: 'ST003', lastUsed: new Date(), status: 'active' })\napiKeys.set('vsr_st004_stu901vwx234', { stationId: 'ST004', lastUsed: new Date(), status: 'active' })\n\nexport async function GET(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get('authorization')\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Missing or invalid authorization header' },\n        { status: 401 }\n      )\n    }\n\n    const apiKey = authHeader.substring(7)\n    const keyData = apiKeys.get(apiKey)\n\n    if (!keyData || keyData.status !== 'active') {\n      return NextResponse.json(\n        { error: 'Invalid or inactive API key' },\n        { status: 401 }\n      )\n    }\n\n    // Update last used timestamp\n    keyData.lastUsed = new Date()\n    apiKeys.set(apiKey, keyData)\n\n    const status = {\n      success: true,\n      message: 'API connection successful',\n      stationId: keyData.stationId,\n      timestamp: new Date().toISOString(),\n      serverTime: new Date().toISOString(),\n      uptime: process.uptime(),\n      version: '1.0.0',\n      endpoints: {\n        data: '/api/data',\n        commands: '/api/commands',\n        alerts: '/api/alerts',\n        status: '/api/status'\n      }\n    }\n\n    console.log(`Status check from ${keyData.stationId}:`, {\n      timestamp: status.timestamp,\n      uptime: status.uptime\n    })\n\n    return NextResponse.json(status)\n\n  } catch (error) {\n    console.error('Error checking status:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get('authorization')\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Missing or invalid authorization header' },\n        { status: 401 }\n      )\n    }\n\n    const apiKey = authHeader.substring(7)\n    const keyData = apiKeys.get(apiKey)\n\n    if (!keyData || keyData.status !== 'active') {\n      return NextResponse.json(\n        { error: 'Invalid or inactive API key' },\n        { status: 401 }\n      )\n    }\n\n    const body = await request.json()\n    \n    // Update station status\n    const statusUpdate = {\n      stationId: keyData.stationId,\n      timestamp: new Date().toISOString(),\n      status: body.status || 'online',\n      battery: body.battery || 100,\n      signal: body.signal || -50,\n      temperature: body.temperature || 25,\n      lastHeartbeat: new Date().toISOString()\n    }\n\n    console.log(`Status update from ${keyData.stationId}:`, statusUpdate)\n\n    return NextResponse.json({\n      success: true,\n      message: 'Status updated successfully',\n      ...statusUpdate\n    })\n\n  } catch (error) {\n    console.error('Error updating status:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":3432},"app/api/stations/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { apiKeys, sensorData, stationMetadata, type SensorDataEntry } from '@/lib/shared-storage'\n\n// Helper function to get real ESP32 sensor data (NO SIMULATED DATA)\nfunction getRealESP32Data(stationId: string, hasApiKey: boolean) {\n  if (!hasApiKey) {\n    return {\n      status: \"no_api_key\",\n      voltage: 0,\n      current: 0,\n      temp: 0,\n      power: 0,\n      relayStatus: false,\n      firmwareVersion: \"Unknown\",\n      connectedUser: null,\n      carConnected: false,\n      carModel: null,\n      chargingProgress: 0,\n      mlThreatLevel: \"unknown\",\n      esp32Status: \"no_api_key\",\n      batteryLevel: 0,\n      lastSync: \"No API key configured\"\n    }\n  }\n\n  // Get real sensor data from ESP32 devices\n  const stationData = sensorData.get(stationId) || []\n  \n  if (stationData.length === 0) {\n    return {\n      status: \"esp32_not_connected\",\n      voltage: 0,\n      current: 0,\n      temp: 0,\n      power: 0,\n      relayStatus: false,\n      firmwareVersion: \"Unknown\",\n      connectedUser: null,\n      carConnected: false,\n      carModel: null,\n      chargingProgress: 0,\n      mlThreatLevel: \"unknown\",\n      esp32Status: \"waiting_for_connection\",\n      batteryLevel: 0,\n      lastSync: \"No ESP32 data received\"\n    }\n  }\n\n  // Get the latest real sensor data from ESP32\n  const latestData = stationData[stationData.length - 1]\n  const sensors = latestData.sensor_data\n  \n  // Check if data is recent (within last 10 seconds)\n  const dataAge = Date.now() - new Date(latestData.timestamp).getTime()\n  const isRecentData = dataAge < 10000 // 10 seconds\n  \n  if (!isRecentData) {\n    return {\n      status: \"esp32_disconnected\",\n      voltage: sensors.voltage || 0,\n      current: sensors.current || 0,\n      temp: sensors.temperature || 0,\n      power: sensors.power || 0,\n      relayStatus: sensors.relay_status || false,\n      firmwareVersion: \"ESP32-S3\",\n      connectedUser: null,\n      carConnected: sensors.car_connected || false,\n      carModel: sensors.car_model || null,\n      chargingProgress: sensors.charging_progress || 0,\n      mlThreatLevel: sensors.ml_threat_level || \"unknown\",\n      esp32Status: \"disconnected\",\n      batteryLevel: sensors.battery_level || 0,\n      lastSync: `${Math.round(dataAge / 1000)}s ago (disconnected)`\n    }\n  }\n\n  // ESP32 is connected and sending real data\n  const isCharging = (sensors.current || 0) > 0.1\n  const hasThreat = sensors.ml_threat_level === \"high\" || sensors.ml_threat_level === \"critical\"\n  \n  return {\n    status: hasThreat ? \"threat\" : (isCharging ? \"charging\" : \"online\"),\n    voltage: sensors.voltage || 0,\n    current: sensors.current || 0,\n    temp: sensors.temperature || 0,\n    power: sensors.power || 0,\n    relayStatus: sensors.relay_status || false,\n    firmwareVersion: \"ESP32-S3\",\n    connectedUser: isCharging ? sensors.car_model || \"Unknown User\" : null,\n    carConnected: sensors.car_connected || isCharging,\n    carModel: sensors.car_model || (isCharging ? \"EV Vehicle\" : null),\n    chargingProgress: sensors.charging_progress || (isCharging ? Math.round((sensors.current || 0) * 10) : 0),\n    mlThreatLevel: sensors.ml_threat_level || (isCharging ? \"monitoring\" : \"safe\"),\n    esp32Status: \"connected\",\n    batteryLevel: sensors.battery_level || 0,\n    lastSync: `${Math.round(dataAge / 1000)}s ago`\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Get all stations with their REAL ESP32 sensor data (NO SIMULATED DATA)\n    const stations = []\n    \n    for (const [stationId, metadata] of Object.entries(stationMetadata)) {\n      // Check if station has an active API key\n      const activeKey = Array.from(apiKeys.entries()).find(([key, data]) => \n        data.stationId === stationId && data.status === 'active'\n      )\n      \n      const hasActiveApiKey = !!activeKey\n      \n      // Get ONLY real ESP32 sensor data - NO simulated values\n      const realEsp32Data = getRealESP32Data(stationId, hasActiveApiKey)\n      \n      stations.push({\n        id: stationId,\n        ...metadata,\n        ...realEsp32Data,\n        apiKey: hasActiveApiKey ? \"active\" : \"inactive\",\n        // Add debugging info for connection status\n        esp32Connected: hasActiveApiKey && sensorData.has(stationId) && sensorData.get(stationId)!.length > 0,\n        lastDataReceived: hasActiveApiKey && sensorData.has(stationId) && sensorData.get(stationId)!.length > 0 \n          ? sensorData.get(stationId)![sensorData.get(stationId)!.length - 1].timestamp \n          : null\n      })\n    }\n\n    // Count real ESP32 connections and status\n    const esp32Connected = stations.filter(s => s.esp32Status === \"connected\").length\n    const esp32Charging = stations.filter(s => s.status === \"charging\").length\n    const esp32Threats = stations.filter(s => s.mlThreatLevel === \"high\" || s.mlThreatLevel === \"critical\").length\n\n    return NextResponse.json({\n      success: true,\n      stations,\n      timestamp: new Date().toISOString(),\n      totalStations: stations.length,\n      esp32Connected: esp32Connected,\n      activeStations: stations.filter(s => s.status === \"charging\" || s.status === \"online\").length,\n      connectedCars: stations.filter(s => s.carConnected).length,\n      threats: esp32Threats,\n      realDataOnly: true, // Indicate this is real ESP32 data only\n      message: esp32Connected === 0 ? \"No ESP32 devices connected. Upload Arduino code to your ESP32-S3 hardware.\" : `${esp32Connected} ESP32 device(s) connected and sending real sensor data.`\n    })\n\n  } catch (error) {\n    console.error('Error fetching real ESP32 station data:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}","size_bytes":5706},"lib/shared-storage.ts":{"content":"// Shared storage for API keys and sensor data across endpoints\n// In production, this should be replaced with a proper database\n\nexport interface ApiKeyData {\n  stationId: string\n  lastUsed: Date\n  status: 'active' | 'inactive'\n  createdAt: Date\n}\n\nexport interface SensorDataEntry {\n  device_id: string\n  sensor_data: {\n    voltage?: number\n    current?: number\n    temperature?: number\n    power?: number\n    relay_status?: boolean\n    ml_threat_level?: string\n    car_connected?: boolean\n    car_model?: string\n    charging_progress?: number\n    battery_level?: number\n    esp32_status?: string\n  }\n  timestamp: string\n  stationId: string\n  apiKey: string\n}\n\n// Shared in-memory storage\nexport const apiKeys = new Map<string, ApiKeyData>()\nexport const sensorData = new Map<string, SensorDataEntry[]>()\n\n// Initialize with default API keys for all 6 stations\napiKeys.set('vsr_st001_abc123def456', { \n  stationId: 'ST001', \n  lastUsed: new Date(), \n  status: 'active', \n  createdAt: new Date() \n})\napiKeys.set('vsr_st002_xyz789ghi012', { \n  stationId: 'ST002', \n  lastUsed: new Date(), \n  status: 'active', \n  createdAt: new Date() \n})\napiKeys.set('vsr_st003_mno345pqr678', { \n  stationId: 'ST003', \n  lastUsed: new Date(), \n  status: 'active', \n  createdAt: new Date() \n})\napiKeys.set('vsr_st004_stu901vwx234', { \n  stationId: 'ST004', \n  lastUsed: new Date(), \n  status: 'active', \n  createdAt: new Date() \n})\napiKeys.set('vsr_st005_lmn567opq890', { \n  stationId: 'ST005', \n  lastUsed: new Date(), \n  status: 'active', \n  createdAt: new Date() \n})\napiKeys.set('vsr_st006_rst123uvw456', { \n  stationId: 'ST006', \n  lastUsed: new Date(), \n  status: 'active', \n  createdAt: new Date() \n})\n\n// Station metadata\nexport const stationMetadata = {\n  ST001: {\n    name: \"Downtown Plaza\",\n    location: \"Downtown District\",\n    address: \"123 Main St, City Center\",\n  },\n  ST002: {\n    name: \"Mall Parking\",\n    location: \"Shopping District\", \n    address: \"456 Commerce Ave, Mall Plaza\",\n  },\n  ST003: {\n    name: \"Airport Terminal\",\n    location: \"Airport\",\n    address: \"789 Airport Rd, Terminal B\",\n  },\n  ST004: {\n    name: \"University Campus\",\n    location: \"Education District\",\n    address: \"321 University Blvd, Campus North\",\n  },\n  ST005: {\n    name: \"Business Park\",\n    location: \"Business District\",\n    address: \"555 Corporate Dr, Business Park\",\n  },\n  ST006: {\n    name: \"Residential Complex\",\n    location: \"Residential Area\",\n    address: \"888 Home Ave, Residential Complex\",\n  },\n}","size_bytes":2495},"app/api/threats/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { apiKeys, sensorData } from '@/lib/shared-storage'\n\n// In-memory storage for threat logs - all security events and alerts\nconst threatLogs = new Map<string, any[]>()\n\n// Initialize with some sample threat data until ESP32 devices connect\nconst sampleThreats = [\n  {\n    id: \"THR001\",\n    timestamp: new Date().toISOString(),\n    type: \"System Startup\",\n    station: \"SYSTEM\",\n    stationName: \"Dashboard System\",\n    severity: \"info\",\n    status: \"active\",\n    description: \"EV-Secure system initialized and waiting for ESP32 connections\",\n    source: \"System\",\n    action: \"API endpoints ready for ESP32 devices\",\n    mlConfidence: 100,\n    device_id: \"dashboard\",\n    details: \"All 6 stations (ST001-ST006) have API keys ready for configuration\"\n  }\n]\n\n// Add sample threat to logs\nthreatLogs.set('SYSTEM', sampleThreats)\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Collect all threats from all stations\n    const allThreats: any[] = []\n    \n    // Add threats from all stations\n    for (const [stationId, threats] of threatLogs.entries()) {\n      allThreats.push(...threats.map(threat => ({\n        ...threat,\n        stationId\n      })))\n    }\n    \n    // Add alerts as threats (alerts are also security events)\n    for (const [stationId, alerts] of threatLogs.entries()) {\n      if (stationId !== 'SYSTEM') {\n        const stationAlerts = alerts.filter(alert => alert.alert_type)\n        allThreats.push(...stationAlerts.map(alert => ({\n          id: alert.id,\n          timestamp: alert.timestamp,\n          type: alert.alert_type,\n          station: alert.stationId,\n          stationName: getStationName(alert.stationId),\n          severity: alert.severity || 'medium',\n          status: alert.status || 'active',\n          description: alert.details || `${alert.alert_type} detected`,\n          source: alert.device_id || 'ESP32',\n          action: alert.acknowledged ? 'Acknowledged by operator' : 'Awaiting response',\n          mlConfidence: alert.ml_confidence || 0,\n          device_id: alert.device_id,\n          details: alert.details\n        })))\n      }\n    }\n    \n    // Sort by timestamp (newest first)\n    allThreats.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n    \n    return NextResponse.json({\n      success: true,\n      threats: allThreats,\n      total: allThreats.length,\n      timestamp: new Date().toISOString()\n    })\n\n  } catch (error) {\n    console.error('Error retrieving threat logs:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get('authorization')\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Missing or invalid authorization header' },\n        { status: 401 }\n      )\n    }\n\n    const apiKey = authHeader.substring(7)\n    const keyData = apiKeys.get(apiKey)\n\n    if (!keyData || keyData.status !== 'active') {\n      return NextResponse.json(\n        { error: 'Invalid or inactive API key' },\n        { status: 401 }\n      )\n    }\n\n    const body = await request.json()\n    \n    // Validate required fields for threat logging\n    if (!body.threat_type || !body.device_id) {\n      return NextResponse.json(\n        { error: 'Missing required fields: threat_type, device_id' },\n        { status: 400 }\n      )\n    }\n\n    // Update last used timestamp\n    keyData.lastUsed = new Date()\n    apiKeys.set(apiKey, keyData)\n\n    const stationId = keyData.stationId\n    if (!threatLogs.has(stationId)) {\n      threatLogs.set(stationId, [])\n    }\n\n    const threat = {\n      id: `THR_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date().toISOString(),\n      type: body.threat_type,\n      station: stationId,\n      stationName: getStationName(stationId),\n      severity: body.severity || 'medium',\n      status: body.status || 'active', \n      description: body.description || `${body.threat_type} detected by ESP32`,\n      source: body.source || body.device_id,\n      action: body.action || 'Logged for analysis',\n      mlConfidence: body.ml_confidence || 0,\n      device_id: body.device_id,\n      details: body.details || '',\n      raw_data: body.sensor_data || {}\n    }\n\n    threatLogs.get(stationId)!.push(threat)\n    \n    // Keep last 200 threats per station for comprehensive logging\n    const stationThreats = threatLogs.get(stationId)!\n    if (stationThreats.length > 200) {\n      stationThreats.splice(0, stationThreats.length - 200)\n    }\n\n    console.log(`Threat logged from ${stationId}:`, {\n      type: threat.type,\n      severity: threat.severity,\n      ml_confidence: threat.mlConfidence,\n      timestamp: threat.timestamp\n    })\n\n    return NextResponse.json({\n      success: true,\n      message: 'Threat logged successfully',\n      threatId: threat.id,\n      stationId,\n      timestamp: threat.timestamp\n    })\n\n  } catch (error) {\n    console.error('Error logging threat:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nfunction getStationName(stationId: string): string {\n  const stationNames: { [key: string]: string } = {\n    'ST001': 'Downtown Plaza',\n    'ST002': 'Mall Parking', \n    'ST003': 'Airport Terminal',\n    'ST004': 'University Campus',\n    'ST005': 'Business Park',\n    'ST006': 'Residential Complex',\n    'SYSTEM': 'Dashboard System'\n  }\n  return stationNames[stationId] || 'Unknown Station'\n}","size_bytes":5617}},"version":1}